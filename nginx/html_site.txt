допустим есть несколько сайтов, сделанных на основе html/css/js. они лежат в разных каталогах локальной машины. точка входа - index.html

задача выложить их в интернет под разными адресами.

установим nginx.

проверим его статус:
service nginx status

========================
существует главный конфиг:
/etc/nginx/nginx.conf

этот конфиг включает отдельные конфиги каждого сайта, которые находятся в sites-available.
и которые включены через симлинк в sites/enabled

пример создания симлинка:
sudo ln -s PATHTO

========================
поместим файлы сайта в:
/home/kalinin/html/site1

создадим в sites-available файл home:
server {
	listen 80;		# случаем порт
	listen [::]:80;

	root /home/kalinin/html/site1;		# откуда брать файлы
	index index.html index.htm;				# к какомц файлу обращаться, если в адресе указан только каталог + /
	server_name home;									# какой домен будет пользователем вводиться в адресную строку браузера

	location / {
		try_files $uri $uri/ =404;
	}
}

затем создадим симлинк в sites-enabled, который будет ссылаться на описанный выше конфиг

========================
затем нужно внести изменения в /etc/hosts:
#127.0.0.1	localhost
127.0.0.1	home

после того как пользователь вводит любой адрес в адресную строку браузера, то сначала ищется соответствие в hosts и только потом в службе DNS.

========================
в главном конфиге установлены адреса логов:
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

возможно включить более подробный режим для error_log , если добавить перед ; debug

========================
у порта есть сервер по умолчанию. он указывается только один раз. при инклюде будет конфлик, если он указао в нескольких локальных конфигах.

пример:
server {
	listen 80 default_server;
	listen [::]:80 default_server;

========================
location обрабатывает части адреса, которые идут после root server_name home;

происходит поиск наиболее полного соответствия. можно использовать регулярные выражения или строку.

location можно вкладывать друг в друга.

вот пример обработки адреса http://home:

server {
	listen 80;
	listen [::]:80;

	root /home/kalinin/html/site1;
	index index.html index.htm;
	server_name home;

	location /zzz {
		try_files /images/1.jpg /index.htm;
	}
}

в этом случае по адресу http://home отобразится index.html
а по http://home/zzz сначала попробует отобразиться картинка: /images/1.jpg . если её не существует, то отобразится /index.html

таким образом try_files перебирает варианты подходящих файлов и каталогов(у каталогов на конце слэш/)

можно ещё использовать alias в этом случае после ввоа пользователем адреса, файлы будут браться из совсем другого каталога


========================
========================
доп сведения:

server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;
  limit_rate 512k;
  server_tokens off;
  error_page 403 http://devzen.ru/;
  error_page 404 http://devzen.ru/;

  root /var/www;
  index index.html index.htm;

  # Make site accessible from http://localhost/
  server_name localhost;

  location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    try_files $uri $uri/ =404;
  }
По большому счету все, что мы тут говорим Nginx — это (1) слушай порт 80, (2) отдавай файлы со скоростью не больше 512 кбайт в секунду, (3) в случае ошибок 403 или 404 делай редирект на указанный хост, (4) раздавай файлы из каталога /var/www, (5) если пользователь запросил каталог, и в нем есть файл с именем index.html или index.htm, отдавать этот файл.

========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================