образ это набор зафиксированных слоёв. например: linux + python + djano. его можно создать самому или взять готовый из репозитория докера.

контейнер это набор незафиксированных слоёв(их можно менять). например образ из предыдущего пункта + проект на django. у одного образа может быть несколько контейнеров, то есть несколько программ могут работать в одном окружении.

====================================
простейший запуск контейнера, который выводит фразу в консоль:
$ docker run busybox echo "hello from busybox"
hello from busybox

после этого контейнер закрывается. то есть почти моментально

-----
а так можно запустить контейнер интерактивно, то есть работать с ним в реальном времени:
$ docker run -it busybox sh
/ # ls
bin   dev   etc   home  proc  root  sys   tmp   usr   var

если в контейнере всё удалить, то при новом запуске контейнер пересоздастся заново. то есть контейнер не сохраняет сосотояние

====================================
# echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list

sudo apt-get install docker.io
sudo apt-get install cgroup-lite
# sudo apt install apparmor

docker --version

sudo service docker start

sudo docker info


--------------

One way to upgrade to the latest version (without installing from source) is to use the instructions here provided by Digital Ocean:

Add docker repository key to apt-key for package verification

sudo sh -c "wget -qO- https://get.docker.io/gpg | apt-key add -"
Add the docker repository to aptitude sources:

sudo sh -c "echo deb http://get.docker.io/ubuntu docker main\ > /etc/apt/sources.list.d/docker.list"
Update the repository with the new addition:

sudo aptitude update
Finally, download and install docker:

sudo aptitude install lxc-docker

====================================
добавим докер-пользователя:
sudo usermod -a -G docker kalinin

-a добавить в группу
-G имя группы
kalinin имя пользователя

то есть после установки докера автоматически создалась группа docker. если наш пользователь(под которым мы вошли в ОС) находится в ней, то не требуется каждый раз использовать sudo

но если группы нет, то в доке советуют так её создать:
$ sudo groupadd docker
$ sudo usermod -aG docker $USER

здесь $USER это имя текущего пользователя системы из переменных среды

====================================
посмотреть какие образы существуют и какие контейнеры запущены:
sudo docker images
sudo docker ps
sudo docker ps -a

====================================
sudo docker run hello-world

сначала этот образ будет искаться на локальной машине.
если не найдётся, то он будет скачан с хаба.
если на хабе нет, то, возможно, стоит залогиниться из консоли чтобы загрузить из частного репозитория.

sudo docker images
покажет, что образ скачался

====================================
в /etc/group есть список всех групп пользователей этой ОС. в том числе и docker, который мы создали выше.
например в группе sudo прописан пользователь, под котрым мы залогинились в ОС.

====================================
докер состоит из клиента и сервера.
клиент это командная оболочка. она при помощи API связана с демоном, который управляет всем, что связано с докером.
клиентов может быть несколько.

====================================
чтобы загрузить образ из репозитория нужно зайти на докерхаб и сделать:
docker pull ubuntu

при этом не обязательно регистрироваться.
но чтобы в будущем закачать свой образ регистрация необходима

====================================
после запуска docker run ubuntu образ запускается и сразу выключается. это свыязано с тем, что образ не связан ни с каким контейнером, который мог бы продолжать работать.

====================================
создадим и запустим свой образ. 

создадим отдельный каталог и в нём Dockerfile.
содержание этого файлы будет выполняться каждый раз при запуске образа:

FROM ubuntu
RUN apt-get -y update && apt-get install -y htop
CMD ["/bin/sh", "-c", "export TERM=xterm && /usr/bin/htop"]

как видите, на основе образа ubuntu мыустанавливаем в системы утилиту htop.
в последней строке запускаем её, указав при этом тип терминала.

билдим образ следующей командой:
docker build -t ubuntu-htop .

в результате docker images выведет в списке новый образ.

его можно запустить docker run ubuntu-htop

но он отработает и сразу выключится.

если не выключился, а нужно выключить, то использовать команду:
docker stop 1ad65a5438fc
при этом id брать из docker ps

====================================
переименовать перед загрузкой на хаб:
docker tag 22f011711fee docktor888/ubuntu-htop:latest

важно, что первая часть имени должна быть как логин на хабе

выгрузка на хаб:
docker push docktor888/ubuntu-htop:latest


====================================
удалить образ:
docker rmi -f 7b275fda0e52
id брать из списка docker images

удалить все контейнеры:
docker rm $(docker ps -a -q)
или так:
docker rm $(docker ps -a -q -f status=exited)

====================================
запустить образ и выполнить команду вывода на экран:
docker run ubuntu /bin/echo 'Hello world'

или запустить образ с CLI в интерактивном режиме:
docker run -t -i ubuntu /bin/bash

выход из интерактивного режима:
exit

можно запустить контейнер в виде демона:
docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"

посмотреть что сейчас делает контейнер:
docker logs modest_einstein

остановить контейнер:
docker stop modest_einstein


==================================== 
существуют 2 типа образов: официальный и пользовательский.
официальный состоит из одного слова, он поддерживается владельцами докера.
пользовательский состоит из двух слов через слэш.

====================================
создавать образы можно двумя способами: командамии докерфайлом:

1. 
запускаем контейнер: docker run -t -i training/sinatra /bin/bash

устанавливаем что нужно: 
root@0b2616b0e5a8:/# apt-get install -y ruby2.0-dev
root@0b2616b0e5a8:/# gem2.0 install json

выходим: exit

коммитим:
docker commit -m "Added json gem" -a "Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2
-m для комментария
-a для автора

теперь образ есть: docker images
его можно даже запустить: docker run -t -i ouruser/sinatra:v2 /bin/bash

2.
создаём в отдельном каталоге файл Dockerfile

пишем в нём инструкцию типа такой:
FROM ubuntu:14.04
MAINTAINER Kate Smith <ksmith@example.com>
RUN apt-get update && apt-get install -y ruby ruby-dev
RUN gem install sinatra

билдим: docker build -t ouruser/sinatra:v2 .
точка в конце говорит о том, что действия производятся в текущем каталоге

если всё прошло хорошо, то опять же контейнер можно запустить:
docker run -t -i ouruser/sinatra:v2 /bin/bash

Docker-образ может иметь только одну команду CMD — она определяет, какой процесс должен быть запущен образом

====================================
можно выгрузить образ в приватный или в общий репозиторий:
docker push ouruser/sinatra

====================================
сеть нужна чтобы несколько контейнеров были изолированы от остальных и работали согласованно.

Сетевой мост(bridge) ограничен хостом на котором запущен Docker Engine. 
Наложенная сеть(overlay) может включать в себя несколько хостов и является более продвинутой.

можно создать свою сеть типа bridge:
docker network create -d bridge my-bridge-network

запустим контейнер с постгрес в отдельной сети:
docker run -d --net=my-bridge-network --name db training/postgres

проинспектируем сеть:
docker network inspect my-bridge-network
или можно проинспектировать контейнер:
docker inspect db

====================================
если контейнеры запущены в одной и той же сети, то они могут пинговаться. иначе - нет.

запустим два контейнера в разных сетях:
docker run -d --net=my-bridge-network --name db training/postgres
docker run -d --name web training/webapp python app.py

зайдём интерактивно во второй контейнер:
docker network connect my-bridge-network web

и попробуем из него пингануть первый:
md@md ~ $ docker exec -it db bash
root@ce5c13db2295:/# ping 172.17.0.1
при этом, вязв ip так: docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' web
в результате увидим, что он не пингуется

тепреь подключим контейнер web к сети my-bridge-network:
docker network connect my-bridge-network web

теперь пингуется!

====================================
важно понимать, что /etc/hosts один на всю сеть. 
при этом когда сеть запускается с определённым имененм, то в /etc/hosts вносятся соответствующие изменения

====================================
Тома данных разработаны для сохранения данных, не зависимо от жизненного цикла контейнера. По этому Docker никогда не удаляет тома при удалении контейнера и не убирает их в мусор если ни один контейнер больше не ссылается на них .

====================================
Docker Compose — инструмент для определения и запуска много-контейнерных приложений.

пример конфиг файла для случая двух связанных контейнеров docker-compose.yml:

version: "2"
services:
  es:
    image: elasticsearch
  web:
    image: prakhar1989/foodtrucks-web
    command: python app.py
    ports:
      - "5000:5000"
    volumes:
      - .:/code


запускать командой: docker-compose up

чтобы остановить нужно просто нажать ctrl + C

существует возможность запустить в фоновом режиме:
docker-compose up -d

при этом смотреть список запущенных процессов так:
docker-compose ps

для остановки фоновых контейнеров и спользовать: 
docker-compose stop

важно понимать, что docker-compose сам создаёт сеть для нескольких согласованно работающих контейнеров

====================================
====================================
можно запустить контейнер в режиме демона и затем интерактивно к нему подключиться чтобы, например, выполнить команду при помощи bash:
docker exec -it 72ca2488b353 bash

====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================