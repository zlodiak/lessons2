предположим, что мы зарегистрированы в системе и имеем соответствующий авторизационный токен в куках. теперь в целях безопасности подпишем форму. это защитит от csrf-атаки

на беке джанго1.8

на фронте ангулар6

=====================
фронт:

шаблон:
<form class="login-form" [formGroup]="formCsrf" (ngSubmit)="submitCsrfForm()">
  <input type="number" formControlName="moneyAccount">
  <button class="btn btn-default" [disabled]="!formCsrf.controls.moneyAccount.value">
      Перевести на мой другой счёт
  </button>
</form>


сервис:
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { Config } from '../config';

@Injectable()
export class TokensService {

  constructor(private httpClient: HttpClient) { }

  transferMoney(moneyAccout, csrfToken): Observable<Object> {
  	const transferObject = {
  		moneyAccout: moneyAccout, 
  		csrfmiddlewaretoken: csrfToken,
  	};
		let headers = new HttpHeaders();
		headers = headers
			.set('Content-Type', 'application/json; charset=utf-8')
			.set('X-XSRF-TOKEN', csrfToken);

    return this.httpClient.post(Config.host + 'users/transfer_money', transferObject, {headers: headers});
  }

}



компонент:
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators} from '@angular/forms';
import { Router } from '@angular/router';

import { UserService } from '../../services/user.service';
import { TokensService } from '../../services/tokens.service';

import { Config } from '../../config';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {

  form: FormGroup;
  formCsrf: FormGroup;
  csrfToken: string;

  constructor(
    private tokensService: TokensService,
    private userService: UserService,
    private router: Router,
  ) { }

  ngOnInit() {
    // this.form = new FormGroup ({
    //   login: new FormControl('')
    // });

    this.formCsrf = new FormGroup ({
      moneyAccount: new FormControl('')
    });

    const xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    xhr.open('GET', Config.host + 'users/display_form', true);
    xhr.onload = function() {
      console.log( 'xhr response code:' + xhr.status + xhr.statusText);
      console.log( 'xhr response status:' + xhr.statusText);
      console.log( 'xhr response responseText:', xhr.responseText);
    }
    xhr.onerror = function() {
      console.log( 'Ошибка ' + this + xhr.status + xhr.statusText + xhr.responseText);
      console.log( 'xhr response code:' + xhr.status + xhr.statusText);
      console.log( 'xhr response status:' + xhr.statusText);
      console.log( 'xhr response responseText:', xhr.responseText);
      console.dir(this);
    }
    xhr.send();    
  }

  submitCsrfForm() {
    const moneyAccount = +this.formCsrf.controls['moneyAccount'].value;
    const csrfToken = this.getCookie('csrftoken');
    console.log('moneyAccount:', moneyAccount);
    console.log('csrfToken:', csrfToken);
    this.tokensService.transferMoney(moneyAccount, csrfToken).subscribe(
      (next) => {
        console.log('transfer is successful');
      },
      (error) => {
        console.log('transfer is failed');
      }
    );
  }

  getCookie(name) {
    var matches = document.cookie.match(new RegExp(
      "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
  }

}



=====================
бек:
from django.conf.urls import url
from . import views

urlpatterns = [
    url(r'^display_form$', views.display_form, name='display_form'),
    url(r'^transfer_money$', views.transfer_money, name='transfer_money'),
]



from django.shortcuts import render
from django.utils import timezone
from django.http import JsonResponse, HttpResponse
from django.core import serializers
from django.middleware.csrf import rotate_token, CsrfViewMiddleware
from django.views.decorators.csrf import csrf_exempt
import json
import datetime
import random


def display_form(request):
	response = HttpResponse('set csrf cookie for form')
	# ещё один способ сгенерировать токен и сразу поместить его в соответствующий заголовок, но уже средствами фреймворка
	# rotate_token(request)  
	response.set_cookie('csrftoken', random.getrandbits(256))
	print(response)
	response['Access-Control-Allow-Origin'] = 'http://localhost:4200'
	response['Access-Control-Allow-Credentials'] = 'true'
	return response	

@csrf_exempt
def transfer_money(request):
	print(); print(); print(); print(); print(); print(); print()
	print('__________________________________________________________________________REQUEST METHOD: ' + request.method)
	print(); print(); print()

	if request.method == 'OPTIONS':
		print('----------------condition block for OPTIONS is activate')
		response = HttpResponse('money transfer preflight')	
		print(); print(); print()
		
		response['Access-Control-Allow-Origin'] = 'http://localhost:4200'		
		response['Access-Control-Allow-Headers'] = 'X-XSRF-TOKEN, Origin, Accept, X-Requested-With, Content-Type'		
		response['Access-Control-Allow-Methods'] = 'POST'		

		return response

	if request.method == 'POST':
		print('----------------condition block for  POST is activate')
		print('recieved form data:')
		for x in request: print(x)
		print(); print(); print()
		
		# if comparison_cookies_procedure():
		# 	print('operation is successful')
		# else:
		# 	print('operation is failed')

		response = HttpResponse('status: operation is __RESULT__')	
		return response


=====================
вывод консоли бека:

[13/Jul/2018 20:36:47]"GET /users/transfer_money HTTP/1.1" 500 62425
[13/Jul/2018 20:36:47]"GET /favicon.ico HTTP/1.1" 404 2150
<django.http.response.HttpResponse object at 0x7f6bd847f2e8>
[13/Jul/2018 20:56:33]"GET /users/display_form HTTP/1.1" 200 24







__________________________________________________________________________REQUEST METHOD: OPTIONS



----------------condition block for OPTIONS is activate



[13/Jul/2018 20:57:52]"OPTIONS /users/transfer_money HTTP/1.1" 200 24







__________________________________________________________________________REQUEST METHOD: POST



----------------condition block for  POST is activate
recieved form data:
b'{"moneyAccout":2,"csrfmiddlewaretoken":"434108467788940202897861100586365722332248894427795922691592091348408048216"}'



[13/Jul/2018 20:57:52]"POST /users/transfer_money HTTP/1.1" 200 31


=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================
=====================