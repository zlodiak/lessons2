задача: использовать стор для хранения значения, которое вводится через инпут и сразу же в инпуте отображается.

есть единственный экшен для перезаписи текста полностью:

	export const addText = createAction(
	  '[simple text] Add text',
	  props<{ text }>()
	);

=====================================
редюсер:

	export const initialState: string = 'empty';

	export const textReducer = createReducer(
	  initialState,
	  on(addText, (state, { text }) => text)
	);

=====================================
селектор состоит из двух частей. в первой получается стейт полностью. 

	const selectState = (state: StateType) => state

createSelector принимает его. второй аргумент возвращает целевую часть стейта:

	export const selectText = createSelector(
	  selectState,
	  (state: StateType) => state.text
	)

=====================================
в компоненте происходит получение значения из стейта двумя способами, а так же отправка значения в стейт при помощи диспатча:

	export class Page1Component implements OnInit {

	  text$ = this.store.pipe(select(selectText));	// первый способ
	  text: string;

	  constructor(private store: Store) { }

	  ngOnInit(): void {

	  	// второй способ
	    this.store
	      .pipe(select(selectText))
	      .subscribe((text: string) => {
	        console.log(text);
	      })
	  }

	  changeText() {
	    this.store.dispatch(addText({ text: this.text }));
	  }

	}

=====================================
вывод в шаблоне:

	<input type="text" placeholder="text" [value]="text$ | async" (change)="changeText()" [(ngModel)]="text">
	value: {{ text }}

=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================
=====================================