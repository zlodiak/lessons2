dumb components content

	глупые компоненты могут принимать кроме значений ещё и разметку типа ng-template. причём с контекстом.

	это даёт возможность расширять функционал расшаренных компонентиков. например, к карточке пользователья можно дополнительно передать кнопки удаления, причём вместе с обработчиками клика по этим кнопкам. в результате после того как пользователь кликнет по кнопке аделения сработает функция, которая находится вне глупого компонента.

	dumb component

		@Component({
		  selector: 'users-list',
		  templateUrl: './users-list.component.html',
		  styleUrls: ['./users-list.component.scss'],
		  changeDetection: ChangeDetectionStrategy.OnPush
		})
		export class UsersListComponent {
		    @Input()
		    public users: User[];

		    @Input()
		    public actionButtons: TemplateRef<unknown>;
		}

		<os-list>
		    <os-list-item *ngFor="let user of users">
		        <user-avatar
		            class="avatar"
		            [user]="user">
		        </user-avatar>

		        <os-text>
		            {{ user.name }}<br />
		            {{ user.age }} years old
		        </os-text>

		        <ng-container *ngIf="actionButtons">
		            <ng-container
		                *ngTemplateOutlet="actionButtons; context: { $implicit: user }">
		            </ng-container>
		        </ng-container>
		    </os-list-item>
		</os-list>

	умный компонент:

		@Component({
		    selector: 'app-actual-users-list',
		    templateUrl: './actual-list.component.html',
		    styleUrls: ['./actual-list.component.scss'],
		    changeDetection: ChangeDetectionStrategy.OnPush
		})
		export class ActualListComponent implements OnInit {
		    public users$: Observable<User[]>;

		    constructor(
		        private readonly usersService: LocalUsersService
		    ) {}

		    public ngOnInit(): void {
		        this.users$ = this.usersService.data$;
		    }

		    public onUserDeleteButtonClick(user: User): void {
		        this.usersService.delete(user);
		    }
		}


		<ng-container *ngIf="(users$ | async) as users">
		    <os-header [size]="4">Actual</os-header>

		    <users-list
		        *ngIf="users?.length; else emptyUsersTemplate"
		        [users]="users"
		        [actionButtons]="actionButtonsTemplate">
		    </users-list>
		</ng-container>

		<ng-template
		    #actionButtonsTemplate
		    let-user>
		    <div class="action-buttons">
		        <os-button
		            (osClick)="onUserDeleteButtonClick(user)">
		            Delete
		        </os-button>
		    </div>
		</ng-template>

		<ng-template #emptyUsersTemplate>
		    <os-text class="text-bold">
		        There is no actual local users.
		    </os-text>
		</ng-template>	

		здесь видно, что мы передаём ##actionButtonsTemplate как входящий параметр users в UsersListComponent. после этого мы можем кликать по кнопке и в результате сработает обработчик onUserDeleteButtonClick, но с user, который вщял в момент клика в UsersListComponent



	тут больше: https://github.com/dreyliky/dumb-and-smart-components-example

===========================================
emit gromGroup from dunb component

	из глупого компонента можно сразу после создания эмититть formGroupю там образом в умном компоненте всегда будет доступна форма, даже после того как её поля были изменены пользователем.

	умный компонентт:

		@Component({
		    selector: 'app-user-creation-window',
		    templateUrl: './creation-window.component.html',
		    styleUrls: ['./creation-window.component.scss'],
		    changeDetection: ChangeDetectionStrategy.OnPush
		})
		export class CreationWindowComponent {
		    public formGroup: FormGroup;

		    constructor(
		        @Inject(DYNAMIC_WINDOW_REF) private readonly windowRef: DynamicWindowRef
		    ) {}

		    public onFormGroupInit(formGroup: FormGroup): void {
		        this.formGroup = formGroup;
		    }

		    public onCreateButtonClick(): void {
		        this.windowRef.close(this.formGroup.value);
		    }
		}

		<user-creation-form
		    (formGroupInit)="onFormGroupInit($event)">
		</user-creation-form>		

	глупый компонент:

		@Component({
		    selector: 'user-creation-form',
		    templateUrl: './user-creation-form.component.html',
		    styleUrls: ['./user-creation-form.component.scss'],
		    changeDetection: ChangeDetectionStrategy.OnPush
		})
		export class UserCreationFormComponent implements OnInit {
		    @Output()
		    public formGroupInit = new EventEmitter<FormGroup>();
		    
		    public readonly formGroup = new FormGroup({
		        name: new FormControl(''),
		        age: new FormControl(18)
		    });

		    public ngOnInit(): void {
		        this.formGroupInit.emit(this.formGroup);
		    }
		}

		<form [formGroup]="formGroup">
		    <os-form-field [isStacked]="true">
		        <os-label>Name</os-label>

		        <os-text-box
		            [placeholder]="'Enter user name'"
		            [formControl]="formGroup.controls.name">
		        </os-text-box>
		    </os-form-field>

		    <os-form-field [isStacked]="true">
		        <os-label>Age</os-label>

		        <os-number-box
		            [placeholder]="'Enter user age'"
		            [isAllowDecimal]="false"
		            [formControl]="formGroup.controls.age">
		        </os-number-box>
		    </os-form-field>
		</form>


	тут больше: https://github.com/dreyliky/dumb-and-smart-components-example

===========================================
вынос обработчик клика из контекста ангуляра

	при включенной onPush мы перепроверяем все переменные контроллера при любом событии. например при click. этот клик повешен через (click) или через @HostListener(). 

	но можно его повесить через:

        fromEvent<PointerEvent>(this.hostRef.nativeElement, 'click')
            .pipe(
                takeUntil(this.viewDestroyed$),
                filter(() => !this.isSelected)
            )
            .subscribe(() => {
                this.isSelected = true;

                this.changeDetector.markForCheck();
            });

    таким образом rxjs запускает обработчик (в данном случае this.isSelected = true;) только когда стрим пропускает isSelected.

    тут больше : https://github.com/dreyliky/event-handlers-optimization-example/blob/master/src/app/pages/example-two/grid-item/grid-item.component.ts

===========================================
добавить реактивное поле без создания формы

	issueIdSearchDescriptionControl = new UntypedFormControl();

    <tui-input
        *ngIf="(remarksCurrentStage$ | async) === 'warranty'"
        tuiTextfieldIconLeft="tuiIconSearchLarge"
        tuiTextfieldSize="m"
        class="search__description"
        [formControl]="issueIdSearchDescriptionControl"
    >
        Поиск по описанию
    </tui-input>



===========================================
сервис-локатор

	это способ создать альтернативный инжектор. выгода этого подхода в том, что классы-наследники не обязаны в своих конструкторах вызывать super() со всеми зависимостями родителя.

	например , есть класс A, от него расширяются три класса: B, C, D. класс а через DI получает компонент спиннера SpinnerComponent. классы наследники при инициализации должны в своих конструкторах вызывать super(SpinnerComponent), хотя при этом не используют SpinnerComponent. такой подход загромождает код.

	с 14 версии ангуляра появилась возможность испорльзовать в любом месте класса-родителя:

		loader = inject(SpinnerComponent)

		после этого наследники будут не обязаны прописывать super(SpinnerComponent) потому что inject() не связан с конструктором.

		здесь inject это глобальный инжектор, не связанные с инжектором фреймворка.

	такой же подход можно реализовать руками:

	   export class ServiceLocator {
	     static injector: Injector;	// global custom injector
	   }	

	затем инициализируем его до старта приложения при помощи APP_INITIALIZER:

	   	export function setupServiceLocator(injector: Injector): void {
	     	ServiceLocator.injector = injector;
	   	}


		export const appConfig: ApplicationConfig = {
		     providers: [
		       {
		         provide: APP_INITIALIZER,
		         useFactory: (injector: Injector) => () => setupServiceLocator(injector),
		         deps: [Injector],	// глобальный инжектор, который импортируется из фреймвока
		         multi: true
		       }
		     ]
		  }


	использовать так:


		export class CustomClass {
		  private logger: LoggerService;

		  constructor() {
		    this.logger = ServiceLocator.injector.get(LoggerService);
		    this.logger.log('CustomClass initialized!');
		  }
		}	



--------

суть сервис-локатора без привязки к фреймворку:

	есть класс-синглтон со статическим методом, который отдаёт глобальный инжектор:

		export class ServiceLocatorComplex {
		  static instance

		  static getInstance() {
		    if (this.instance === undefined) {
		      this.instance = createTarget()
		    }
		    return this.instance
		  }
		}	

	сам инжектор выглядит так:

		export const createTarget = () => {
		  const state = []

		  const add = (str) => {
		  	// перед помещением в state десь происходит создание инстанса и инжжектирование зависимостей второго и выше уровней, если они есть.
		    state.push(str)
		  }
		  
		  return {
		    state,
		    add
		  }
		}	

		по сути это паттерн "наблюдатель"

	теперь есть возможность получать содержание из инжектора:

		const instanceFromComplex = ServiceLocatorComplex.getInstance()
		instanceFromComplex.add('1')
		instanceFromComplex.add('2')
		instanceFromComplex.add('3')
		console.log(instanceFromComplex.state[2])	

	в реальной программе содержание будет представлять из себя проинициализированные инстансы, а не просто строки как в этом примере.

	демо: https://stackblitz.com/edit/js-jyg4au?file=index.js

	в ангуляре подобные инжекторы организованы в дерево. звенья этого дерева связаны через ссылки в форме ещё одного статического свойства. поиск нужного инстанса регулируется декораторами @Self и т.п.




===========================================
VM$

	это паттерн, который позволяет структурировать обращения к различным потокам в шаблоне.

	проблема в том, что если компонент определяет множество потоков, то в шаблоне при помощи asyncPipe мы будет обращаться к этом потокам в разных местах и каждый раз имя перед async будет другое:

		<div class="pseudo-page__header">
		  <h3>Hello {{ currentUser$ | async }} !</h3>
		  <h3>You are logged for {{ (loggedTime$ | async) || 0 }} s</h3>
		</div>
		<div class="pseudo-page__container">
		  <div class="pseudo-page__todo-list">
		    <h2>There is your todo-list</h2>
		    <ul>
		      @for (element of (todoList$ | async); track element.id) {
		        <li>{{ element.title }}</li>
		      }
		    </ul>
		    <div class="pseudo-page__actions">
		      <button class="pseudo-page__button" (click)="prevPage();" [disabled]="((currentPage$ | async)  || 1) <= 1">Prev</button>
		      <div>{{currentPage$ | async}}</div>
		      <button class="pseudo-page__button" (click)="nextPage();" [disabled]="((currentPage$ | async) || 1) >= 10">Next</button>
		    </div>
		  </div>
		</div>

	можно все эти потоки в шаблоне пометить одним именем и обновлять их как только обновится хотя бы один из этих потоков:

	  readonly vm$ = combineLatest([
	    this.loggedTime$,
	    this.currentPage$,
	    this.currentUserService.currentUser$,
	    this.todoList$,
	  ]).pipe(
	    map(([loggedTime, currentPage, currentUser, todoList]) => {
	      return {
	        loggedTime,
	        currentPage,
	        currentUser,
	        todoList
	      }
	    })

		@if (vm$ | async; as vm) {
		  <div class="pseudo-page__header">
		    <h3>Hello {{ vm.currentUser }} !</h3>
		    <h3>You are logged for {{ vm.loggedTime }} s</h3>
		  </div>
		  <div class="pseudo-page__container">
		    <div class="pseudo-page__todo-list">
		      <h2>There is your todo-list</h2>
		      <ul>
		        @for (element of vm.todoList; track element.id) {
		          <li>{{ element.title }}</li>
		        }
		      </ul>
		      <div class="pseudo-page__actions">
		        <button class="pseudo-page__button" (click)="prevPage();" [disabled]="((vm.currentPage)  || 1) <= 1">Prev</button>
		        <div>{{vm.currentPage }}</div>
		        <button class="pseudo-page__button" (click)="nextPage();" [disabled]="((vm.currentPage) || 1) >= 10">Next</button>
		      </div>
		    </div>
		  </div>
		}

	при этом есть возможность через pipe проводить предобработку для каждого кокретного потока:

		  readonly vm$ = combineLatest([
		    // our source is "interval" but we want to display in template nice formated time m:ss
		    this.loggedTime$.pipe(
		      map((time) => {
		        const minutes = Math.floor(time / 60);
		        const seconds = time - minutes * 60;
		        return [minutes, ('0' + seconds).slice(-2)];
		      }),
		      map((time) => time.join(':')),
		      startWith(0)
		    ),
		    this.currentPage$,
		    this.currentUserService.currentUser$,
		    this.todoList$.pipe(startWith([])),
		  ]).pipe(
		    map(([loggedTime, currentPage, currentUser, todoList]) => {
		      return {
		        loggedTime,
		        currentPage,
		        currentUser,
		        todoList,
		      };
		    })
		  );

		<ng-container *ngIf="(vm$ | async) as vm">
		    <!-- Access to your data as vm.SOMETHING -->
		     <div class="pseudo-page__header">
		        <h3>Hello {{ vm.currentUser }} !</h3>
		        <h3>You are logged for {{ vm.loggedTime }} s</h3>
		    </div>
		    ...
		</ng-container>

	последние возможности фреймворка позволяют ввесть в шаблон переменную и тем самым избавиться от условных блоков с as:

		@let vm = (vm$ | async);
		<!-- Access to your data as vm.SOMETHING  -->
		 <div class="pseudo-page__header">
		    <h3>Hello {{ vm.currentUser }} !</h3>
		    <h3>You are logged for {{ vm.loggedTime }} s</h3>
		</div>

	тут больше: 

		https://www.angularspace.com/vm-pattern-in-angular/



===========================================
anticorruption layer

	это вариант паттерна Адаптер. смысл его в том, что приходящий с сервера объект имеет одни названия ключей, но после применения этого паттерна приложение получит тот же объект, но с другими названиями ключей.

	это нужно для того случая когда в приложении есть много потребителей этого объекта и есть вероятность, что на сервере имена ключей поменяются. в этом случая без этого паттерна пришлось бы во многие части приложения вносить правки. но при наличии этого паттерна правки нужно будет сделать только в anticorruption layer

		class Layer() {
			qW: string;
			eR: number;

			constructor({arg1, arg2}) {
				this.qW = arg1.q_w;
				this.eR = ar2.e_r;
			}
		}

	в сервисе:

		return stream$.pipe(
			map(d => new Layer(d))
		)


===========================================
пример спиннера загрузки на основе ngrx signal store

	стор:

		type BooksState = {
		  books: string[];
		  isLoading: boolean;
		};

		const initialState: BooksState = {
		  books: ['qwe', 'asd'],
		  isLoading: false,
		};

		export const BooksStore = signalStore(
		    withState(initialState),
		    withComputed((state) => ({
		        booksCount: computed(() => {
		            return state.books().length
		        })
		    })),
		    withMethods((store) => ({
		      async addBook(title: string) {
		        patchState(store, {isLoading: true});
		        await delay();

		        patchState(store, (oldState) => {
		          return {
		            ...oldState,
		            books: [...oldState.books, title]
		          }
		        })

		        patchState(store, {isLoading: false});
		      },
		    })),
		);

		function delay() {
		  return new Promise((resolve) => {
		    setTimeout(resolve, 2000);
		  })
		}

	компонент:

		export class Page2Component {
		    store = inject(BooksStore);

		    addBook() {
		        this.store.addBook('aaa');
		    }
		}

	шаблон:

		<pre>{{ store.books() | json }}</pre>
		booksCount: {{ store.booksCount() }}

		<button (click)="addBook()">add book</button>

		<div class="spinner" *ngIf="store.isLoading()">
		    <span>is loading...</span>
		</div>


===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================