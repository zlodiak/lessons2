data()

	связывает набор данных(Array, CSV, TSV, JSON, XML etc) с DOM-элементами.

	другими словами, проходит циклом по каждому элементу выборки по помещает в свойство элемента __data__ значение из набора данных.

	передаёт следующему элементу цепочки массив элементов с привязанными к каждому элементу значениями.

         var myData = ["Hello", "qwe", "asd"];
     
         var p = d3.select("body")
                .selectAll("p")
                .data(myData)
                .text(function (d) {
                    return d;
                });	

        тут в d будет итеративно "Hello", "qwe", "asd"

------------

    <p>D3 Tutorials </p>
    <script>
        var myData = [1, 2, 3, 4, 5];
     
         var p = d3.select("body")
                   .selectAll("p")
                   .data(myData)
                   .text(function (d, i) {
                        return d;
                    });
    </script>

    тут будет выведен на экран только один элемент. к нему будет привязано только первое значение из набора данных.

========================
enter()

	функция, которая создаёт недостающие элементы для существующих данных. причём создаёт их в виде плейсхолдеров, которые потом нужно превратить в реальные DOM-элементы при помощи функций типа .append("span")

	    var data = [4, 1, 6, 2, 8, 9];
	    var body = d3.select("body")
	                .selectAll("span")
	                .data(data)
	                .enter()
	                .append("span")
	                .text(function(d) { return d + " "; });	

========================
exit()

	помечает элементы, для которых не хватило данных. затем эти помеченные элементы могут быть удалены при помощи remove()

		<p>D3 Tutorials</p>
	    <p></p>
	    <p></p>
	    
		<script>    
			var myData = ["Hello World!"];

			var p = d3.select("body")
						.selectAll("p")
						.data(myData)
						.text(function (d, i) {
							return d;
						})
						.exit()
						.remove();
	    </script>	

========================
datum()
	
	хардкодит данные в каждый элемент выборки.

	    <p>D3 Tutorials</p>
	    <p>D3 Tutorials</p>
	    <p>D3 Tutorials</p>

	    <script>
		    d3.select("body")
		        .select("p")
		        .datum(100)		// привязывает 100 к каждому p
		        .text(function (d, i) {
		            return d;
		        });
	    </script>	

========================
при получении данных разных форматов есть возможность отлавливать ошибки. для этого первым аргументом нужно прописать error, а вторм - data

	d3.json("/data/users.json", function(error, data) {
	    
	    if (error) {
	        return console.warn(error);
	    }

	    d3.select("body")
	            .selectAll("p")
	            .data(data)
	            .enter()
	            .append("p")
	            .text(function(d) {
	                return d.name + ", " + d.location;
	            });
	    });

если нет цели отловить ошибки, то коллбек будет содержать только один аргумент.

========================
.axisRight() отличается от .axisLeft() только тем на какой стороне будут цифры. сами оси всё равно нужно переносить при помощи transform и разворачивать при помощи .tickSize(-width):

	svg
	  .append('g')
	  .attr('transform', 'translate(' + width + ', 0)')
	  .call(
	    d3
	      .axisRight()
	      .scale(scaleYreverse)
	      .tickSize(-width)
	  )

========================
есть возможность получить набор предопределённых цветов:

	var accent = d3.scaleOrdinal(d3.schemeAccent);
	console.log(accent(0));
	console.log(accent(1));
	console.log(accent(2));
	console.log(accent(3));
	console.log(accent(4));
	console.log(accent(5));
	console.log(accent(6));

справочник цветовых схем здесь:
https://github.com/d3/d3-scale-chromatic/blob/main/README.md#schemeCategory10

если индекс превышает количество элементов, то элементы начинают повторяться:

	var accent = d3.scaleOrdinal(['q', 'ww']);
		console.log(accent(0));		// q
		console.log(accent(1));		// ww
		console.log(accent(2));		// q
		console.log(accent(3));		// ww

scaleOrdinal создаёт ту же самую формулу масштабирования, что и domain_range, но подразумевает, что вместо входящих значений(domain) будет набор инкрементальных чисел.

========================
пример дискретного масштабирования.

	var myData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

	var linearScale = d3.scaleLinear()
		.domain([0, 11])
		.range([0, 600]);

	var ordinalScale = d3.scaleOrdinal()
		.domain(myData)
		.range(['black', '#ccc', '#ccc']);	// значения будут зацикленно повторяться

	d3.select('#wrapper')
		.selectAll('text')
		.data(myData)
		.enter()
		.append('text')
		.attr('x', function(d, i) {
			return linearScale(i);	// тексту выставляем x-координату, прошёдшую через линейную формулу масштабирования
		})
		.text(function(d) {
			return d;		// выводим сам текст
		})
		.style('fill', function(d) {
			return ordinalScale(d);		// закрашиваем текст, но значение берём из дискретной формулы масштабирования.
		});

	console.log(ordinalScale('Jan'));	// black
	console.log(ordinalScale('Feb'));	// #ccc

========================
scaleBand

	это отображение дискретного набора на непрерывный набор.

		var A = d3
		  .scaleBand()
		  .domain(['January', 'February', 'March', 'April', 'May'])
		  .range([10, 50]);

		console.log(A('January'));		// 10
		console.log(A('February'));		// 18
		console.log(A('March'));		// 26
		console.log(A('April'));		// 34
		console.log(A('May'));			// 42


========================
функция pie генерирует набор объектов на основе диапазона значений в итерируемом объекте. каждый из этих объектов содержит значение и, соответсвующие ему, 2 угла.

    var data = [2, 4, 8, 10];
    var pie = d3.pie()
    console.log(pie(data))	// результатом будут 4 объекта

========================
выборка и фильтрация:

	<div id="parent">
	  <div class="child">1</div>
	  <div class="child marked">2</div>
	  <div class="child marked">3</div>
	</div>

	const parent = d3.select('#parent');
	const childs = parent.selectAll('.child');

	console.log(childs.filter(':first-child').size()); // 1 элемент
	console.log(childs.filter('.marked').size()); // 2 элемента
	console.log(childs.filter('.child').size()); // 3 элемента
	console.log(childs.filter((d, i) => i === 0).size()); // 1 элемент с индексом 0

========================
установка, удаление и получение значений у подобных операторов осуществляется подобным способом:

	selection.attr(name[, value]) 

	если value не передано, то получение.
	если null, то удаление.
	если значение, то установка.

========================
tickSizeInner это деления, которые располагаются между началом и концом оси.
tickSizeInner это деления, которые располагаются на крайних точках оси.
tickSize задаёт размеры для tickSizeInner и tickSizeInner.

========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================