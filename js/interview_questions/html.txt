================
HTML
  
  это язык разметки страницы. разметка представляет из себя систему вложенных тегов. теги могут быть парные и одиночные. HTML в отлияие от DOM может содержать ошибки разметки, например, незакрытий парный тег. 

  XHTML более строгий язык разметки, он не прощает некоторые неточности. такие как:

    1. незакрытые теги
    2. регистр имён атрибутов
    3. логические атрибуты в полной форме (selected="selected")

  смысл HTML в том чтобы расположить текст, картники, ссылки, видео и почие элементы в определённой последолвательности, которую потом сделает красивой CSS.

  HTML  принципе может обойтись без CSS и JS, при этом он имеет примитивные возможности стилизации, такие как color, width, center (атрибуты).

  <!DOCTYPE html>
  <html lang="ru">
     <head>
        <meta charset="UTF-8">
        <title>HTML Document</title>
     </head>
     <body>
         123
     </body>
  </html>

  DOCTYPE

    указывает какой набор правил следует использовать для интерпретации тегов.

  HEAD

    блок, в котором содержатся неотображаемые элементы(стили, скрипты, метаинформация), а так же заголовок окна баузера

  BODY

    блок, в котором содержатся отображаемые элементы (теги). он тоже может содержать неотображаемые элементы, но лучше не использовать эту возможность.

  Если тип документа не объявлен или объявлен некорректно, браузер всегда работает в режиме quirks.

================
DOM

  это объектная модель документа, которую браузер создает в памяти компьютера на основании тегов HTML-кода. то есть это представление тегов в виде объектов. при этом DOM исправляет некторые допустимые в HTML ошибки, такие как:

    1. незакрытые теги
    2. отсутствие коревого тега html
    3. отсутствие thead/tbody у таблиц

  DOM создаётся дл ятого чтобы была возможность изменять HTML средствами JS. например:

    document.body.style.background = 'red';
    document.body.addEventListener('click', () => console.log(123));

  при изменении DOM страница перерисовывается.

================
как встраивать скрипты?

  скрипты можно встраивать двумя способами:

    1. написав js-код между тегами script
    2. в теге script указать ссылку на внешний файл. в этом случае скрипт будет кешироваться и выглядеть более структурированным и переиспользуемым.

  при этом теги script могут находиться в секции head и body. иногда скрипты располагают в конце блока body для того чтобы их загрузка не тормозила отрисовку контента. но в современном HTML есть атрибуты defer и async, которые позволяют избежать прописывание скриптов в блоке body.

================
TAG

  это именованная метка, которая содержит некоторый контент.большая часть тегом имеют открывающий и закрывающий элемент, но встречаются одиночные теги(br, hr, img). кроме того некоторым тегом разрешено иметь закрывающий(p, li), их действие длится до следующего блочного тега.

  возможности тегов расширяются атрибутами. с помощью атрибутов можно задать ширину, размер текста, тип шрифта, путь перехода.

  в html5 появились новые семантические теги: main, section, article, nav, aside, footer, header, time, hgroup.

================
браузеры

  состоят из браузерного движка(парсит и отрисовывает html), js-движка(парсит и исполняет js), пользовательского интерфейса (то, что видит пользователь + адресная строка), хранилища данных(оперативная память, LS, SS, indexDB, cookies), сетевого модуля(взаимодействие с сервером).

  firefox использует браузерный движок geckoб, js-движок SpiderMonkey.
  chrome использует браузерный движок blink, js-движок V8.
  safari использует браузерный движок webkit, js-движок JavaScriptCore.

================
doctype   

  объясняет браузеру, в какой версии языка разметки он сверстан. то есть по каким правилам парсить html-теги.

  до HTML5 существовало несколько версий HTML, а также более строгий вариант разметки XHTML, который не прощал некоторые виды ошибок(незакрытые теги, регистр атрибутов)

  если doctype не указан или указан неправильно, то браузер перейдёт в режим quirks, то есть будет отображать разметку в режиме обратной совместимости с древними браущерами.

  раньше браузеры отображали контент не по единосму стандарту поэтому невозможно было ввести сразу единый стандарт(многие сайты поползли бы). поэтому было решено разработчикам самим выбирать doctype. со временем везде начал использоваться строгий стандарт:

    <! DOCTYPE html>

================
span и div

  div - блочный элемент. он занимает всю строку по ширине, следовательно каждый div отображается под предыдущим элементом. высота элемента зависит от его содержимого

    <div>, <p>, <ul>, <ol>, <h1>

  вертикальные margins для блочных элементов схопываются. 

  span - строчный элемент. не занимает 100% ширины, поэтому spanы можно расположить по горизонтали. если ширины родителя не хватает, то лишний текст строчного элемента переносится на следующую строку. высота элемента тоже зависит от его содержимого. 

    <a>, <span>, <strong>, <em>, <img>

================
поток документа

  это правила взаимодействия соседних элементов на странице. если css отключен, то блоки выстраиваются очевидным образом на основе того строчные они или блочные. 

  при помощи некоторых правил css можно элемент извлечь из потока. при этом он перестаёт взаимодействовать с соседними элементами и создаёт внутри себя новый поток.

  float отключает взаимодействие с соседними блочными эд=лементами, но соседние строчные элементы продолжают взаимодействовать.

  position: absolute отключает взаимодействие с соседними строчными и блочными элементами.

================
атрибуты

  бывают глобальные (можно добавить к любому тегу: id, class, title, style, hidden). 

  бывают специфические (можно добавить только к определённым тегам: href, bgcolor, cellpadding, width)

================
атрибуты data-*

  дают возможность использовать пользовательские атрибуты, например, data-myid. получить к значениям этих атьрибутов можно из js:

    // <div class="block" data-qwerty="123">block</div>
    const el = document.querySelector('.block');
    console.log(el.dataset);  // { qwerty: '123' }

  значения могут быть только строками.

  можно наоборот создать атрибут средствами js:

  //
  el.dataset.newattr = '666';

  важно в js использовать только camelCase а в html kebab-case.

  можно удалить втрибут:

    delete element.dataset.testid

  data-* отличается от id тем, что не должен быть уникальным в пределах страницы.


================
шаблонизаторы

  позволяют не писать повторяющуюся разметку несколько раз, а создать кусок разметки и при помощи пользовательского тега использовать его на разных страницах. например, footer, header.

  также шаблонизаторы позволяют подставлять значения в разметку (привязка значений).

  шаблонизаторы делятся на:

    1. те которые точечно вставляют в html свои динамические блоки (smarty, jinja2, django-встроенный-шаблонизатор, angular-встроенный-шаблонизатор)
    2. те которые при помощи своего синтаксиса описывают и html, и динамические блоки (PUG, HAML)

================
какими шаблонизаторами пользовались?

  HAML в ruby on Rails,
  jinja2 в django

================
как оформлять страницу для разных языков?

  нужно использовать глобальный атрибут lang, обычно его ставят в тег html. после этого специфические символы (например, кавычки) будут соответствовать указанному языку.

  Кроме того, атрибут lang позволяет браузеру понять, отличается ли язык страницы от языка вашей системы. Если да, то браузер предложит пользователю использовать онлайн-переводчик.

================
какие спецификации существуют?

  W3C

    организация, которая разрабатывает стандарты для веба. в частности она выпускает спецификации для:

      css
      html,
      xhtml,
      dom,
      xml,
      http,
      url,
      svg

  W3C и WHATWG  

  W3C изначально разрабатывала спецификацию для html, но она не успевала за новыми возможностями, которые появлялись в современных браузерах. поэтому была создана группа WHATWG, которая ориентировалась на фактические возможности браузеров. 

    WHATWG не использует номер версии потому что находится в постоянной разработке.

  WHATWG

    занимается разраблоткой стандартов DOM и HTML

  Рекомендации, применяемые W3C, открыты для общего пользования и не защищены авторским патентом. Они могут использоваться любой компанией, даже не имеющей связи с Консорциумом.     

================
W3C валидация
  
  это процесс проверки страницы на соответствие стандарту. дело в том, что поисковые системы уделяют внимание насколько хорошо страница соответствует стандартам. поэтому после завершения работы над страницей её полезно проверить валидатором.

  проверять можно 

    html: https://validator.w3.org/
    css: https://jigsaw.w3.org/css-validator/

  валидаторы существуют в виде онлайн-сервисов, которые имеют поле для воода url. после анализа выводится список ошибок и некритичных предупреждений.

  если ошибок нет или мало, то растёт вероятность единообразного отображения страницы во всех браузерах и отсутствия проблем с адаптивностью на мобильных устройтсвах.
  такеж это даёт некоторую гарантию, что в будущих версиях браузеров вёрстка не сломается.  