1. Что такое Control value accessor?

Control value accessor позволяет связать компонент с полем реактивной формы и наладить двустороннюю связь между ними. для этого компонент должен иметь набор определённых методов. 

При помощи метода writeValue() происходит передача данных из поля реактивной формы в компонент. А при помощи метода onChanged() происходит передача данных из компонента в поле реактивной формы.

-----------
2. Как добавить валидатор в control value accessor?

Для этого компонент control value accessor должен рализовывать интерфейс NG_VALIDATORS. После этого при любом изменении значения поля будет срабатывать метод validate(). 

Этот метод будет возвращать в поле реактивной формы null в случае успешной валидации или объект с описанием ошибки в случае провальной валидации.

демо здесь: https://stackblitz.com/edit/angular-ivy-dddpa8?file=src%2Fapp%2Fhello.component.ts

-----------
3. Как добавить кастомный валидатор template-driven форме?

Для этого нужно написать директиву и добавить имя этой директивы в тег поля формы как артибут. Например так: <input directiveName />

Сама директива должна реализовывать интерфейс NG_VALIDATORS и иметь метод validate(), который будет возвращать null в случае успешной валидации и объект с описанием ошибки в случае провальной валидации.

демо здесь: https://stackblitz.com/edit/angular-ivy-rwa6wh?file=src%2Fapp%2Fposition-validator.directive.ts

-----------
4. Как действует trackBy в цикле?

trackBy это дополнительная возможность цикла *ngFor. Проблема в том, что если цикл выводит в шаблон 5 элементов и один из них по ходу программы изменяется, то без использования trackBy будут перерисованы все 5 элементов. 

Но при использовании trackBy будет перерисован только один элемент, это положительно скажется на производительности потому что чем меньше браузер делает перерисовок тем меньше тормозит приложение. 

-----------
5. Чем отличаются хуки ngAfterContentInit и ngAfterViewInit?

ngAfterContentInit срабатывает после того как отрисуются все компоненты, вставленные в шаблон другого компонента при помощи проекций ng-content.

ngAfterViewInit срабатывает после того как отрисуются все компоненты, вставленные в шаблон другого компонента при помощи хост-тегов.

-----------
6. Как отписаться от потока?

1) создать переменную типа ISubscription, присвоить ей поток, в хуке ngOnDestroy или в блоке next прописать .unsubscribe()
2) создать s = Subject, в pipe прописать takeUntil(s)), в хуке ngOnDestroy использовать this.s.next()
3) в шаблоне использовать async pipe
4) использовать стороннюю библиотеку с методом untilDestroy()
5) использовать first()
6) использовать take(1)
7) использовать single()

-----------
7. В чём отличие методов отписки от потока: first(), take(1), single()?

take(1) не выбрасывает исключение, если не пришло ни одного значения. а first() и single() выбрасывают.

single() выбрасывает исключение, если пришло более 1 значения. при этом можно передать аргумент, который будет фильтровать приходящие из потока значения.

-----------
8. Как связананы ngZone и changeDetection?

ngZone позволяет повесить обработчики на асинхронные участки кода. В angular все асинхронные события пропатчены при помощи этой библиотеки. Таким образом когда происходит асинхронное событие(клик мышки, изменение положения курсора, разрешение промиса и т.д.) срабатывает обработчик, который запускает changeDetection.

в результате пользователь после любого действия видит перерисованный экран.

-----------
9. Как отключить ngZone и какую пользу или вред это принесёт?

Нужно в конфиге коренвого модуля прописать .bootstrapModule(AppModule, { ngZone: 'noop' }). После этого changeDetection отключится. В результате производительность приложения улучшится.

Но теперь для того чтобы перерисовать экран нужно каждый раз вручную запускать changeDetection. Например, при помощи методов tick() и detectChanges().

-----------
10. Что такое zoneJS?

Это библиотека, которая позволяет добавлять обработчики на группу асинхронных событий.

Например, чтобы измерить скорость срабатывания нескольких синхронных операций достаточно замерить время перед началом первой операции и после окончания последней. Но если одна из этих операция будет асинхронная, то этот способ не сработает.

zoneJS помещает все эти операции в особый контекст и конечное время будет замеряться когда выполнятся и синхронные, и асинхронные операции.

-----------
11. Что такое ngTemplateOutlet?

Это слот для многократной вставки шаблона, заключённого в теги ng-template. Для этого шаблон должен быть помечен шаблонной переменной, например так: <ng-template #variable>я-ш-а-б-л-о-н</ng-template>.

Затем эта переменная связывается со слотом. Например так: <ng-container *ngTemplateOutlet="variable"></ng-container>. В результате, шаблон становится видимым и помещается в определённое место на экране.
