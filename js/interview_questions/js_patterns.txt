декоратор это функция, которая добавляет функциональности другой функции, не изменяя её

	let f1 = function() {
		console.log('i am f1');
	}

	let f2 = function(f) {
		return function f3() {
		  	console.log('extra action 1');
		    f();
		    console.log('extra action 2');
	  	}
	}

	f1 = f2(f1);
	f1();


-----
пример декоратора, который в TS добавляет новое свойство в прототип класса:

	function deco(target) {
	  Object.defineProperty(target.prototype, 'lastName', {
	    value: 'lastname',
	  });
	}

	@deco
	class Person {
	  firstName;

	  constructor(firstName, lastName) {
	    this.firstName = firstName;
	  }
	}

	const person = new Person('firstname', 'll');

	console.log(person.firstName);
	console.log(person.lastName);


===================================
наблюдатель это паттерн, который позволяет объектам-подписчикам получать рассылки от объекта-издателя. 

объект-издатель имеет массив для хранения подписавшихся, метод рассылающий в цикле сообщения подписчикам. а также метод, который осуществляет подписку. и необязательный метод, который уничтожает подписку.

	function Publisher(){
	  this.subscribers = [];
	  this.subscribe = function(onPublish){
	    this.subscribers.push(onPublish);
	  };
	  this.publish = function(news){
	  this.subscribers.forEach(function(subscriber){
	    subscriber.action(news);
	  });
	};
	}

	const freedom = new Publisher();
	const union = new Publisher();

	const sasha = {
	  action: function(news){
	    console.log('OMG! Did you hear that ' + news);
	  }
	};

	const masha = {
	  action: function(news){
	    console.log('My opinions about ' + news);
	  }
	};


	freedom.subscribe(sasha);
	freedom.subscribe(masha);
	union.subscribe(masha);

	freedom.publish('The winter is coming!');
	union.publish("It's snowball time!");

===================================
стратегия это паттерн, который приимает различные способы выполнения действия.

	class Script {
	  strategy;
	  constructor(strategy = null) {
	    this.strategy = strategy;
	  }
	  start() {
	    setInterval(() => {
	      this.strategy.action(Math.random());
	    }, 2000);
	  }
	}

	class ConsoleLog {
	  action(value) {
	    console.log(value);
	  }
	}

	class AlertLog {
	  action(value) {
	    alert(value);
	  }
	}

	const consoleLog = new ConsoleLog();
	const alertLog = new AlertLog();
	const script = new Script(consoleLog);
	script.start();


	// фактически стратегия делает то же чот и наблюдатель. только получение подписка происходит в конструкторе один раз при создании объекта. стратегии тоже должны реализовывать определённый интерфейс

--------------
пример на js-функциях:

	var Greeter = function (strategy) {
	  this.strategy = strategy;
	};

	Greeter.prototype.greet = function () {
	  return this.strategy();
	};

	var politeGreetingStrategy = () => console.log('Hello.');
	var friendlyGreetingStrategy = () => console.log('Hey!');

	var politeGreeter = new Greeter(politeGreetingStrategy);
	var friendlyGreeter = new Greeter(friendlyGreetingStrategy);

	politeGreeter.greet(); //=> Hello.
	friendlyGreeter.greet(); //=> Hey!


===================================
итератор. это механизм, который перебирает элементы коллекции, а когда они закончились посылает сигнал отстановки. 

каждый итерируемый объект имеет ссылку на итератор, полученную через наследование. важно, что у каждого итерируемого объекта эта ссылка ведёт на уникальный итератор. потому что если один объект перебирается несколькими циклами одновременно, то порядковые номера возвращаемых значений не должны сбиваться.

	class IterObj {
	  constructor(word) {
	    this.word = word;
	  }

	  iter() { return new Iterator(this.word); }
	}


	class Iterator {
	  constructor(word) {
	    this.word = word;
	    this.index = 0;
	  }

	  next() {
	    try {
	      let letter = this.word[this.index];
	      this.index += 1;
	      return letter;
	    } catch (err) {
	      throw "StopIteration";
	    }
	  }

	  iter() { return this; }
	}

	const iterObj = new IterObj('sergey');
	it = iterObj.iter();

	console.log(it.next());
	console.log(it.next());
	console.log(it.next());
	console.log(it.next());
	console.log(it.next());
	console.log(it.next());

===================================
синглтон это порождающий паттерн, который гарантирует, что в программе существует только один экземпляр класса с глобальной точкой доступа.

его можно реализовать в виде модуля(важно помнить, что модуль при импорте сначала выполняется, а затем предоставляет то, что экспортировано из него):

	class DB {
		url: number;
		private static: Database;

		constructor() {
			if (Database.instance) {
				return Database.instance;
			}

			this.url = Math.random();
			Database.instance = this;
		}
	}

можно реализовать в виде объектного литерала:

	const Singleton = {
	   foo: 123,
	   getInstance() { return this }
	};
	let obj1 = Singleton.getInstance();
	let obj2 = Singleton.getInstance();

=========================================================
SIP pattern

	это паттерн, который связывает глупый компонент и умный компонент. вся логика и вычисления содержатся в умном компоненте, но его желательно разгрузить при помощи сервиса.

	в умном компоненте объявлены subjects для каждого глупого компонента. из глупого компонента-формы всплывают значения и сразу отправляются в subjects умного компонента при помощи next(). в OnInit() отрабатывают операции, которые заполняюи сабжекты глупого компонента-таблицы, через шаблон они сразу же отправляются внутрь глупого компоннета. при этом оправляются не в виде потоков, а в виде обычных данных, что достигается использование asyncPipe.

	тут живой пример: 

		https://sip-principle-a3fjro.stackblitz.io

=========================================================
способ менять флаг loading

  this.loading$ = query$.pipe(
    mapTo(true),
    merge(results$.pipe(mapTo(false)))
  );	

  здесь query это сформированный запрос(поле, в котором пользователь изменил символ), а results это результат, который этот сформированный запрос возвращает(неопределённость или результат).

=========================================================
паттерн отлова ошибки отвалившегося интернет-соединения

	const results$ = searchTerm$.pipe(
	    switchMap(term => 
	        fetchData(term).pipe(
	            retryWhen(() => fromEvent(window, 'online'))
	            // still keep the observable alive if
	            // the server would return a different
	            // HTTP error
	            catchError(e => of(e))
	        )
	    )
	)

	запрос сработает ещё раз после восстановления интернет-соединения. здесь:

		window.addEventListener("online", (event) => {
		  console.log("You are now connected to the network.");
		});	

===================================
angular sandbox facade
	
	это сервис, который содержит ссылки на ресурсы разнообразных сервисов. этот сервис инжектится в умный компонент, внося порядок потому что умному компоненту не приходится самостоятельно дёргать ресурсы из разных мест.

	это даёт удобство при рефакторинге. например, если потребуется заменить стейт с обычных сабжектов на ngrx, то не придётся вызовы стейта менять во многих местах, достаточно будет заменить вызов только в фасаде потому что компоненты просто делегируют действия фасаду. содержит некоторое количество логики(заполняет стейт, делегирует события из компонентов в апи-сервисы).

	также в фасаде одна функция может запускать набор связанных функций. например, при создании нового пользователя сразу делать запись в лог.

	можно создать фасад для модуля или для каждой составляющей модуля.

	тут больше: https://blog.simplified.courses/smart-components-ui-components-and-sandbox-facades-in-angular/ 

===================================
angular adapter

	API не всегда отдаёт данные приложению в том формате, который требуется. проводить преобразование формата в компонентах плохая практика потому что компонент должен быть максимально простым. поэтому между компонентом и апи-сервисом создают слой адаптера, который занимается только преобразованием формата данных.

	иногда адаптер можно реализовать не в виде промежуточного сервиса, а в виде отдельнолежащего около модели сервиса, который используется для как обёртка в основном сервисе: 

		import adapter;

		get() {
			return x = adapter(y);
		}

--------------------
пример адаптера с промежуточным сервисом. 

	суть в том, что шаблон ожидает массив имён, а апи возвращает объект с именами и их id. сервис-адаптер UserService производит преобразование:

		export class UserApi {
		  getUsers(): User[] {
		    return [
		      { id: 1, name: 'User 1' },
		      { id: 2, name: 'User 2' },
		      { id: 3, name: 'User 3' }
		    ];
		  }
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class UserService {
		  constructor(private userApi: UserApi) {}

		  getUsers(): string[] {
		    return this.userApi.getUsers().map(user => user.name);
		  }
		}

		@Component({
		  selector: 'app-user-list',
		  template: '<ul><li *ngFor="let user of users">{{ user }}</li></ul>'
		})
		export class UserListComponent {
		  users: string[];

		  constructor(private userService: UserService) {
		    this.users = this.userService.getUsers();
		  }
		}	

===================================
angualar proxy object

	этот паттерн похож на адаптер тем, что между целевым сервисом и компонентом ставится промежуточный сервис. но отличается от адаптера тем, что промежуточный сервис не преобразовывает данные а или отдаёт их или не отдаёт.

	примером этого паттерна может быть класс CanActivate. или, например, proxy при получении списка пользователей может проверять если ли этот список в локалсторадже и отдавать один из этих вариантов по некоторому условию:

		export class UserApi {
		  getUsers(): User[] {
		    return [
		      { id: 1, name: 'User 1' },
		      { id: 2, name: 'User 2' },
		      { id: 3, name: 'User 3' }
		    ];
		  }
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class UserService {
		  constructor(private userApi: UserApi) {}

		  getUsers(): User[] {
		    console.log('Fetching users...');
		    return this.userApi.getUsers();
		  }
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class UserServiceProxy {
		  constructor(private userService: UserService) {}

		  getUsers(): User[] {
		    console.log('Checking cache...');
		    let users = localStorage.getItem('users');
		    if (!users) {
		      console.log('Cache miss, fetching users...');
		      users = this.userService.getUsers();
		      localStorage.setItem('users', JSON.stringify(users));
		    } else {
		      console.log('Cache hit, returning users...');
		      users = JSON.parse(users);
		    }
		    return users;
		  }
		}

		@Component({
		  selector: 'app-user-list',
		  template: '<ul><li *ngFor="let user of users">{{ user.name }}</li></ul>'
		})
		export class UserListComponent {
		  users: User[];

		  constructor(private userServiceProxy: UserServiceProxy) {
		    this.users = this.userServiceProxy.getUsers();
		  }
		}

===================================
angular shareReplay(1)

	может использоваться в качестве кеша:

		@Injectable()
		export class RecordsFacade {

		  private records$: Observable<Record[]>;

		  constructor(private recordApi: RecordApi) {
		    this.records$ = this.recordApi
		        .getRecords()
		        .pipe(shareReplay(1)); // каждому новому подписчику отдаёт последнее значение
		  }

		  getRecords() {
		    return this.records$;
		  }
		}	

------------------
	пример того же самого, но вне контекста ангуляра:

		const routeEnd = new Subject<string>();
		const lastUrl = routeEnd.pipe(shareReplay(1));

		const initialSubscriber = lastUrl.subscribe((x) => {
		  console.log('init:', x);
		});

		routeEnd.next('my-path');

		const lateSubscriber = lastUrl.subscribe((x) => {
		  console.log('late:', x);
		});	

		// console output
		// init:my-path
		// late:my-path

===================================
BehaviorSubject

	может использоваться как стейт, но для этого нужно отдавать его как observable чтобы невозможно было менять стейт из разных мест приложения.

		@Injectable()
		export class SettingsState {

		  private updating$ = new BehaviorSubject<boolean>(false);

		  isUpdating$() {
		    return this.updating$.asObservable();
		  }

		  setUpdating(isUpdating: boolean) {
		    this.updating$.next(isUpdating);
		  }
		}	

===================================
вариант архитектуры:

	(state, API) -> (facade) -> (module1, module2, etc...)

	стейт может быть на основе ngrx или subjects.

	фасад только предоставляет доступ к core-слою и содержит обработчики события, которые были делегированы из умных компонентов. таким образом если изменится реализация стейта или апи, то не придётся менять обращения во множестве модулей и компонентов.

		export class MyComponent{
			users$ = this.facade.users$;
			foo$ = this.facade.foo$;
			bar$ = this.facade.bar$;
			
			constructor(private facade: ...){
			}
			
			addUser(user: User): void{
				this.facade.addUser(user);
			}
			removeUser(userId: string): void{
				this.facade.removeUser(userId)
			}
		}	

	умные компоненты в модулях только получают данные и делегируют действия в слой фасада. глупые компоннеты просто отображают данные.

	описаннуяю выше структуру можно масштабировать горизонтально. то есть каждая отделная фича будет содержать свой набор перечисленных выше слоёв.

	важно, что данные текут только сверху вних, а события поднимаются только снизу вверх.

	больше тут: https://dev-academy.com/angular-architecture-best-practices/

===================================
angular guard 

	может возвращать значения в сокращённом виде:

		class UserAuthorizedGuard implements CanActivate {
		  constructor(private authService: AuthService) {}

		  canActivate(): Observable<boolean> {
		    return this.authService.getUserData().pipe(
		      catchError((error) => {
		        console.error('User not authorized!', error);

		        return observableOf(false);
		      }),
		      map(Boolean), // we could technically omit this mapping to Boolean since User model will be a truthy value anyway
		    )
		  }
		}	

	вместо избыточного:

		class UserAuthorizedGuard implements CanActivate {
		  constructor(private authService: AuthService) {}

		  canActivate(): Observable<boolean> {
		    const authStatus$ = new Subject();

		    this.authService.getUserData().subscribe((user: User) => {
		      authStatus$.next(true);
		      authStatus$.complete();
		    }, (error) => {
		      console.error('User not authorized!', error);

		      authStatus$.next(false);
		      authStatus$.complete();
		    })

		    return authStatus$;
		  }
		}	

===================================
angular single observable pattern

	problem hell:

		<ng-container *ngIf="frameworkName1$ | async as frameworkName1">
		  <ng-container *ngIf="frameworkName2$ | async as frameworkName2">
		    <ng-container *ngIf="frameworkName3$ | async as frameworkName3">
		      {{ frameworkName1 }} is way better than {{ frameworkName2 }}. I will not even talk about {{ frameworkName3 }}.
		    </ng-container>
		  </ng-container>
		</ng-container>	

	decision:

		@Component(...)
		export class MyComponent {
		  private readonly frameworkName1$ = ...;
		  private readonly frameworkName2$ = ...;
		  private readonly frameworkName3$ = ...;

		  public readonly frameworkNames$ = combineLatest([
		    frameworkName1$,
		    frameworkName2$,
		    frameworkName3$,
		  ]).pipe(map(([
		    frameworkName1,
		    frameworkName2,
		    frameworkName3,
		  ]) => {
		    return {
		      frameworkName1,
		      frameworkName2,
		      frameworkName3,
		    }
		  }))
		}	

		<ng-container *ngIf="frameworkNames$ | async as frameworkNames">
		  {{ frameworkNames.frameworkName1 }} is way better than {{ frameworkNames.frameworkName2 }}. I will not even talk about {{ frameworkNames.frameworkName3 }}.
		</ng-container>

===================================
angular observer 

	может быть реализован через subject в сервисе. потом можно этот сервис инжектить в несколько компонентов и подписаться. таким образом сабжект сервиса будет рассылать уведомления разным компонентам-подписчикам.

===================================
angular bridge

	есть возможность собирать компонент не только из набора сервисов, но и из набора встроенных в шаблон компонентов. причём их набор определяется динамически.

	допустим, есть несколько однообразных виджетов, каждый из которых имеет заголовок, кнопку обновления и контентную часть. меняется только контентная часть:

		<div class="header">
		  <h1>Widget</h1>
		  <button mat-stroked-button (click)="onRefresh()">Refresh</button>
		</div>
		<mat-divider></mat-divider>
		<section>
		  <ng-content></ng-content>
		</section>	

	создаём в отдельном файле токен:

		export const WIDGET = new InjectionToken<Widget>('Widget');

	и используем его в @ContentChild(). таким образом контент любого виджета будет помечен этим токеном:

		export class WidgetWrapperComponent implements OnInit {
		  @ContentChild(WIDGET as any, { static: true })
		  widget: Widget;

		  ngOnInit() {
		    this.widget.load();
		  }

		  onRefresh() {
		    this.widget.refresh();
		  }
		}

	таким образом, каждый новый виджет будет обращаться к своему апи, но будет работать единообразно с остальными подобными виджетами:

		@Component({
		  selector: 'app-velocity-widget',
		  templateUrl: './velocity-widget.component.html',
		  styleUrls: ['./velocity-widget.component.scss'],
		  providers: [
		    {
		      provide: WIDGET,
		      useExisting: VelocityWidgetComponent,
		    },
		  ],
		})
		export class VelocityWidgetComponent implements Widget {
		  isRefreshing = false;

		  load() {
		    console.log('Load data from JIRA API... ');
		  }
		  refresh() {
		    this.isRefreshing = true;
		    setTimeout(() => {
		      this.isRefreshing = false;
		    }, 2500);
		  }
		}	

	тут больше:

		https://github.com/DMezhenskyi/angular-cdk-lessons/blob/master/src/app/patterns-example/widgets/velocity-widget/velocity-widget.component.ts

		https://www.youtube.com/watch?v=2rQOu9TmuxE&list=PLX7eV3JL9sfk0tbUkZwGCD1Y-kJ05NvOR&index=2&ab_channel=DecodedFrontend

===================================
пример мемоизации в сервисе анлудара:

	@Injectable({
	    providedIn: 'root'
	})
	export class CachedHttpClient
	{
	    cachedItems : any[] = [];

	    constructor(private http : HttpClient) { 

	    }

	    getCached<T>(url : string) : Observable<T> {
	        if(this.cachedItems[url])
	        {
	            return of(this.cachedItems[url] as T);
	        }

	        return this.http.get<T>(url).pipe(map((item : T) => {
	            this.cachedItems[url] = item;
	            return item;
	        }));
	    }
	}

===================================
MVP

	это паттерн, который разделяет отображение, обработчики и бизнес-логику. под бизнес-логикой здесь понимается набор данных и методы для изменения их.

	контроллер это просто класс, внутри которого происходит генерирование разметки средствами JS. там при помощи getElementById находится корневой элемент в HTML и в него вставляется вся разметка, которая была сгенерирована. там же происходит привязка слушателей события к элементам сгенерированной ранее разметки.

	контроллер это просто класс. он создаётся через new и импортируется в представление при помощи композиции(используя конструктор представления). это даёт возможность при срабатывании события в представлении запустить соответствующий метод в контроллере, возможно, с передачей в него данных.

	контроллер не должен содержать логики, но может содержать небольшую часть логики в виде валидации и т.д. главный его смыл отправка сигнала, полученного из представления в модель. для этого контролллер импортирует инстанс модели.

	когда данные попадают в модель происходит измененеие массиваданных (как вариант отправляется запрос на бекенд). затем модель при помощи return возвращает результат в контроллер, а контроллер таким же способом возвращает результат в представление. в представлении же срабатывает вспомогательный метод, который меняет DOM средставми JS.

	это первый вариант MVC, в котором: 

		1. представление пинает контроллер, 
		2. контроллер пинает модель, 
		3. модель отвечает контроллеру, 
		4. контроллер отвечает представлению.

	но существует вариант этого паттерна, в котором в представление импортируется модель. в результате:

		1. представление пинает контроллер
		2. контроллер пинает модель
		3. модель пинает представление, отправляя в него данные-результат

	тут примеры кода: https://github.com/utimur/mvc/tree/master/mvc-front

	тут соответствующий видео туториал: https://www.youtube.com/watch?v=X85soC5evw0&list=PL6DxKON1uLOFP5_VPhy6BCE7DA0jdzWO5&index=2&ab_channel=UlbiTV

===================================
MVC / MVP / MVVM

	MVC выглядит как треугольник: после того как пользователь провзаимодействовал с VIEW(UI) запускается метод (возможно, с данными) в CONTROLLER. в этом методе происходит обращение к MODEL, в результате MODEL меняет данные в БД. затем MODEL уведомляет VIEW, минуя CONTROLLER.

	MVP выглядит похоже, но MODEL полсе того ка изменит данные в БД уведомляет не VIEW, а CONTROLLER, а тот в свою очередь уведомляет VIEW. то есть CONTROLLER тут называется PRESENTER, но выполняет похожую функцию посредника между VIEW и MODEL.

	MVVM похож на MVP, но связи VIEW-CONTROLLER и CONTROLLER-MODEL реактивные. по сути они выглядят как двойная привязка. таким образом компоненты моментально узнают об изменении соседнего компонента без инициализирующего действия. в частности в angular при измененеии переменной в CONTROLLER сразу происходит обновление VIEW. а при изменении данных в MODEL(например, сервис выполнил http-запрос) сразу срабатывает rxjs-подписка в CONTROLER.


===================================
builder

	паттерн используется когда необходимо создать объект в несколько этапов. в частности когда при инициализации передаётся много параметров.

	имеем 2 класса вместо одного. первый класс это чертёж целевого объекта:

		class Drink {
		  constructor(settings) {
		    const { base, milk, sugar, cream } = settings;

		    this.base = base;
		    this.milk = milk;
		    this.sugar = sugar;
		    this.cream = cream;
		  }
		}

	а второй класс это фабрика, которая формирует сложный параметр инициализации и создаёт целевой объект:

		class DrinkBuilder {
		  settings = {
		    base: 'espresso',
		  };

		  addMilk = () => {
		    this.settings.milk = true;
		    return this;
		  };

		  addSugar = () => {
		    this.settings.sugar = true;
		    return this;
		  };

		  addCream = () => {
		    this.settings.cream = true;
		    return this;
		  };

		  build = () => new Drink(this.settings);
		}

	использование:

		const drink1 = new DrinkBuilder().addMilk().build();

		const drink2 = new DrinkBuilder();
		// some code
		drink2.addSugar();
		// some code
		drink2.addCream();
		// some code
		drink2.addMilk();
		const drink2_ = drink2.build();

		console.log(drink1);
		console.log(drink2_);

	пример кода тут: https://stackblitz.com/edit/js-qwohkv?file=index.js

===================================
singleton

	это паттерн, который позволяет создать только один объект, а при попытке создать новый возвращает ранее созданный. таким образом всегда существует не более одного объекта.

		var Singleton = (function () {
		  var instance;

		  function createInstance() {
		    var object = new Object('I am the instance');
		    return object;
		  }

		  return {
		    getInstance: function () {
		      if (!instance) {
		        instance = createInstance();
		      }
		      return instance;
		    },
		  };
		})();

		function run() {
		  var instance1 = Singleton.getInstance();
		  var instance2 = Singleton.getInstance();

		  console.log('Same instance? ' + (instance1 === instance2));
		}

		run();


	также можно создать синглтон на основе клсаа, но в этом случае необходимо ввести соглашение, по которому инстансы не будут создаваться через конструктор. то есть у синглтона будет определённая точка входа в виде метода instance(). 

	или, если есть возможность, сделать конструктор приватным:

		class Sun {
		  private static instance = null;

		  private constructor() {}

		  static getInstance() {
		    if (!Sun.instance) {
		      Sun.instance = new Sun();
		    }
		    return Sun.instance;
		  }

		  shine() {
		    console.log('shine method');
		  }

		  mass = 9999;
		}

		// let something = new Sun(); // Ошибка: конструктор 'Sun' является приватным.

		let instance = Sun.getInstance(); // сделать что-нибудь с экземпляром...

		console.log(instance);
		console.log(instance.mass);
		instance.shine();

	демо: https://stackblitz.com/edit/typescript-vvkhwv?file=index.ts

	нужно помнить, что синглтон это аналог глобальной переменной, что является антипаттерном потому что увеличивает зацепление(coupling -  степень взаимозависимости между программными модулями) кода.

	ещё одна вредная сторона синглтона это сложность тестирования. потому что он доступен из любой точки программы, изолировать отдельные куски программы сложно.


===================================
command

	это паттерн, который оборачивает действие в объект команды, таким образом получается экшен, который содержит полезную нагрузку в виде методов и данных. затем этот экшен отдаётся потребителю, который:

		1. выполняет его
		2. в зависимости от результата меняет своё состояние
		3. логирует экшен в стек

	таким образом потребитель всегда имеет возможность ходить по истории команд, разгружая стек и соответсвенно откатывая состояние.

	вот пример калькулятора с возможностью отмены операций:

		const add = (x, y) => x + y;
		const sub = (x, y) => x - y;
		const mul = (x, y) => x * y;
		const div = (x, y) => x / y;

		const AddAction = (value) => new Command(add, sub, value);
		const SubAction = (value) => new Command(sub, add, value);
		const MulAction = (value) => new Command(mul, div, value);
		const DivAction = (value) => new Command(div, mul, value);

		class Command {
		  constructor(execute, undo, value) {
		    this.execute = execute;
		    this.undo = undo;
		    this.value = value;
		  }
		}

		class Calculator {
		  current = 0;
		  commands = [];

		  execute(command) {
		    this.current = command.execute(this.current, command.value);
		    this.commands.push(command);
		  }

		  undo() {
		    const command = this.commands.pop();
		    this.current = command.undo(this.current, command.value);
		  }

		  getCurrentValue() {
		    return this.current;
		  }
		}

		const calculator = new Calculator();

		calculator.execute(AddAction(100));
		calculator.execute(SubAction(24));
		calculator.execute(MulAction(6));
		calculator.execute(DivAction(2));

		calculator.undo();
		calculator.undo();

		console.log(calculator.getCurrentValue()); // 76

	демо здесь: https://stackblitz.com/edit/js-slw7z6?file=index.js


===================================
iterator

	это объект, который принимает итерируемый объект и имеет методы для его перебора. также он имеет индекс, который увеличивается по мере перебора. когда индекс превышает количество элементов, то выбрасывается сигнал завершения.

		class Iterator {
		  constructor(items) {
		    this.index = 0;
		    this.items = items;
		  }

		  first() {
		    this.reset();
		    return this.next();
		  }

		  next() {
		    return this.items[this.index++];
		  }

		  hasNext() {
		    return this.index <= this.items.length;
		  }

		  reset() {
		    this.index = 0;
		  }
		}

		const items = ['one', 2, 'circle', true, 'Applepie'];
		const iter = new Iterator(items);

		for (let item = iter.first(); iter.hasNext(); item = iter.next()) {
		  console.log(item);
		}	

	вариант без использования класса:

		function makeIterator(array) {
		  let nextIndex = 0;

		  return {
		    next: function () {
		      if (nextIndex < array.length) {
		        const result = { value: array[nextIndex], done: false };
		        nextIndex++;
		        return result;
		      } else {
		        return { done: true };
		      }
		    },
		  };
		}

		let iterator = makeIterator(['Hello', 'world']);

		console.log(iterator.next().value);
		console.log(iterator.next().value);
		console.log(iterator.next().done);

	чтобы в js объект был итерируемым необходимо чтобы он или его прототип имел свойство [Symbol.iterator]. это свойство ссылается на вариант итератора, описанный выше. 

	в цикле for происходит неявное обращение к методу next().


===================================
template method

	метод, который последовательно вызывает составные части алгоритма, при этом эти части работают по-разному в зависимости от инстанса.

	например, есть класс сотрудника, в котором есть метод templateMethod полного жизненного цикла сотрудника (hire/pay/fire). инстансы этого класса будут иметь отличные метод полного жизненного цикла templateMethod потому что в инстансах часть методов hire/pay/fire будет переопределена, но сам метод полного жизненного цикла templateMethod не будет переопределён.

		class Employee {
		    constructor(name, salary) {
		        this._name = name;
		        this._salary = salary;
		    }
		    templateMethod() {
		        this.hiring();
		        this.work();
		        this.getPaid();
		        if (this.needSack()) {
		            this.sacking();
		        }
		    }
		    hiring() {
		        console.log(`Hiring ${this._name}`);
		    }
		    work() {
		        console.log(`${this._name} handles ${this.responsibilities() /* gap to be filled by subclass */}`);
		    }
		    getPaid() {
		        throw new  Error(`Не описан метод getPaid() в классе ${this.constructor.name}`)
		    }
		    needSack() { 
		        return false;
		    }
		    sacking() { 
		        console.log(`Sacking ${this._name}`);
		    }
		}

		class Developer extends Employee {
		    constructor(name, salary) {
		        super(name, salary);
		    }
		    getPaid() {
		        console.log(`${this._name} got paid ${this._salary}. It's more then Tester.`);
		    }
		    needSack() { 
		        return true;
		    }
		    responsibilities() {
		        return 'application development';
		    }
		}

		class Tester extends Employee {
		    constructor(name, salary) {
		        super(name, salary);
		    }
		    needSack() { 
		        let suckQuestion = confirm(`Уволить сотрудника ${this._name}?`);
		        return suckQuestion;
		    }
		    getPaid() {
		        console.log(`${this._name} got paid ${this._salary}. It's less then Developer.`);
		    }
		    responsibilities() {
		        return 'testing';
		    }
		}

		const dev = new Developer('Nathan', 100000);
		dev.templateMethod();

		const tester = new Tester('Brian', 90000);
		tester.templateMethod();	

===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================