

===================================
какой приоритет у селекторов?

	style=“”
	#id
	[attr=value]
	.class
	LI
	*


Селектор						Вес

#block section > .list a		1.1.2
div#some						1.0.1
#some							1.0.0
* .list a						0.1.1
.class							0.1.0
section h1						0.0.2
section							0.0.1

===================================
какие значения есть у background-size?

auto:
картинка фона не меняет своего размера

cover:
картинка фона занимает всю ширину блока

contain:
картинка фона занимает всю высоту блока

===================================
что такое БЭМ?

это методика работы со стилями, позволяющая отказаться от копипаста.

блок это независимый кусок разметки, который может быть повторно использован. его название описывает блок, а не внешний вид.

элемент это составная часть блока, которая не может использоваться вне его. название отделяется от имени блока подчеркиваниями.

модификатор определяет внешний вид блока или модификатора. отделяется подчёркиванием.

===================================
что такое flex-shrink и flex-grow?

flex-shrink это количество размеров, на которое сократится ширина блока когда в родительсквом блоке не станет свободного места.
flex-grow это количество размеров, на котрое увеличится ширина блока когда в родительском блоке появится свободное место.







===================================
===================================
===================================


================
какие есть селекторы

	селектор по:

		1. тегу
		2. классу
		3. по идентификатору
		4. по атрибуту
		5. Селектор потомка (через пробел)
		6. универсальный селектор *
		7. комбинированные (через запятую)

================
приоритет (специфичность) селекторов

	Если одному и тому же элементу подходит сразу несколько CSS-правил с разными селекторами, то браузер применяет те стили, вес селектора которых больше.

		.qwe {
		  color: red;
		}

		#asd {
		  color: green;
		}

		<h1 class="qwe" id="asd">Home page</h1>

		в данном случае текст будет окрашен зелёным цветом.

	* не имеет специфичности

	самый специфичный селектор по id. 
	затем по атрибуту
	затем по классу
	затем по тегу

		.qwe {
		  color: red;
		}

		[title='zxc'] {
		  color: magenta;
		}

		<h1 class="qwe" title="zxc">Home page</h1>

	но любой селектор, прописанный в style преебивает их.

	а !important имеет наивысший приоритет(даже над style)

	способ формализации веса состапвного селектора можно реализовать через составное число типа:

		id.class-attr.tag

	в результате получится такое:

		1.0.2

	после удаления точек число можно сравнивать.

		то есть если несколько составных селекторов применяются к одному элементу, то узнать правила какого из этих двух селекторов будут применены к элементу можно при помощи правила трёх чисел.

================
комбинаторы селекторов

	селекторые можно записывать последовательно через определённые символы. 

		через запятую значит, что несколько селекторов будут использовать одно правило.

		через пробел значит, что перечисленные селекторы вложены в контексте html.

		слитно без пробела(через точку) означает, что все перечисленные селекторы должны быть одновременно у элемента.

		череЗ знак > означает, что правило будет применяться к подходящим потомкам на первом уровне вложенности.

		череЗ знак + означает, что правило будет применяться к прилипающему соседу

		череЗ знак ~ означает, что правило будет применяться к прилипающим соседям

================
псевдоэлементы

	это элементы, которых нет в разметке, но которые созданы средствами css.

	::before, ::after

		добавляют контент до или после элемента

	::first-letter

		применяет стили к первой букве текста элемента

	::first-line

		применяет стили к первой строке блочного элемента

	::selection 

		применяет стили к выделенному мышкой тексту

	::placeholder

		стилизация подсказки в инпуте

Псевдоклассы 
	
	это селекторы, которые определяют состояние уже существующих элементов

	:hover

		применяет стили когда пользователь наводит курсор на элемент

	:focus

		применяет стили когда элемент получает фокус

	:link 

		используется для оформления ссылок, которые пользователь ещё никогда не открывал

	:visited 

		используется для оформления ссылок, по которым пользователь прошёл

	:first-child

		применяет стили к первому дочернему элементу внутри блока ul

			li:first-child {
			    border: 2px solid orange;
			}		

	:empty 

		— это селектор CSS, который соответствует элементам, не имеющим дочерних элементов, включая текстовые узлы и другие элементы



	Если не указать тег, класс или id, к которому применяется псевдокласс, то свойство будет применено к любому возможному элементу, который способен иметь этот псевдокласс:			

================
Псевдоклассы группы :nth-child

	При помощи этих псевдоклассов можно удобно выбирать элементы по их порядковому номеру внутри родительского элемента.

	аргументом может быть число, представляющее из себя порядковый номер. нумерация ведётся с 1

	аргументом может быть odd/even, тогда будут выбираться нечётные/чётные элементы

	аргументом может быть выражение и тогда можно, например, выбрать каждый третий элемент:

		:nth-child(3n)

		Вместо n будет подставляться 0, затем 1, 2 и так далее.

	пример:

		<ul class="list">
		  <li class="list-item">Фиолетовый</li>
		  <li class="list-item">Лаймовый</li>
		</ul>

		// У второго пункта списка будет зелёный фон
		.list-item:nth-child(2) {
		  background-color: #41E847;
		}



================
как браузер читает селекторы

	справа налево. потому что браузер после построения DOM и подгрузки стилей пытается пройтись по каждому элементу и применить к нему стиль.

	а пользователь когда пишется css имеет противоположную задачу. то есть ему нужно написать селектор и для него найти элемент. поэтому пользователь пишет селектор слева направо. то есть программист сразу указывает класс и при этом, по возможности, не указывает родительские классы.

================
display

	block:
	занимает всё доступное пространство по ширине. можно установить высоту/ширину

	inline:
	не занимает всё доступное пространство по ширине. нельзя установить высоту/ширину. неуместившаяся по ширине часть переносится на следующюю строку.

	inline-block:
	не занимает всё доступное пространство по ширине. можно установить высоту/ширину. неуместившаяся по ширине часть НЕ переносится на следующюю строку, а вместо этого блок по высоте становится монолитным. при этом неумещающийся текст может выходить за пределы контейнера.

	flex:
	занимает всё доступное пространство по ширине. внутреннее содержимое выкладывает согласно флекс-модели

	inline flex:
	не занимает всё доступное пространство по ширине. внутреннее содержимое выкладывает согласно флекс-модели

	none:
	убирает элемент из документа

	table - дочерние элементы располагаются как ячейки таблицы, но для этого их нужно пометить display: table-row, display: table-cell: 


================
единицы измерения

	абсолютные и относительные.

	px - пиксель
	% - процент от родителя (иногда от разных величин родителя, margin-right процент берёт от ширины родителя)
	em - это 100% от размера шрифта текущего элемента или родителя:

		  .child {
		    font-size: 16px;
		    margin: 1em;	// 16px
		  }	

		причём если шрифт указат в em, то добавляется дополнительный множитель.:

		  .child {
		    font-size: 2em;	// 16px * 2 = 32px
		    margin: 3em;	// 32px * 3 = 96px
		  }		

	rem - это 100% от размера шрифта в корневом элементе (html)
	vh/vw - высота/ширина вьюпорта (видимой части документа). 1vh = 1%
	vmin/vmax - меньшая/большая сторона вьюпорта. 1vmin = 1% (vmin если высота меньше ширины, то расчёт будет вестись относительно высоты)
	deg - угол(для градиентов). 1deg = 1 градус

		.selector {
		  transform: rotateY(3deg);
		}

	ms/s - ед. измерения времени. лдя animation/transition

================
visibility: hidden 

	скрывает содержимое тега, но оставляет элемент в обычном потоке страницы таким образом, что он по-прежнему занимает место. другими словами, элемент становится невидимым.

display: none 

	полностью удаляет элемент из документа. Он не занимает места, хотя всё ещё находится в исходном HTML-коде.

тут больше: https://html-css.blog/css/displaynone-i-visibilityhidden/

в обоих случаях элменты остаются в DOM

================
position

	static

		блок ведёт себя как обычный блок. left/top/right/bottom не действуют

	relative 

		блок ведёт себя как обычный блок. left/top/right/bottom действуют относительно первоначального положения. если положение блока смещено при помощи left/top/right/bottom, то соседний блок не занимает освободившееся пространство.

	absolute

		схлопывается высота/ширина, если нет внутреннего содержимого в виде текста или блока. left/top/right/bottom действуют относительно родителя с position: relative/absolute

		важная особенность в том, что если не заданы позиционирование left/top/right/bottom и при этом в родителе имеется текстовое содержание на одном уровне с абсолютно позиционированным элементом, то абсолютно позиционированный элемент на находится в левом верхнем углу родитльского. то есть текст выталкивает текст

		    <div class="out">
		      out
		      <div class="in">
		        <div class="deep"></div>
		      </div>
		    </div>

			.out {
			  background: red;
			  position: relative;
			  width: 600px;
			  height: 600px;
			}

			.in {
			  background: lime;
			  position: absolute;
			}

			.deep {
			  background: orange;
			  width: 100px;
			  height: 100px;
			}

		https://stackblitz.com/edit/stackblitz-starters-nd13us?file=styles.css

	fixed

		схлопывается высота/ширина. left/top/right/bottom действуют относительно видимого окна браузера(вьюпорта). например, удобно добавлять ссылку "вверх"

	sticky

		блок ведёт себя как обычный блок. но при прокрутке скролла прилипает к верхней/нижней части родителя

			div.sticky {
			  position: sticky;
			  top: 0;
			}

		существует липкий блок и липкий родитель. для липого блока указывается left/right/top/bottom. как только он достигает указанного крайнего положения, то извлекается из потока и получает значение и прилипает, но он никогда не покинет пределы липкого родителя. родителю не нужно прописывать никаких правил

		важно, что прилипать липкий элемент может не только вверх/вниз, но и влево/вправо

================
transform

	перемещает (translate), 
	поворачивает (rotate), 
	масштабирует (scale),
	деформирует (skew),
	элемент. при этом соседние элементы в потоке не затрагиваются потому что перед началом преобразования элемент выносится в отдельный слой.

	кроме того существует опция matrix, которая объединяет несколько трансформаций.

	 если данный блок заденет другой, то он не повлияет на его позицию, а просто будет отображаться поверх или под ним.

	transform-origin позволяет сместить центр поворота, относительно которого происходит изменение положения/размера/формы элемента.

	Все преобразования, определяемые свойством transform и transform-origin, относятся к положению и размерам опорного блока элемента. Опорный блок элемента это виртуальный прямоугольник вокруг элемента, который формирует систему координат для отрисовки.

	есть возможность записать несколько трансформаций в одну строку: 

		transform: scale(1.2) translate(30px, 30px) rotate(20deg);

================
z-index

	позиционирует элементы по оси Z. он действует только если у элемента position отличается от static.

	если использовать позиционирование, то любые позиционированные элементы на веб-странице могут накладываться друг на друга, имитируя третье измерение.

	если элементы вложены, то z-index не действует.

	значением может быть как положительное таки отрицательное число или auto(порядок элементов в этом случае строится автоматически, исходя из их положения в коде HTML ).

	если числа равны у двух элементов или z-index не задан, то наложится тот элемент, который в html описан последним.

================
схлопывание margins

	действует только для вертикальных margins. для inline-блоков не действует.

	суть в том, что если у соседних блоков уустановлены margins, то расстояние между ними будет равно не сумме margins, а наибольшему из margins. это правиль касается вложенных элементов тоже. 

================
препроцессор

	это надстройка над css, которая по команде переводит синтаксис препроцессора в синтаксис css. при этом позволяет использовать вложенность, наследование, миксины и прочие вспомогательные возможности.

	кроме того препроцессоры позволяют разбивать код на файлы и потом сливать их в один файл.

	существуют 3 наиболее популярных пропроцессора:

		less
		sass (sass + scss)
		stylus

================
постпроцессор

	это скрипт, который получает на вход чистый css улучшает его и возвращает чистый css.

	улучшается css при помощи подключенных плагинов, которые выполняются последовательно. например есть плагины для:

		добавления префиксов специфичных для браузеров (moz, ms, webkit),
		сокращение селекторов (background-color -> background),
		автосброса встроенных стилей,
		изменения названий в стиле БЭМ

================
что такое & в scss

	когда элемент имеет два класса и необходимо к нему применить правило, учитывающее обязательное наличие обоих классов, то пишется вложенная конструкция, в котрой используется знак &

		.class1 {
			&.class2 {
				color: red;
			}
		}

	также можно использовать & для добавления псевдокласса

		.block {
		    &:hover {
		        background-color: magenta;
		    }
		}	

	вообще символ & означает ссылку на родительский селектор.

================
миксины

	это конструкции которые позволяют избавиться от дублирования css-кода. сначала пишется кусок кода, который будет переиспользоваться:

		@mixin reset {
		  margin: 0;
		  padding: 0;
		}	

	затем ссылка на него вставляется многокрано в целевые места при помощи include:

		ul {
		  @include reset;
		}	

	важно, что миксины можно вкладывать друг в друга:

		@mixin horizontal-menu {
		  @include reset;
		  @include flex-between;
		}	

		.horizontal-menu {
		    @include horizontal-menu;
		}		

	часто миксины используются для добавления вендорных префиксов:

		@mixin box-shadow-prefix {
		  -webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
		  -moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
		  box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
		}	

================
как бороться с переполнением контентом?

	использовать свойство overflow для НЕ-inline-блоков:

		hidden - лишнее обрезается
		auto - когда нужно добавляется скролл(вертикальный или горизонтальный)
		scroll - скролл будет всегда (даже если блок не переполнен)
		clip - определяет насколько далеко за пределами контейнера контент будет обрезан:

		  overflow: clip;	// required
		  overflow-clip-margin: 70px;		

	если контент представляет собой текст, то можно использовать text-overflow:

		ellipsis - обрезает единственную строку, добавляя многоточие в конец:
			#app {
				width: 100vw;
				height: 100px;
				text-overflow: ellipsis;
				white-space: nowrap;	// required
				overflow: hidden;		// required
			}	

		clip - просто обрезает строку.

	принудительно переносить слова: 

		word-wrap: break-word 		

	использовать пагинацию,
	использовать бесконечный подвал

================
css-правило

	это инструкция, которая применяется к соответствующему селектору. правиль может быть несколько, внутри блока не соблюдается порядок этих правил.

================
css-спрайт

	это несколько картинок, объединённые в одну. выводится часть картинки через background. какую именно часть показывать указывается при помощи:

		background-position: 0 -32px;

	Спрайты позволяют:

		Сократить количество обращений к серверу.
		Загрузить несколько изображений сразу, включая те, которые понадобятся в будущем и таким образом избежать задержки при отрисовке новой иконки (например при ховере)

================
box-sizing 
	
	позволяет менять способ расчёта размеров блока. в блочной модели ширина не включает величины paddings, borders, margins.

	box-sizing: content-box

		свойство действует по умолчанию. в этом случае ширина не включает ни paddings, ни borders, ни margins

	box-sizing: border-box

		ширина включает paddings и borders.

================
вендорные префиксы

	это приставки перед правилами, которые позволяют использовать фичи, которые реализованы ещё не во всех браузерах:

	moz,
	webkit,
	o,
	ms.

	важно располагать их так чтобы последним было правило без префикса потому что последняя запись имеет приоритет.

	обычно префиксы добавляются при помощи плагина Автопрефиксер.

	рабочая группа csswg разрабатывает черновики фич на основе потребностей пользователей. затем разработчики браузеров ориентируются на эти черновики, каждый браузер может немного по-другому реализовывать фичу. префиксы позволяют учитывать эти различия. со временем W3C прееводит эти чернокики в стандарт и потребность в префиксах отпадает.

================
адаптивная вёрстка

	это набор макетов, которые выбираются в зависимости от размера экрана устройства пользователя. каждый макет оптимизирован то есть максимально быстро отрисовывается и может скрывать часть функционала. 

	до адаптивной вёрстки существовала респонсив вёрстка, которая тоже подстраивалась под размеры экрана и перестраивала блоки, но использовала только один тяжёлый макет. в современном мире больше половины устройств - мобильные поэтому тяжёлые макеты будут отрисовываться медленнее. используются медаи-запросы.

	посмотреть как страница выглядит на различных устройствах можно через инструменты разработчика chrome. 

	для уменьшения резкости перехода между макетами можно использовать css-анимацию.

	использовать относительные единицы измерения: vh, %, em и т.д.

================
резиновая вёрстка

	это макет, которые использует относительные единицы измерения и поэтому ширина и размеры элементов подстраиваются под ширину экрана.

================
flex

	это ещё один способ располагать элементы по правилам, отличающимся от правил стандартного css.

	существует:

		флекс-контейнер,
		флекс-элементы.

	флекс-контейнер создаёт новый контекст. элементы в нём могут располагаться по двум осям. по умолчанию действует горизонтальная ось. ось можно развернуть.

	по умолчанию флекс-контейнер ведёт себя как блочный элемент по отношению к соседним блокам в потоке.

		display: flex;

	но можно сделать так чтобы он вёл себя как строчный элемент:

		display: inline-flex;

	по умолчанию флекс-элементы не переносятся на новую строку:

		flex-wrap: nowrap;

	но это можно исправить:

		flex-wrap: wrap;

	justify-content - выравнивает флекс-элементы по основной оси.

	align-items - выравнивает флекс-элементы по поперечной оси.

	flex-grow - 

		свойство указывает, может ли вырастать флекс-элемент при наличии возможность ужать соседей.

		с другой стороны это коэффициент растяжения в зависимости от оставшегося свободного пространства.

	flex-shrink - 

		указывает в какой пропорции может сжаться флекс-элемент, если соседи будут давить.

	flex-basis - 

		это ширина флекс-элемента вдоль гавной оси. уменьшаться она может, но увеличиваться не может.

		аналог свойства width. ширина блока определяется его содержимым, этому соответствует flex-basis: auto. но есть возможность ширину сделать не зависящей от содержимого, для этого нужно использовать конкретное значение, например, 200px.

	flex-direction - 

		задаёт основную ось, по которой будут располагаться элементы. по умолчанию это горизонтальная ось. её можно развернуть.

	трёхколоночный макет, в котром крайние сайдобары имеют фиксированную ширину:

		.left {
			flex-basis: 200px;
			flex-shrink: 0;
		}

		.center {
			flex-grow: 1;
			flex-shrink: 1;
			flex-basis: 0;
		}

		.right {
			flex-basis: 200px;
			flex-shrink: 0;
		}	

================
что такое grid?

	это подход, позволяющий создавать новый контекст размещения элементов, который похож на табличную вёрстку. при этом каждая ячейка имеет имя:

		grid-template-areas:
			"header header header"
			"content content 👾"
			"content content ."
			"footer footer footer";	

	направляющие задаются при помощи комбинации абсолютных и относительных значений:

		grid-template-columns: 1fr 200px 1fr;
		grid-template-rows: repeat(4, 150px);

	как и в случае в флексами для гридов существуют понятия: грид-контейнер и грид-элементы. выравнивание элементов в пределах ячеек задаётся в контейнере, но если нужно конкретные элементы выравнивать по-другому, то нужно задать выравнивание в этом конкретном элементе.

	есть возможность размещать элемент так чтобы он занимал несколько ячеек.

		grid-column: span 2;
		или
		grid-row: span 2;

	величину отступов между колонками и рядами тоже можно зададть:

		column-gap: 10px;
		row-gap: 50px;	

================
grid fr 
	
	это новая относительная единица измерения, дословно она называется "дробная часть". в контексте grid-контейнера она размечает свободное пространство. например, следующий код создаёт 3 колонки равной ширины:

		grid-template-columns: 1fr 1fr 1fr 1fr;

	если сюда добавить отступы при помощи gap, то скролл не появится.

		grid-template-columns: 25% 25% 25% 25%;

	а если сюда добавить те же самые отступы, то скролл появится.

grid-template-columns, 
grid-template-rows

	это свойства, которые задают количество колонок и количество столбцов. характеристики можно просто перечислять, использую относительные и абсолютные единицы:

		grid-template-columns: 40px auto 40%;

	также есть возможность давать алиасы:

		grid-template-columns: [start] 140px [line2] 250px [line3] 40px [end];

	есть возможность использовать функцию repeat:

		grid-template-columns: repeat(3, 1fr);

================
CSS framework 

	это коллекция стилей CSS, подготовленных и готовых к использованию.

	они: 

		обеспецивают кроссбраузерность,
		ускоряют написание кода,

	самый популярный фреймворк это bootstrap. он предлагает:

		отзывчивые макеты,
		наборы компонентов типа цветных панелей, таблиц, красивых кнопочек.
		динамические компоненты типа модальных окон, выпадающих меню.
		позволяет собирать бандл из выборочных компонентов.

	некоторые из них реализованы как модули к js-фреймворкам: primeNG, angular-material.

	Materialize CSS тоже популярен.

================
bootstrap

	способы подключения:

		cdn,
		npm,
		скачать бандлы js и css

================
методологии

	это способ поддерживать единообразие в css-коде большого проекта, в котором работает не один разработчик. если каждый начнёт бессистемно менять код, то скоро наступит хаос.

	Блок-Элемент-Модификатор

		позволяет создавать переиспользуемые стили при помощи системы наименования. Стиль именования модификаторов в БЭМ: block__element_modifier.

			<div class="block">
			    <div class="block__elem1"></div>
			</div>	

		если имя блока, элемента или модификаторы состоит из нескольких слов, то они отделяются знаком "-"		

		Б:

			Функционально независимый компонент страницы, который может быть повторно использован. например, футер, хэдер.

			Блоки можно использовать в любом месте на странице, поэтому в CSS-коде для блоков не должно быть никаких внешних отступов и правил позиционирования.

			можно блок вкладывать в блок

		Э:

			Составная часть блока, которая не может использоваться в отрыве от него.

			элемент можно вкладывать в элемент, но каждый из этих вложенных элементов юудет иметь один и тот же префикс в виде названия блока. блок может содержать несколько элементов и на одном уровне тоже.

		М:

			Cущность, определяющая внешний вид, состояние или поведение блока либо элемента


	Atomic CSS

		суть его в том чтобы любое повторно использующееся правило(например, margin-left: 1px) нужно выносить в отдельные класс.

		проблема в том, что имена классов не несут семантической нагрузки.

	
	SMACSS

		в основе этой методолгогии лежит правило разбиения стилей по категориями:

			base,
			layout,
			module,
			state,
			theme

		соответственно создаётся дерево папок и файлов.

			base,

				хранятся наиболее общие стили, не используются класса и id, а используются только имена тегов. например 

					button {
						background: blue;
						padding: 10px;
					}

			layout,

				хранятся стили, которые относятся к макету: футер, хэдер, навигация и т.д.
				они уникальны поэтому допустимо использовать id. также можно исполь-овать префикс l.

			module,

				хранятся стили для автономных кусков разметки, котрые могут использоваться многократно и не зависят от контекста. классы пишутся через двойную черту: 

					.card--label

			state,

				стили, описывающие состояние блока, например, раскрыт-закрыт. используется префикс is-opened

			theme		

				стили, которые дополняют base-стили. стили темы можно быстро заменить на стили другой темы, в то время как base-стили остаются всегда постоянными.

================
способы анимации в CSS

	transitions

		используется, когда нам нужно плавно изменить CSS-свойства между двумя состояниями элемента.

		Смена свойств происходит при наступлении определенного события

		добавление в набор правил селектора свойства transition, котое имеет значением, например, background и набор параметров типа длительности и плавности

			transition-property — указывает список свойств, которые будут анимироваться; свойства

			transition-duration — задаёт значение продолжительности анимации

			transition-timing-function — мы можем ускорить анимацию в начале и замедлить в конце, либо наоборот.

			transition-delay — задаёт задержку времени до начала анимации

			transition — это общее свойство, которое позволяет перечислить первые четыре свойства в порядке: property, duration, timing-function, delay.

      div {
        width: 100px;
        height: 100px;
        background: red;
        transition: width 2s;
      }

      div:hover {
        width: 300px;
      }      

      в блоке :hover можно указывать transform для лучшей производительности.			

	keyframes

		в отдельном участке кода прописываются шаги анимации и этому участку задаётся уникальное имя:

			@keyframes circle-to-square {
			  from {
			    background-color: #F498AD;
			  }
			  50% {
			    background-color: #7F6EDB;
			  }
			  to {
			    background-color: #2E9AFF;
			  }
			}	

		затем это имя используется для определённого селектора:	

			.child-one {
				animation-name: circle-to-square;
			}			

		кроме имени существуют дополнительные параметры:

			длительность,
			задержка,
			кол-во повторений,
			признак обратного порядка,
			различные варианты плавности

	js-анимация

		просто средствами js получить доступ к элементам и добавлять свойства или стили.

	svg-анимация

		css

			добавить svg-тегам класс и использовать transitions, например, при :hover. 

			В целом логика работы CSS-анимаций в контексте SVG принципиально не отличается от HTML

		smil

			предполанает использование специфических тегов:

		        <animate
		                 attributeType='XML'
		                 attributeName='stroke-dasharray'
		                 from='0 1698'
		                 to='1698 0'
		                 dur='3s'
		                 repeatCount='indefinite'
		                 />

================
как реализовать анимацию без перерисовки?

	использовать transform, он фиксирует область за элементом, и для него перестаёт просчитываться взаимодействие с другими элементами. 

	transform, «выносит» элемент на отдельный композитный слой, где положение элемента не зависит от других и не влияет на них.

	Композитинг — это разделение содержимого страницы на «слои», которые браузер будет перерисовывать. Эти слои друг от друга не зависят, из-за чего изменение элемента в одном слое не затрагивает элементы из других слоёв, и перерисовывать их становится не нужно.

================
как браузер перерисовывает контент?

	существует 3 этапа перерисовки:

		1. вычисление свойств, которые влияют на внешний вид элемента
		2. вычисление положения элемента на экране и геометрии элемента
		3. перерисовка

	если изменяются свойства, которые относятся к геометрии и положению на экране элемента, то выполянются все 3 пункта.
	если изменяются свойства, которые затрагивают только внешний вид элемента (color), то выполняются только пункты 1 и 3
	если изменяются свойства, которые выносятся в отдельный слой, то выполняется только пункт 1


================
CSSOM 
	
	это представление селекторов и их значений в виде дерева. это дерево подобно DOM-дереву, в котором для каждого узла прописаны стили.

	построение CSSOM это блокирующий процесс потому что более поздние селекторы могут переопределять более ранние.

	DOM и CSSOM являются основой для потроение render-tree.

================
css переменные

	это переиспользуемые значения, которые можно использовать в правилах селектора.

	сначала объявляем:

		--card-color: lightblue;

	потом используем:

		.card {
			background-color: var(--card-color);
		}

	есть возможность использовать значения по умолчанию как второй аргумент:

		.card {
			background-color: var(--card-color, red);
		}		

	процесс поиска переменной это постоянное всплытие сначала в пределах текущей области видимости, а затем в областях видимости родителей.

================
:root {}

	необходим чтобы обращаться к наивысшему родительского элементу, то есть для html-стрнаиц им всегда будет <html>.

	для xml - <xml>

	для svg - <svg>

================
Houdini 

	это коллекция API браузера, которая позволяет расширять css средствами js. эти API позволяют расширять css на фазе отрисовки или на фазе вычисления размеров и расположения элементов.

================
треугольник средствами css

	#triangle {
	  width: 0;
	  height: 0;
	  border-left: 100px solid transparent;
	  border-right: 100px solid transparent;
	  border-bottom: 100px solid blue;
	}

================
flex vs grid
	
	флекс-модель строит макет на основе размера элементов. грид-модель подгоняет размеры элементов под макет.

================
как сделать верхний слой прозрачным для клика по нижнему?

	<div class="ul">
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <a href="ya.ru" target="_blank">gogogo</a>
	  <div class="in"></div>
	</div>

	<style>
	  .ul {
	    background: red;
	    position: relative;
	  }

	  a {
	    display: block;
	  }

	  .in {
	    position: absolute;
	    bottom: 0;
	    left: 0;
	    width: 40px;
	    height: 40px;
	    background: lime;
	    opacity: 0.4;
	    pointer-events: none;
	  }
	</style>


================
filter 

	позволяет применять к элементу такие графические эффекты, как размытие и смещение цвета.

		div {
			filter: contrast(175%) brightness(3%);
		}

  это дорогая операция потому что: 

    1. преобразование происходит попиксельно и потому что 
    2. фильтр применяется после всех операций рендеригна.		

================
способы сбросить стили: Inherit, initial, unset, revert:

существуют свойство, которые наследуются вложенными блоками (color), а существуют, которые не наследуются (padding)

	демо: https://stackblitz.com/edit/web-platform-ovzbvi?file=styles.css

inherit

	назначет значение, которое берётся из родительского блока

initial

	назначает значение по умолчанию, которое описано в спецификации W3C. например, background-repeat: repeat

unset

	назначает значение по умолчанию в зависимости от того наследуемое ли свойство или нет. для наследуемого unset сбрасывает к значению родителя (inherit), а для ненаследуеммого - к initial

revert

	тоже работет в зависимости от того наследуемое ли свойств оили нет. для наследуемого происходит сброс к inherit. для не наследуемого - к стилям браузера

================
W3C

	это совет, в который изначально входили специалисты от крупных интернет-компаний. чтобы эти компании не выпускали продукцию каждая в своём стандарте консорциум занялся разработкой общих стандартов. первым был оазроаботан стандарт html.

	стандарты, которые выпускаются W3C не защищены патентами.

================
Will-change

	помечает свойства селектора, которые с большой вероятностью могут измениться. таким образом браузер заранее выделяет ресурсы на перерисовку элемента.

	например при клике содержимое div может измениться. или div участвует в прокрутке/анимации.

	значениями могут быть:

		scroll-position 

			— указывает, что ожидается изменение положения элемента при прокрутке страницы. Браузер заранее готовится и отрисовывает содержимое за пределами видимой части страницы.

		contents 

			— указывает, что ожидается изменение содержимого элемента. Браузер ограничивает или полностью прекращает кэширование элемента

		конкретное свойство

			div {
			  will-change: transform;
			  will-change: opacity;
			  will-change: top, left, bottom, right;
			}


================
================
================
================
================
================
================