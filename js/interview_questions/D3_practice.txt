простая гистограмма с масштабированием

import * as d3 from 'd3';
import './style.css';

const width = 600;
const height = 600;
const data = [
  [0, 55],
  [100, 62],
  [200, 84],
  [300, 123],
  [400, 255],
  [500, 276],
  [600, 390],
  [700, 412],
  [800, 550],
  [900, 877],
  [1000, 1232],
  [1100, 2505],
  [1200, 2777],
  [1300, 3987],
];

const widths = data.map((x) => x[0]);
const heights = data.map((x) => x[1]);
const barWidth = width / widths.length;

console.log(barWidth, width, widths.length);

const scaleY = d3
  .scaleLinear()
  .domain([d3.min(heights), d3.max(heights)])
  .range([0, height]);

const scaleX = d3
  .scaleLinear()
  .domain([d3.min(widths), d3.max(widths)])
  .range([0, width]);

const svg = d3
  .select('body')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

const g = svg
  .selectAll('g')
  .data(data)
  .enter()
  .append('g')
  .attr('x', function (d, i) {
    return i * barWidth;
  });

g.append('rect')
  .attr('class', 'bar')
  .attr('x', function (d, i) {
    return i * barWidth;
  })
  .attr('width', function (d) {
    return barWidth - 1;
  })
  .attr('height', function (d) {
    return scaleY(d[1]);
  });

g.append('text')
  .attr('class', 'label')
  .attr('x', function (d, i) {
    return i * barWidth;
  })
  .attr('y', barWidth / 4)
  .attr('dx', barWidth / 4)
  .text(function (d) {
    return d[1];
  });


====================================
гисторгамма с двумя осями. есть отражение столбцов и масштабирование. есть отступы для осей.

import * as d3 from 'd3';
import './style.css';

const width = 600;
const height = 400;
const data = [
  [0, 55],
  [100, 62],
  [200, 84],
  [300, 123],
  [400, 255],
  [500, 276],
  [600, 390],
  [700, 412],
  [800, 550],
  [900, 877],
  [1000, 1232],
  [1100, 2505],
  [1200, 2777],
  [1300, 3987],
];

const widths = data.map((x) => x[0]);
const heights = data.map((x) => x[1]);
const barWidth = width / widths.length;
const textOffsetY = 2;
const textOffsetYFlip = 12;

const scaleY = d3
  .scaleLinear()
  .domain([d3.min(heights), d3.max(heights)])
  .range([0, height]);

const scaleYReverse = d3
  .scaleLinear()
  .domain([d3.max(heights), d3.min(heights)])
  .range([0, height]);

const scaleX = d3
  .scaleLinear()
  .domain([d3.min(widths), d3.max(widths)])
  .range([0, width]);

const box = d3.select('body').append('div').attr('class', 'padding');
const svg = box.append('svg').attr('width', width).attr('height', height);

const g = svg
  .selectAll('g')
  .data(data)
  .enter()
  .append('g')
  .attr('x', function (d, i) {
    return i * barWidth;
  });

g.append('rect')
  .attr('class', 'bar')
  .attr('x', function (d, i) {
    return i * barWidth;
  })
  .attr('y', function (d, i) {
    return height - scaleY(d[1]);
  })
  .attr('width', function (d) {
    return barWidth - 1;
  })
  .attr('height', function (d) {
    return scaleY(d[1]);
  });

g.append('text')
  .attr('class', 'label')
  .attr('x', function (d, i) {
    return i * barWidth;
  })
  .attr('y', function (d, i) {
    console.log(height, scaleY(d[1]));
    return height > scaleY(d[1])
      ? height - scaleY(d[1]) - textOffsetY
      : height - scaleY(d[1]) + textOffsetYFlip;
  })
  .attr('dx', barWidth / 4)
  .text(function (d) {
    return d[1];
  });

svg
  .append('g')
  .attr('transform', 'translate(0,' + height + ')')
  .call(d3.axisBottom().scale(scaleX));

svg.append('g').call(d3.axisLeft().scale(scaleYReverse));




// https://stackblitz.com/edit/js-cm3gtj?file=index.js


====================================
простейший тултип без динамического контента. при наведении сам объект меняет цвет.

var w = 960,
  h = 500;

var tooltip = d3
  .select('body')
  .append('div')
  .style('position', 'absolute')
  .style('z-index', '10')
  .style('visibility', 'hidden')
  .style('background-color', '#ffffff');

var vis = d3
  .select('body')
  .append('svg:svg')
  .attr('width', w)
  .attr('height', h);

vis
  .append('svg:circle')
  .style('stroke', 'gray')
  .style('fill', 'white')
  .attr('r', 40)
  .attr('cx', 50)
  .attr('cy', 50)
  .on('mouseover', function (event, d) {
    d3.select(this).style('fill', 'lightgreen');
    tooltip.text(d);
    tooltip.style('visibility', 'visible');
  })
  .on('mouseout', function () {
    d3.select(this).style('fill', 'white');
    tooltip.style('visibility', 'hidden');
  })
  .on('mousemove', function (event) {
    tooltip
      .style('top', event.pageY - 10 + 'px')
      .style('left', event.pageX + 10 + 'px');
  });

====================================
простейший бублик. данные в форме массива.

var data = [20, 60, 10, 10];
var colors = ['red', 'blue', 'green', 'orange'];
var width = 250;
var height = 250;
var outerRadius = width / 2;
var innerRadius = 50;

//Create SVG element
var svg = d3
  .select('body')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

// pie layout function
var pie = d3.pie();
var piedata = pie(data);

//Set up pie groups
var arcs = svg
  .selectAll('g')
  .data(piedata)
  .enter()
  .append('g')
  .attr('transform', 'translate(' + outerRadius + ',' + outerRadius + ')');

// Create arc function with parameters
var arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);

// Draw arc paths
arcs.append('path').attr('d', arc);

// Draw arc paths
arcs
  .append('path')
  .attr('d', arc)
  .attr('fill', function (d, i) {
    return colors[i];
  }); // Fill color

arcs
  .append('text')
  .attr('transform', function (d) {
    console.log(d);
    return 'translate(' + arc.centroid(d) + ')';
  })
  .attr('text-anchor', 'end')
  .text(function (d) {
    return d.value;
  });

// https://stackblitz.com/edit/js-tey1vr?file=index.js

====================================
тултипы с динамическим контентом

const data = [
  [90, 123],
  [120, 55],
  [55, 13],
];

const svg = d3
  .select('body')
  .append('svg')
  .attr('width', 200)
  .attr('height', 200);

const circles = svg
  .selectAll('circle')
  .data(data)
  .enter()
  .append('circle')
  .attr('cx', (d) => d[0])
  .attr('cy', (d) => d[1])
  .attr('r', 10);

circles
  .on('mouseover', function (event, d) {
    tooltip
      .style('opacity', 1)
      .html('coords: ' + d.join(', '))
      .style('left', 25 + 'px')
      .style('top', 75 + 'px');
  })
  .on('mouseout', (d) => tooltip.style('opacity', 0));

var tooltip = d3
  .select('body')
  .append('div')
  .attr('class', 'tooltip')
  .style('opacity', 0);

// https://stackblitz.com/edit/js-hxsxci?file=index.js

====================================
4 оси с координатной сеткой. объекты - круги, есть запасы для них величиной в половину радиуса 
// https://stackblitz.com/edit/js-kmjqka?file=index.js

const data = [
  { month: 'January', value: 13 },
  { month: 'February', value: 6 },
  { month: 'March', value: 30 },
  { month: 'April', value: 63 },
  { month: 'May', value: 120 },
  { month: 'June', value: 13 },
  { month: 'July', value: 66 },
  { month: 'August', value: 23 },
  { month: 'September', value: 163 },
  { month: 'October', value: 76 },
  { month: 'November', value: 2 },
  { month: 'December', value: 63 },
];

const width = 600;
const height = 600;
const padding = 60;

const months = data.map((v) => v.month);
const heights = data.map((v) => v.value);

const scaleX = d3.scaleBand().domain(months).range([0, width]);
const scaleY = d3
  .scaleLinear()
  .domain([0, d3.max(heights)])
  .range([0, height]);
const scaleYreverse = d3
  .scaleLinear()
  .domain([0, d3.max(heights)])
  .range([height, 0]);
const ordinalScale = d3
  .scaleOrdinal()
  .domain(months)
  .range(['blue', 'red', 'lime', 'orange', 'navy', 'green', 'maroon']);

const box = d3
  .select('body')
  .append('div')
  .attr('class', 'box')
  .attr('style', 'padding: ' + padding + 'px')
  .attr('width', width)
  .attr('height', height);
const svg = box.append('svg').attr('width', width).attr('height', height);
const chart = svg.append('g').attr('class', 'chart');
const axis = svg.append('g').attr('class', 'axis');

const bars = chart
  .selectAll('rect')
  .data(data)
  .enter()
  .append('rect')
  .attr('x', (d) => scaleX(d.month))
  .attr('y', (d) => height - scaleY(d.value))
  .attr('height', (d) => scaleY(d.value))
  .attr('width', (d) => scaleX.bandwidth())
  .attr('style', (d) => 'fill:' + ordinalScale(d));

const axisX = axis
  .append('g')
  .attr('transform', 'translate(0,' + height + ')')
  .call(d3.axisBottom().scale(scaleX).tickSizeOuter(0));
const labelsX = axisX
  .selectAll('text')
  .style('text-anchor', 'end')
  .attr('dx', '-.8em')
  .attr('dy', '.15em')
  .attr('transform', 'rotate(-45)');

const axisY = axis
  .append('g')
  // .attr('transform', 'translate(0,' + height + ')')
  .call(d3.axisLeft().scale(scaleYreverse).tickSizeOuter(0));


====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================