способы улучшить производительность.

1. уменьшить количество http-запросов и используемых библиотек.
2. применять различные алгоритмы сжатия на этапе борки при помощи webpack
3. использовать мемоизацию
4. использовать стратегию OnPush
5. использовать пагинацию
6. использовать pure pipes
7. использовать опцию trackBy для директивы *ngFor
8. использовать веб воркер для вычисления функций в другом потоке
9. лениввая загрузка позволяет загружать ресурсы только когда они необходимы пользователю
10. предварительная загрузка


===============================================================
что делать, если увидел плохой кусок кода, который не относится к твоей задаче?

1. сказать об этом на дейли и поместить в беклог
2. предложить тимлиду отдать эту задачу тебе
3. если задача совсем мелкая, то исправить самому


===============================================================
чем отличаются promise и observable?

промисы выполняют операцию по истечении времени единожды, а обсерваблы многократно.
обсервабл можно отменить(завершить поток)
обсервабл будет действовать только после подписки при помощи блока subscribe


===============================================================
можно ли в конструкторе получить значения инпутов?

нет, в результате получим  undefined. для этого нужно использовать ngOnInit		


===============================================================
работали с вебсокетами?

да, в частности они применялись для получения пуш-уведомлений в PWA. ВС обеспечивают такую возможность потому что протокол WSS использует постоянное соединение.

чтобы работать с ВС необходимо создать экземпляр объекта:
	let socket = new WebSocket("wss://.....");

и затем повесить на него обработчики:
	onopen,
	onmessage,
	onerror,
	onclose

===============================================================
что такое пайп?

это фильтр, которые получает на вход данные и возвращет изменённые данные. в основном ипользуется в шаблоне, но есть возможность использовать пайпы в компоненте.

по умолчанию пайпы pure, они реагируют на изменение внутренних частей объекта. в целях повышения производительности пайп можно сделать impure, в этом случае они будут реагировать тольео если изменяется ссылка на объект.


===============================================================
что будет, если не отписываться?

будет происходить утечка памяти. например, если пользователь 10 раз зайдёт на одн и туже страницу, то будет работать 10 коллбеков.


===============================================================
какие есть варианты отписки?

использовать unsubscribe() в хуке ngOnDestroy()

--------------------------

использовать takeUntil(this.notifier) 

    ngOnDestroy() {
        this.notifier.next();
        this.notifier.complete();
    }

--------------------------

Использование Async | Pipe

--------------------------

использование first()

--------------------------

библиотека untilDestroy

    interval(1000)
      .pipe(untilDestroyed(this))
      .subscribe(val => console.log(val));

	ngOnDestroy() {}      


===============================================================
как оценить задачи, если несколькок раз сроки были сорваны?

1. узнать список трудных для конкретного разработчика тем и далее назначать их другому разработчику.
2. уволить разработчика
3. увеличить частоту отчётов для конкретного разработчика

===============================================================
типы задач, которые приходилось решать?

	работа с API яндекс карт.
	доработка авторизации для входа в интернет-банк.
	вывод статистики при помощи библиотеки D3.
	разработка PWA
	реализация пуш-уведомлений.
	разработка системы управления заявками.
	написание тестов по безопасности js-приложений.

===============================================================
наиболее интересная задача.

разработка виджета на основе яндекс карт. виджет отображал различные данные, полученные при помощи алгоритмов машинного обучения.

===============================================================
все ли принципы ООП поддерживает TS?

инкапсуляция:

	 public, protected и private.

наследование:

	extend

полиморфизм:

	function add(x: string, y: string): string;
	function add(x: number, y: number): number;
	function add(x: any, y: any): any {
	    return x + y;
	}

===============================================================
в чём отличие type от interface?

type: 
позволяет объявлять алиас типа. в том числе объединение или пересечение.

interface: 
может наследоваться другим interface.
несколько interface  одинаковыми именами объединяются.
класс может реализовывать interface


===============================================================
в чём отличие абстрактного класса и интерфейса?

АК:
на основе него нельзя создать экземпля, АК можно только наследовать.
АК может содержать реализацию

интерфейс:
не может содержать реализацию.

АК применяются для случаев когда нужно создавать экземпляры. интерфейсы - для проверки контракта.

===============================================================
что такое viewEncapsulation?

это инкапсуляция стилей в пределах компонента. по умолчанию установлено значение emulated. в этом случае после компиляции каждому элементу добавляется атрибут. также генерируются стили, привязанные к этому атрибуту, которые находятся в секции head.

если установлено значение none, то все стили добавляются в глобальную область видимости.

если значение утановлено в shadowDom, то инкапсуляция осуществляется средствами теневого дома.




===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================