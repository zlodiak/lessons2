================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
rxjs это библиотека, которая реализует принципы реактивного программирования для js. то есть система обновляется автоматически при изменении потока данных, это достигается подписками. 

библиотека rxjs основана на взаимодействие объектов observable и объектов observer.


const sum = a + b
console.log(sum)
теперь если a или b изменится снова, то sum останется прежним. то есть программисту приходится придумывать механизм отследживания изменения. в реактивном программировании такой проблемы нет потому что используется подписка на поток данных.

================================
в чём отличие merge и concat в rxjs?

================================
в чём отличие of и from в rxjs?

================================
в чём отличие subject и observable в rxjs?

================================
в чём отличие combineLatest и forkJoin в rxjs?

================================
какие спосбы отписки существуют в rxjs?

1.	this.subscription.unsubscribe()

2.	takeUntil(notifier)
    notifier = new Subject();    
    ngOnInit () {
        const observable$ = Rx.Observable.interval(1000);
        observable$.pipe(takeUntil(this.notifier)).subscribe(x => console.log(x));
    }    
    ngOnDestroy() {
        this.notifier.next();
        this.notifier.complete();
    }

3.	.pipe(first())

4.	async pipe для angular
	Interval: {{observable$ | async}}

5. .pipe(take(1))
	

================================
в чём отличие timer и interval?

================================
в чём отличие scan и reduce?

	reduce отдаёт результат после завершения потока. 
	scan отдаёт результат при получении каждого значения потоком.

	var obsScan = Observable.from([1,2,3,4,5,6]);
    var count1 = obsScan.scan((acc, one) => acc + one, 0);
    count1.subscribe(x => {
      console.log('scan shows incremental total', x);
    });

    var obsReduce = Observable.from([1,2,3,4,5,6]);
    var count2 = obsReduce.reduce((acc, one) => acc + one, 0);
    count2.subscribe(x => {
      console.log('reduce shows only total', x);
    });

================================
что делает оператор share?

share() преобразует холодный поток в горячий.

	const endpoint = 'https://hacker-news.firebaseio.com/v0/newstories.json?print=pretty';

	const obs1 = interval(4000).pipe(
	  switchMap(
	    () => {
	      return ajax({
	        url: endpoint,
	        responseType: 'json',
	        method: 'GET',
	      })
	    }
	  ),
	  pluck('response'),
	  map(res => res.filter((_, index) => index < 6)),
	  tap((v) => {
	    console.log('tap')
	  }),
	  share(),
	)

	obs1.subscribe(v => {
	  console.log('sib1', v)
	});

	setTimeout(() => {
	  obs1.subscribe(v => {
	    console.log('sub2', v)
	  });
	}, 2000);

если бы в этом примере не было оператора share(), то tap срабатывал бы для каждого подписчика. а сейчас тут он срабатывает один раз для обоих подписчиков.


================================
что такой холодные и горячие observables?

холодные потоки производят всю последовательность данных сами. каждому новому подписчику отдаётся новая отдельная последовательность.

	const stream$ = interval(1000);

	stream$.subscribe((d) => {
	  console.log('first:', d);
	});

	setTimeout(() => {
	  stream$.subscribe((d) => {
	    console.log('second:', d);
	  });
	}, 2500);


горячие потоки производят последовательность данных не сами, а просто получают их, например, при клике по экрану. горячие потоки отдают каждому новому подписчику одну и ту же последовательность.

	const stream$ = interval(1000).pipe(share());

	stream$.subscribe((d) => {
	  console.log('first:', d);
	});

	setTimeout(() => {
	  stream$.subscribe((d) => {
	    console.log('second:', d);
	  });
	}, 2500);


пример с кликом по экрану:

	const stream$ = fromEvent(document.body, 'click');

	stream$.subscribe((d) => {
	  console.log('first:', d.x);
	});

	setTimeout(() => {
	  stream$.subscribe((d) => {
	    console.log('second:', d.x);
	  });
	}, 2500);



================================
что такое subject? какие виды subject существуют?

	subject 

		это observable, который может не только отдавать значения, но и принимать. кроме того для каждого нового подписчика он отдаёт не новый поток, а тот же самый.

	behaviourSubject:

		его можно инициализировать значением. кроме того каждому новому подписчику он отдаёт последнее значение.

		const subject = new BehaviorSubject(0);
		subject.subscribe(x => console.log(x)); // в консоли: 0
		subject.next(1); // в консоли: 1
		subject.next(2); // в консоли: 2
		subject.subscribe(x => console.log(x)); // в консоли: 2
		subject.complete();

	asyncSubject:

		отдаёт только ПОСЛЕДНЕЕ значение подписчикам после того как перейдёт в статус complete. в вслучае, если произойдёт ошибка, то подписчики получат только информацию об ошибке.

		const subject = new AsyncSubject();
		subject.subscribe(x => console.log(x));
		subject.next(1);
		subject.next(2);
		subject.complete(); // в консоли: 2

	replaySubject:

		каждому новому подписчику отдаёт все предыдущие значения. причём есть возможность ограничить количество предыдущих значений.

		const subject = new ReplaySubject();
		subject.subscribe(x => console.log(x));
		subject.next(1); // в консоли: 1
		subject.next(2); // в консоли: 2
		subject.subscribe(x => console.log(x));
		// в консоли:
		// 1
		// 2
		subject.complete();


================================
================================
map

	этот оператор работает почти так же как обычный джаваскриптовый map. то есть берёт каждый элемент потока, преобразует его и возвращает тоже поток.
	в джаваскриптовом map элементы результирующего массива можно получить при помощи синтаксиса квадратных скобок, а в реактивном map элементы результирующего потока можно получить при помощи синтаксиса .subscribe()

		const source = from([1,2,3,4,5,6,7]);
		const result = source.pipe(map(v => v+1));
		result.subscribe(v => console.log(v));

================================
concatMap для обработки стримов по очереди;
mergeMap для обработки стримов параллельно;
switchMap если нужно отменять стримы, созданные ранее;
exhaustMap для игнорирования создания новых стримов, если текущий стрим ещё не был завершён;

================================
отличие промиса от observable.

	observable это типизированный объект, который следит за событиями. на него можно подписаться, после этого он начнёт многократно отдавать значения. observable можно отменить, например, при помощи takeUntil()
	promise тоже следит за событием, но отдаёт результат только один раз.

================================
rxjs common operators

все операторы принимают поток, меняют его внутренности и возвращают изменённый поток чтобы потом можно было на него подписаться при помощи subscribe.

map:
	преобразует каждый элемент последовательности по определённому правилу.

concat:
	объединяет потоки последовательно. то есть по мере их регистрации, а не по мере выполнения.

	пример с синхронными потоками:

		concat(
		  of(1, 2, 3),
		  of(4, 5, 6),
		).subscribe(console.log);	// 1, 2, 3, 4, 5, 6

	пример с ансинхронными потоками:

		const first = interval(2500).pipe(take(2));
		const second = interval(2000).pipe(take(2));
		const third = interval(1500).pipe(take(2));
		const fourth = interval(1000).pipe(take(2));

		//emit outputs from one observable
		const example = rx(
		  concat(
		    first.pipe(mapTo('FIRST!')),
		    second.pipe(mapTo('SECOND!')),
		    third.pipe(mapTo('THIRD')),
		    fourth.pipe(mapTo('FOURTH'))
		  ).pipe(take(8))
		);
		//output: "FIRST", "FIRST", "SECOND!", "SECOND", "THIRD!", "THIRD", "FOURTH", "FOURTH"
		const subscribe = example.subscribe((val) => console.log(val));


merge:
	объединяет потоки по мере их выполнения. последовательность регистрации значения не имеет:

		const first = interval(2500);
		const second = interval(2000);
		const third = interval(1500);
		const fourth = interval(1000);

		//emit outputs from one observable
		const example = rx(
		  merge(
		    first.pipe(mapTo('FIRST!')),
		    second.pipe(mapTo('SECOND!')),
		    third.pipe(mapTo('THIRD')),
		    fourth.pipe(mapTo('FOURTH'))
		  ).pipe(take(7))
		);
		//output: "FOURTH", "THIRD", "SECOND!", "FOURTH", "FIRST!", "THIRD", "FOURTH"
		const subscribe = example.subscribe((val) => console.log(val));


	практический пример: есть индикатор загрузки на странице, которая имеет resolver. требуется скрывать и показывать индикатор. дело в том, что резолвер возвращает не значения, а потоки. эти потоки можно привести к булевому типу и при помощи merge создать объединяющий поток, который будет сигнальным.

	  isLoading$!: Observable<boolean>;
	  private _showLoaderEvents$!: Observable<boolean>;
	  private _hideLoaderEvents$!: Observable<boolean>;
	  constructor(private router: Router) {}

	  ngOnInit(): void {
	    this._showLoaderEvents$ = this.router.events.pipe(
	      filter((e) => e instanceof ResolveStart),
	      mapTo(true)
	    );
	    this._hideLoaderEvents$ = this.router.events.pipe(
	      filter((e) => e instanceof ResolveEnd),
	      mapTo(false)
	    );
	    this.isLoading$ = merge(this._hideLoaderEvents$, this._showLoaderEvents$);
	  }
  	

mergeAll:
	если существует поток, элементами которого являются другие потоки, то этот оператор подписывается на каждый внутренний поток, получает его результат и возвращает только внешний поток, содержащий уже не потоки, а результаты. 

	таким образом этот оператор уменьшает вложенность потоков. порядок результатов внутри потока зависит от порядка в котором разрешилась подписка.

		import { interval } from 'rxjs';
		import { map, take } from 'rxjs/operators';

		const int$ = interval(1000).pipe(
		  take(2),
		  map(int => interval(500).pipe(take(3))
		);
		int$.subscribe(console.log);
		// Observable
		// Observable


		import { interval } from 'rxjs';
		import { map, take, mergeAll } from 'rxjs/operators';

		const int$ = interval(1000).pipe(
		  take(2),
		  map(int => interval(500).pipe(take(3)),
		  mergeAll()
		);
		int$.subscribe(console.log);
		// values


concatAll:
	 делает то же самое, но порядок результатов в потоке зависит от регистрации, а не от скорости разрешения подписок.

mergeMap:
	бывает ситуация когда каждый из элементов потока содержит набор потоков. таким образом мы имеем элементы потока верхнего уровня и элементы потока вложенного уровня.

	необходимо все результаты потока второго уровня поместить в один выходной поток. оператор mergeMap делает это причём результаты помещаются в порядке выполнения, а не в порядке регистрации.

	// OuterInterval:   ----o----o----o|
	//                      |    |    | 
	// innerInterval_1:     --0--1--2--3|
	//                           |    |
	// innerInterval_2:          --0--1--2--3|
	//                                |
	// innerInterval_3:               --0--1--2--3|
	//                  ------0--1-02-1302-13-2--3|	

concatMap:
	делает то же самое, но результаты попадают в выходной поток строго в порядке очереди. то есть сначала в него попадут все результаты из первого потока верхнего уровня, потом все результаты из второго птока верхнего уровня и т.д.

switchMap:
	похож на mergeMap, но при появлении нового потока внутри основного потока отменяет выполняющиеся в данный момент потоки. таким образом актуален всегда только последний внутренний поток.

exhaustMap:
	то же самое, но делает актуальным только первый поток, а запустившиеся позже отключает.


================================
custom pipe. это функция, которая принимает поток, изменяет его и возвращает поток.

создать пользовательский оператор можно двумя способами:
	1. с использованием pipe второго уровня,
	2. полностью создав новый поток с тремя коллбеками.


1:
	export function hmm(n: number) {
	  console.log(n);
	  return <T>(source$: Observable<T>) => {
	    return source$.pipe(tap(console.log, console.error));
	  };
	}
	 
	const source = of('World').pipe(
	  map((x) => `Hello ${x}!`),
	  hmm(111)
	);
	 
	source.subscribe();


	видно, что hmm это просто функция-обёртка, которая возвращает сам оператор. этото оператор подобен map(x => x + 1). разница только в том, что он принимает поток и обрабатывает его стандартным pipe(tap()).

	при желании в функцию обёртку можно передать аргумент n. в данном примере он передаётся, но не используется.

2:
	function custom() {
	  return (src) => {
	    return new Observable((sub) => {
	      return src.subscribe({
	        next(value) {
	          sub.next(value + '_extra');
	        },
	        error(error) {
	          console.log(error);
	        },
	        complete() {
	          console.log('complete');
	        },
	      });
	    });
	  };
	}

	const obs$ = of(1, 2, 3, 4, 5);

	obs$
	  .pipe(
	    map((x) => x + '___addition'),
	    custom()
	  )
	  .subscribe(console.log);


	  видно, что новый оператор представляет из себя обёртку над new Observable(), в котором происходит: подписка, изменение и next изменённого значения.
	  
================================
чем отличаются merge, mergeAll, mergeMap?

	import { interval, merge } from 'rxjs';
	import { take } form 'rxjs/operators';
	const intA$ = interval(750).pipe(take(3));
	const intB$ = interval(1000).pipe(take(3));
	merge(intA$, intB$)
	.subscribe(console.log);

	-------------
	import { interval } from 'rxjs';
	import { map, take } from 'rxjs/operators';
	const int$ = interval(1000).pipe(
	  take(2),
	  map(int => interval(500).pipe(take(3))
	);
	int$.subscribe(console.log);
	// Observable
	// Observable


	import { interval } from 'rxjs';
	import { map, take, mergeAll } from 'rxjs/operators';
	const int$ = interval(1000).pipe(
	  take(2),
	  map(int => interval(500).pipe(take(3)),
	  mergeAll()
	);
	int$.subscribe(console.log);

	-------------
	import { interval } from 'rxjs';
	import { take, mergeMap } from 'rxjs/operators';
	const int$ = interval(1000).pipe(
	  take(2),
	  mergeMap(int => interval(500).pipe(take(3))
	);
	int$.subscribe(console.log);

================================
================================
observable это поставщик данных.
observer это получатель данных.

  создадим observable

    var observable = Rx.Observable.create(function subscribe(observer) {
      var id = setInterval(() => {
        observer.next('hi')
      }, 1000);
    });

    здесь важно то, что инстанс класс Observable имеет метод subscribe. этот метод получил аргументом функцию, в теле которой происходит генерация значений при помощи .next().

    теперь когда произойдёт подписка:

      observable.subscribe(console.log)

     то метод subscribe будет запускать один из трёх коллбеков:

       next,
       error,
       complete

    , а эти коллбеки будут совершать полезное действие во внешней среде.

================================
forkJoin 
  
  ждёт complete всех внутренних потоков, после этого пакует их последние значенияи в массив и один раз отправляет результат в блок subscribe. если хотя бы один из потоков завершается с ошибкой, то forkJoin вместо передачи массива с результатами выпадает в блок ошибки.

zip 

  выкидывает упакованные в масиив значения из каждого потока каждый раз как получает по одному значению от КАЖДОГО из внутренних потоков.

combineLatest

  выкидывает упакованные в масиив значения каждый раз как получает значение хотя бы от одного из внутренних потоков. это приводит к тому, что запаковано в выходной массив может быть уже ранее запаковывшееся значение

throttleTime

	делит временную шкалу на отметки и отправляет в блок subscribe только те значения, которые генерируются именно на отметке. сгенерированные значения вне отметок не отправляются вблок subscribe.

  этот оператор часто применяется чтобы не отправлять слишком большое количество значений из инпута, в который пользователь часто вводит символы.

    interval(1000)
      .pipe(throttle((val) => throttleTime(2000)))
      .subscribe((val) => console.log('тут отправка символов по http', val));

debounceTime

	делит временную шкалу на отметки и отправляет в блок subscribe только те значения, которые генерируются именно на отметке ИЛИ на, ИЛИ НЕПОСРЕДСТВЕННО ДО НЕЁ. остальные не отправляются вблок subscribe.

    fromEvent(document, 'click')
      .pipe(debounceTime(1000))
      .subscribe((x) => console.log('тут отправка символов по http', x));

debounce

	когда приходит новое значение, то запускается вложенный observable, происходит подписка на вложенный observable. когда из вложенного observable приходит значение или комплит, то значение из внешнего observable проходит дальше. при этом, если во время ожидания внутреннего observable приходит из внешнего новое значение, то старое значение исчезает.

	тут больше: https://indepth.dev/reference/rxjs/operators/debounce

finalize

	аналог try/catch/finally для нативного JS. finalize() выполняется и после next и после error. 

	важно, что finalize выполняется даже после того как произошла отписка от потока: 

		const sub = rx(throwError(() => new Error(`Invalid`)))
		  .pipe(
		    delay(110),
		    finalize(() => console.log('finally')),
		    catchError((e) => {
		      return of(555);
		    })
		  )
		  .subscribe((n) => {
		    console.log('next', n);
		  });

		sub.unsubscribe();

		// вывод в консоль: "finally" и с существующим, и с закомментированным блоком catchError


	важно понимать, что complete отрабатывает только в сдучае успешного next. а если отработает коллбек error, то complete не сработает.
      
================================
спосбо вручную выбросить исключение

	.throwError(() => new Error(response))

================================
shareReplay(1) vs share()

	оба этих оператора делают поток горячим, но для новых подписчиков shareReplay(1) сразу отдаёт предыдущее значение.

	например, если имеется поток interval(1000) и действует один из перечисленных выше операторов, то для каждого нового подписчика не начинает тикать interval заново, а тикает один и тот же интервал.

================================
приведение каждого элемента последовательности к будевому значению и фильтрация по нему

	const number$ = from([null, 2, 1, undefined, 5, false, 6, 7]);
	number$
	  .pipe(
	    filter<number>(Boolean),
	    filter((n) => n % 2 === 0)
	  )
	  .subscribe(console.log);
	// 2 6

конструктор Boolean() приводит любое значение к типу boolean. в данном примере фильтр отсеивает все неистинные значения

================================
catchError

	решает какой и трёх коллбеков должен сработать, если в запросе произошла ошибка.

	если произошла ошибка, то не даёт потоку выпасть в error callback. вместо этого catchError эмитит новый обсервабл  и срабатывает коллбек next()

	  ngOnInit() {
	    this.stateService
	      .getBeers()
	      .pipe(catchError(() => of([{ title: 'my default beer' }])))
	      .subscribe(
	        (data: Ititles[]) => {
	          console.log(data);
	        },
	        (err) => {
	          console.log('error', err);	// не сработает
	        },
	        () => console.log('done')			// сработает
	      );
	  }	

	если catchError возвращает сконструированный объект ошибки, то срабатывает коллбек error, в который предаётся объект ошибки:

	  ngOnInit() {
	    this.stateService
	      .getBeers()
	      .pipe(
	        catchError(() => {
	          return throwError(() => new Error('ups something happened'));
	        })
	      )
	      .subscribe(
	        (data: Ititles[]) => {
	          console.log(data);
	        },
	        (err) => {
	          console.log('error', err.message);	// сработает и выведет: error ups something happened
	        },
	        () => console.log('done')
	      );
	  }	

 	если catchError возвращает EMPTY, то сразу срабатывает complete(). при этом не выбрасывается исключение, но и next-коллбек не срабатывает.

	  ngOnInit() {
	    this.stateService
	      .getBeers()
	      .pipe(
	        catchError(() => {
	          return EMPTY;
	        })
	      )
	      .subscribe(
	        (data: Ititles[]) => {
	          console.log(data);
	        },
	        (err) => {
	          console.log('error', err.message);
	        },
	        () => console.log('done')			// только это сработает и выведет: done
	      );
	  } 	

================================
firstValueFrom instead of toPromise():

	toPromise устарел, его не будет в >=rxJs8

	import { interval, firstValueFrom } from 'rxjs';

	async function execute() {
	  const source$ = interval(2000);
	  const firstNumber = await firstValueFrom(source$);
	  console.log(`The first number is ${firstNumber}`);
	}

	execute();

	// Expected output:
	// "The first number is 0"

	демо: https://stackblitz.com/edit/qvv5vg?file=index.ts



================================
take(1) vs first() vs single()

	все они завершают поток после принятия первого значения потока.

	но take(1) не выбрасывает исключение, если не пришло ни одного значения. а first() и single() выбрасывают.

	single() также выбрасывает исключение, если пришло более 1 значения. при этом можно передать аргумент, который будет фильтровать приходящие из потока значения.

	тут больше: https://upmostly.com/angular/take1-vs-first-vs-single-in-rxjs-angular


================================
timer()

	если передан один аргумент, то происходит задержка до получения первого значения. затем поток излучает значения бесконечно

	если передано 2 аргумента, то певое значение эмитится в зависимости от величины первого аргумента. затем значения тоже эмитятся  бесконечно


================================
tap

	 необходим для выполнения сайд-эффекта. при этом важно помнить, что в tap приходит не клон объекта, а оригинальный объект.

		//This will return a user object with the firstName of test. 
		this.http.get<User>('api/user').pipe(tap(user => { 
			user.firstName = 'Test';
		}));

		код выше добавить новое свойство объекту user

================================
retry

	запускает поток повторно при выбросе исключения:

		const source = interval(1000);
		const example = source.pipe(
		  mergeMap(val => {
		    if (val > 5) {
		      return throwError('Error!');
		    }
		    return of(val);
		  }),
		  retry(2)
		);

		/*
		  output:
		  0..1..2..3..4..5..
		  0..1..2..3..4..5..
		  0..1..2..3..4..5..
		  "Error!: Retried 2 times then quit!"
		*/
		
		const subscribe = example.subscribe({
		  next: val => console.log(val),
		  error: val => console.log(`${val}: Retried 2 times then quit!`)
		});

================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================

================================
================================