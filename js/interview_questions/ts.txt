================================
================================
что такое generics в ts

Обобщённый тип позволяет резервировать место для неизвестного типа, который будет заменён на конкретный, переданный пользователем(явно или не явно).

	function identity<T>(arg: T): T {
		return arg;
	}

Конструкция <T> после имени функции указывает на то, что эта функция собирается захватить тип и подменить им все T. при вызове этой функции нужно явно указывать обобщённый тип:

	identity<number>(115);

но можно вызвать и так. в этом случае обобщённый тип в угловых скобках определится автоматически:

	identity('string');

================================
описать тип tuple

этот тип описывает массив, в котором задана типизация для каждого элемента. длина кортежа меняться не может. порядоку элементов меняться не может.

================================
описать тип enum

это объект, который состоит из констант. если контанты - числа, то возможна двусторонняя ассоциация:

	enum Nuts {
	    Peanuts, // 0
	    Walnut, // 1
	    Hazelnut = 0, // 0
	    Cedar // 1
	}
	console.log(Nuts[1]);       // Cedar
	console.log(Nuts.Cedar);    // 1

если констнты  - строки, то ассоциация односторонняя:

	enum Nuts {
	    Peanuts = 'qwe', // 0
	    Walnut = 'asd', // 1
	}
	console.log(Nuts[0]);       // undefined
	console.log(Nuts.Peanuts);    // qwe


================================
чем отличаются типы never и void

если в функции выполняется бесконечный цикл, то она вернёт never. если в функции нет инструкции return, то она вернёт void.

================================
расскзать о модулях и namespaces в ts

пространство имён это способ организации видимости переменных. важно использовать export для тех переменных, к которым есть доступ.
	namespace Validation {
	    export interface StringValidator {
	        isAcceptable(s: string): boolean;
	    }
	    const lettersRegexp = /^[A-Za-z]+$/; 
	 }

обращаться так:
Validation.StringValidator


 модули объявляют свои зависимости через import. в остальном это такие же пространства имён. модуль это отдельный файл.


================================
перечислить типы данных в ts

Boolean: логическое значение true или false
Number: числовое значение
String: строки

Array: массивы. содержат только один тип элементов
Tuple: кортежи. содержат различные типы элементов, их предварительно нужно описать	// let x: [string, number] = ["hello", 10]
Enum: перечисления. enum Season { Winter=0, Spring=1, Summer=2, Autumn=3 };

Any: произвольный тип
Null и undefined: соответствуют значениям null и undefined в javascript
Void: отсутствие конкретного значения, используется в основном в качестве возвращаемого типа функций
Never: возвращает функция, выход из которой никогда не происходит. например бесконечный цикл
Unknown: подобен any, но невозможно присвоить произвольному типу

================================
let vAny: any = 10;          // We can assign anything to any
let vUnknown: unknown =  10; // We can assign anything to unknown just like any 


let s1: string = vAny;     // Any is assignable to anything 
let s2: string = vUnknown; // Invalid we can't assign vUnknown to any other type (without an explicit assertion)

vAny.method();     // ok anything goes with any
vUnknown.method(); // not ok, we don't know anything about this variable

================================
что такое литеральный тип в ts?

	const a: 'qqq' = 'qqq';

================================
чем тип отличается от интерфейса?

интерфейсы можно наследовать.
интерфейсы можно слиавть(если объявлены два с одинаковым именем).
type позволяет задать новое имя для типа или для объединения типов.

================================
что такое условный чейнинг(Optional Chaining)?

	// Before
	if (foo && foo.bar && foo.bar.baz) {
	    // ...
	}

	// After-ish
	if (foo?.bar?.baz) {
	    // ...
	}

Если значение foo.bar равно null или undefined, выполнение выражения автоматически прекращается и возвращается undefined. исключение не выбрасывается.

================================
что такое union и intersection типы?

union это тип, полученный в результате перечисления нескольких типов. результирующий тип принадлежит к одному из перечисленных

	interface Phone {
	  number: string;
	}
	interface Person {
	  name: string;
	}
	let employee: Phone | Person = {
	  name: 'Jane',
	}

intersection это тип, полученный в результате перечисления нескольких типов. результирующий тип включает все перечилсенные

	interface Phone {
	  number: string;
	}
	interface Person {
	  name: string;
	}
	let employee: Phone & Person = {
	  number: '+7 927 555-55-55',
	  name: 'Jane',
	}

================================
что такое type assertion?

assertion это сигнал от разработчика к компилятору об уточнении типа.

например имеется строка, которая присвоена переменной как any. если нужно взять от строки длину, то компилятор не сможет взять длину от типа any. но раазработчика может дать сигнал компилятору не ругаться:

	let someAnyValue: any = "hello world!";
	let strLength: number = (<string>someAnyValue).length;
	console.log(strLength); // 12

	let someAnyValue: any = "hello world!";
	let strLength: number = (someAnyValue as string).length;
	console.log(strLength); // 12	


-------------

assertion это сигнал разработчика компилятору о том, что два типа являются совместимыми. после компиляции в js-коде не остаётся информации об assertion.

например querySelector возвращает тип element, но разработчик хочет его приравнять к переменной типа HTMLElement. при этом в element есть все свойства HTMLElement и даже больше. формально эти типы различаются, но практически нет.

	const element: Element = document.querySelector( '#stage' );
	const stage: HTMLElement = <HTMLElement> element // Ok

альтернативная форма записи:

	 let element = document.querySelector('#counter') as HTMLElement;

================================
что такое перегрузка функций? приведите примеры.

перегрузка является частью механизма полиморфизма. это способность функции выполнять различные действия в зависимости от типов и количества получаемых аргументов.

	function add(x: string, y: string): string;
	function add(x: number, y: number): number;
	function add(x: any, y: any): any {
	    return x + y;
	}
	 
	let result1 = add(5, 4);      // 9
	let result2 = add("5", "4");  // 54

================================
что такое тип функции? приведите пример.

Тип функции представляет комбинацию типов параметров и типа возвращаемого значения.

	function sum (x: number, y: number): number {
	    return x + y;
	};
	let op: (x:number, y:number) => number = sum;
	console.log(op(2, 4));  // 6

================================
что такое абстрактный класс?

от АК невозможно создать объект потому что АК нужно обязательно наследовать. АК в отличие от интерфейсов могут содержать реализацию. АК может иметь абстрактные методы, которые не содержат реализацию, и которые должны быть реализованы в наследнике.

	abstract class Figure {
	    getArea(): void{
	        console.log("Not Implemented")
	    }
	    abstract getColor(): void
	}
	class Rectangle extends Figure{
	  getColor() {
	    console.log('is red');
	  }
	}

	// const f = new Figure(); // error
	const r = new Rectangle();
	console.log(r)
	r.getArea();
	r.getColor();

================================
что такое интерфейс?

интерфейс - это определение кастомного типа данных, но без реализации. определяет свойства и методы, которые объект должен реализовать

================================
как в интерфейсе обозначаются необязательные свойства?

	interface IUser {
	    id: number;
	    name: string;
	    age?: number;
	}


================================
что такое декораторы в TS?

декораторы позволяют добавить к классам и их членам метаданные и тем самым изменить их поведение без изменения их кода. Декораторы представляют функции, которые могут применяться к классам, методам, методом доступа (геттерам и сеттерам), свойствам, параметрам.

декоратор класса применяется к конструктору. этот декоратор принимает и возвращает функцию конструктора и, например, может её заменить.

	function logger<TFunction extends Function>(target: TFunction): TFunction {
	  let newConstructor: Function = function(name: string) {
	    console.log('Creating new instance')
	    this.name = name
	    this.age = 23
	    this.print = function(): void {
	      console.log(this.name, this.age)
	    }
	  }
	  return <TFunction>newConstructor
	}

	@logger
	class User {
	  name: string
	  constructor(name: string) {
	    this.name = name
	  }
	  print(): void {
	    console.log(this.name)
	  }
	}
	let tom = new User('Tom')
	let bob = new User('Bob')
	tom.print()
	bob.print()

декоратор метода применяется к методу. декоратор принимает объект, название метода, дескриптор метода. и может, например, запретить переопределение метода.

	function readonly(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {
	  descriptor.writable = false	// метод нельзя переназначить
	}

	class User {
	  name: string
	  constructor(name: string) {
	    this.name = name
	  }

	  @readonly
	  print(): void {
	    console.log(this.name)
	  }
	}
	let tom = new User('Tom')
	tom.print = function() {
	  console.log('print has been changed')
	}
	tom.print() // Tom

декоратор свойства принимает свойство. он может, например, добавить к нем геттер и сеттер:

	class IceCreamComponent {
	  @Emoji()
	  flavor = 'vanilla';
	}

	function Emoji() {
	  return function(target: Object, key: string | symbol) {

	    let val = target[key];

	    const getter = () =>  {
	        return val + '+++';
	    };

	    const setter = (next) => {
	        console.log('updating flavor...');
	        val = `🍦 ${next}okok`;
	    };

	    Object.defineProperty(target, key, {
	      get: getter,
	      set: setter,
	      enumerable: true,
	      configurable: true,
	    });

	  };
	}

	const i = new IceCreamComponent()
	console.log(i.flavor)
	i.flavor = 10
	console.log(i.flavor)

или чтобы подменить свойство, то нужно просто переписать геттер:

	function logParameter(target: Object, propertyName: string) {
	  Object.defineProperty(target, propertyName, {
	      get: () => {
	          return '123';
	      },
	  });
	}

	class Employee {
	    @logParameter
	    name: string = '222';
	}

	const emp = new Employee();
	emp.name = 'Mohan Ram';
	console.log(emp.name);


================================
как в TS реализована перегрузка функций?

для этого нужно написать реализацию одной функции в самом общем виде и несколько объявлений с таким же именем, но разными типами:

	class Foo {
		myMethod(a: string)
		myMethod(a: number)
		myMethod(a: number, b: string)
		myMethod(a: any, b?: string) {
		    alert(a.toString())
		}
	}

================================
что такое type guards?

TG это функция, которая проверяет тип и возвращает true/false. далее эту функцию можно использовать перед использованием метода проверенного объекта.

	let pet =  {
	    // swim: function() {
	    //   console.log('swim');
	    // },
	    fly: function() {
	      console.log('fly');
	    }    
	  };

	interface Fish { swim: any }
	interface Bird { fly: any }

	function isFish(pet: Fish | Bird): pet is Fish {
	  return (pet as Fish).swim !== undefined;
	}

	if (isFish(pet)) {
	  pet.swim();
	} else {
	  pet.fly();
	}

	// fly

================================
как используются дженерики при создании экземпляра класса?

	class A<T> {
	  a: T;

	  constructor(a: T) {
	    this.a = a;
	  }

	  action() {
	    console.log('action', this.a, typeof this.a);
	  }
	}

	const a = new A(123);
	a.action();


================================
как используются дженерики в механизме наследования классов?

	class A<T> {
	  a: T;

	  constructor(a: T) {
	    this.a = a;
	  }

	  action() {
	    console.log('action', this.a, typeof this.a);
	  }
	}

	class B extends A<string> {}
	const b = new B('qwe');
	b.action();

или

	class A<T, U> {
	  a: T;
	  v: U;

	  constructor(a: T, v: U) {
	    this.a = a;
	    this.v = v;
	  }

	  action() {
	    console.log('action', this.a, typeof this.a);
	    console.log('action_', this.v, typeof this.v);
	  }
	}

	class B extends A<string, number> {}
	const b = new B('qwe', 123);
	b.action();

так тоже можно:

	class B extends A<string, string> {}
	const b = new B('qwe', '123');
	b.action();

================================
типы any, never, unknown:

	типы можно понимать как контейнеры допустимых значений. например

	  let a: number; // [1, 2, 3, 30, 100, и т.д.]

	тип any содержит все возможные значения. но он выпадает из этой концепции потому что any-значению может быть присвоено любое другое значение и наоброт - значение any можно назначить значению любого другого типа.

	  let a: any = 123;

	  и 

	  let a: number = 123;
	  let b = function(): any {
	    return 'qwe';
	  }
	  a = b()  // ошибки не будет

	таким образом тип any выпадает из концепции наборов допустимых значений.

	тип unknown исправляет это. он может использоваться как any с той лишь разницей, что unknown значение не может быть назначаемо какому-нибудь типу:

	  let a: unknown = 123;  тут ок
	  let res = 'qwwe';
	  res = a;  // тут будет ошибка

	тип never это пустой контейнер возможных значений. следовательно его можно назначить любому типу. но ему нельзя назначить никакой тип

	  let a: number = 123;
	  let b = function (): never {
	    while (true) {
	      console.log(1);
	    }
	  };
	  a = b(); // ошибки не будет

	  и

	  let a: never = 123;  // будет ошибка

================================
TS может работать с включенным и отключенным значенимем конфига --strictNullChecks. если оно включено, то на этапе компиляции проверяются все места, в которых отсутствие значения может привести к ошибке. также проверяются неинициализированные при объявлении или в конструкторе свойства классов.

разработчик может отключить вывод ошибки при помощи оператора !. важно понимать, что если ошибка всё таки случится, то программа упадёт.

если --strictNullChecks отключено, то никаких проверок на null и undefined компилятором не проводится.

================================
Оператор опциональной последовательности ?. позволяет получить значение свойства, находящегося на любом уровне вложенности в цепочке связанных между собой объектов, без необходимости проверять каждое из промежуточных свойств в ней на существование. ?. не выбрасывает исключение, если объект, к свойству или методу которого идёт обращение, равен null или undefined. В этих случаях он возвращает undefined.

================================
все ли принципы ООП поддерживает TS?

	инкапсуляция:

		 public, protected и private.

	наследование:

		extend

	полиморфизм:

		function add(x: string, y: string): string;
		function add(x: number, y: number): number;
		function add(x: any, y: any): any {
		    return x + y;
		}

================================
в чём отличие type от interface?

	type: 
		позволяет объявлять алиас типа. в том числе объединение или пересечение.

	interface: 
		может наследоваться другим interface.
		несколько interface  одинаковыми именами объединяются.
		класс может реализовывать interface

================================
в чём отличие абстрактного класса и интерфейса?

	АК:
		на основе него нельзя создать экземпля, АК можно только наследовать.
		АК может содержать реализацию

	интерфейс:
		не может содержать реализацию.

	АК применяются для случаев когда нужно создавать экземпляры. интерфейсы - для проверки контракта.

================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================
================================