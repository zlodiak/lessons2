// –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ [5, 4, 3, 2, 1]

// —Å–ø–æ—Å–æ–± 1
// const array = [5, 4, 3, 2, 1];
// const sum = array.reduce((sum, val) => (sum = sum + val), 0);
// console.log(sum);

// —Å–ø–æ—Å–æ–± 2
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// array.forEach((v) => (sum += v));
// console.log(sum);

// —Å–ø–æ—Å–æ–± 3
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// for (let i = 0; i < array.length; i++) {
//   sum += array[i];
// }
// console.log(sum);

// —Å–ø–æ—Å–æ–± 4
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// for (el of array) {
//   sum += el;
// }
// console.log(sum);

===========================
// –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—É—é —Å—Ç—Ä–æ–∫—É.
// const s1 = 'qwe';
// function f(str) {
//   // ????????????????????
// }
// console.log('s1', s1);
// console.log('s2', f(s1));

// —Å–ø–æ—Å–æ–± 1
// const s1 = 'qwe';
// function f(str) {
//   return str.split('').reverse().join('');
// }
// console.log('s1', s1);
// console.log('s2', f(s1));

===========================
// –µ—Å—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º. –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
// –¥–æ–ø. –≤–æ–ø—Ä–æ—Å1: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º–æ–≤—ã–∑—ã–≤–∞—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é.

// —Å–ø–æ—Å–æ–± 1
// const obj1 = {
//   prop1: false,
// };
// const obj2 = {
//   prop2: true,
//   __proto__: obj1,
// };
// function f(obj) {
//   for (let prop in obj) {
//     if (obj2.hasOwnProperty(prop)) {
//       console.log(prop, obj[prop]);
//     }
//   }
// }
// f(obj2);

// –¥–æ–ø1
// const obj1 = {
//   prop1: false,
// };

// const obj2 = {
//   prop2: true,
//   __proto__: obj1,
// };

// (function f(obj) {
//   for (let prop in obj) {
//     if (obj2.hasOwnProperty(prop)) {
//       console.log(prop, obj[prop]);
//     }
//   }
// })(obj2);

===========================
// –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —ç—Ç–æ–º –º–∞—Å—Å–∏–≤–µ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
// const arr = [1, 2, 3, 2, 4, 4];
// function f(arr1) {
//   ??????????????
// }
// console.log(f(arr));

// —Å–ø–æ—Å–æ–±1
// const arr = [1, 2, 3, 2, 4, 4];
// function f(arr1) {
//   return [...new Set(arr1)];
// }
// console.log(f(arr));

// —Å–ø–æ—Å–æ–±2
// const arr = [1, 2, 3, 2, 4, 4];
// const f = (arr1) => [...new Set(arr1)];
// console.log(f(arr));

===========================
–µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤. –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç—ã —Å –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.

// —Å–ø–æ—Å–æ–±1
const array = [
  { name: 'Joe', age: 17 },
  { name: 'Bob', age: 17 },
  { name: 'Carl', age: 35 },
];

const key = 'age';

const arrayUniqueByKey = [
  ...new Map(array.map((item) => [item[key], item])).values(),
];

console.log(arrayUniqueByKey);

/*OUTPUT
       [
        { "name": "Bob", "age": 17 },
        { "name": "Carl", "age": 35 }
       ]
   */

—Ç—É—Ç –ø—Ä–∏–º–µ—Ä: https://stackblitz.com/edit/js-tqkslf?file=index.js



  
  const array = [
    { name: 'Joe', age: 17 },
    { name: 'Joe', age: 17 },
    { name: 'Carl', age: 35 },
  ];
  
  const strArr = array.map(item => JSON.stringify(item));
  const uniqStrSet = new Set(strArr);
  const uniqStrArr = Array.from(uniqStrSet);
  const resultArr = uniqStrArr.map(item => JSON.parse(item));
  
  console.log(resultArr);
  


===========================
–ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É:

–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:

  const arr = [{id: 'a'}, {id: 'b'}, {id: 'c'}];
  const index = arr.findIndex(object => {
    return object.id === 'b';
  });
  console.log(index); // üëâÔ∏è 1

–≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±:

  const arr = [{id: 'a'}, {id: 'b'}, {id: 'c'}];
  const index = arr.map(object => object.id).indexOf('c');
  console.log(index); // üëâÔ∏è 2



===========================
// –≤—ã–¥–µ–ª–∏—Ç—å —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ 'src_ip' –∏–∑ —Å—Ç—Ä–æ–∫–∏ '{table.src_ip}' –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
// const str = '{table.src_ip}';
// console.log(?????);

–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:
  const str = '{table.src_ip}';
  const regex = /^{table.(.*)}/i;
  const res = str.match(regex);

  console.log(res[1]); // src_ip
  // https://stackblitz.com/edit/js-clpc3v?file=index.js

===========================
// –ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏ –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è Math.max –∏ Math.min.

//function findMinMax(arr) {
//  ?????????
// }
// const numbers = [5, 1, 3, 9, 12, 6];
// console.log(findMinMax(numbers));  // result: 1, 12


–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:
  function findMinMax(arr) {
    let min = arr[0];
    let max = arr[0];

    for (let i = 1; i < arr.length; i++) {
      const item = arr[i];

      if (item < min) {
        min = item;
      } else if (item > max) {
        max = item;
      }
    }

    return `result: ${min}, ${max}`;
  }

  const numbers = [5, 1, 3, 412, 12, 512];
  console.log(findMinMax(numbers));


===========================
// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—é–¥–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –≥–æ—Ä–æ–¥–æ–≤

  // –î–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ö–æ–¥
  const people = [
    {
      name: 'Alex',
      city: 'Moscow',
    },
    {
      name: 'Ivan',
      city: 'Moscow',
    },
    {
      name: 'Joe',
      city: 'New York'
    },
    {
      name: 'Johan',
      city: 'Berlin'
    },
  ]

  // –î–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã—Ö–æ–¥
  {
    'Moscow': [ 'Alex', 'Ivan' ],
    'New York': 'Joe',
    'Berlin': 'Johan'
  }


  const groupByCity = (array) => {};
  console.log(groupByCity(people));


–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:

  const groupByCity = (array) => {
    const cities = array.reduce((acc, p) => [...acc, p.city], []);
    const citiesUnique = [...new Set(cities)];
    const groups = {};

    citiesUnique.forEach((c) => {
      const names = array
        .map((p) => {
          if (p.city === c) {
            return p.name;
          }
        })
        .filter((item) => item);

      groups[c] = names;
    });

    citiesUnique.forEach((c) => {
      if (groups[c].length === 1) {
        groups[c] = groups[c][0];
      }
    });

    return groups;
  };


–≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±:

  const groupByCity = (array) => {
    const result = {};

    for (const item of array) {
      const { city, name } = item;

      if (!result[city]) {
        result[city] = name;
      } else if (Array.isArray(result[city])) {
        result[city].push(name);
      } else {
        result[city] = [result[city], name];
      }
    }

    return result;
  };


===========================
// –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–ª–∞ –±—ã —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏–ª–∏ –Ω–µ—Ç. –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å. —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ —Ç–æ–∂–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å.

  const words = [
    `–ö–∞–∑–∞–∫`,
    `Madam, I'm Adam`,
    `–ê –≤ –ï–Ω–∏—Å–µ–µ - —Å–∏–Ω–µ–≤–∞`,
    `–û, –¥—É—Ö–∏, –æ—Ç —É–±–æ—Ä–∫–∏ –º–∏–∫—Ä–æ–±—É-—Ç–æ –∏ —Ö—É–¥–æ`,
    `–ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º`,
  ];

  words.forEach((word) => {
    console.log(poly(word));
  });

  function poly(word) {

  }


–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:

  const words = [
    `–ö–∞–∑–∞–∫`,
    `Madam, I'm Adam`,
    `–ê –≤ –ï–Ω–∏—Å–µ–µ - —Å–∏–Ω–µ–≤–∞`,
    `–û, –¥—É—Ö–∏, –æ—Ç —É–±–æ—Ä–∫–∏ –º–∏–∫—Ä–æ–±—É-—Ç–æ –∏ —Ö—É–¥–æ`,
    `–ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º`,
  ];

  words.forEach((word) => {
    console.log(poly(word));
  });

  function poly(word) {
    let isPoly = true;
    const restrictedSymbols = [
      '~',
      '`',
      '!',
      '@',
      '#',
      '$',
      '%',
      '^',
      '&',
      '*',
      '(',
      ')',
      '_',
      '-',
      '+',
      '=',
      ' ',
      ',',
      '.',
      '?',
      ';',
      ':',
    ];

    const wordWithoutSigns = word
      .replaceAll(/['.,\/#!$%\^&\*;:{}=\-_`~() ]/g, '')
      .toLowerCase();

    const wordWithoutSignsRevert = wordWithoutSigns.split('').reverse().join('');

    for (let i = 0; i < wordWithoutSigns.length; ++i) {
      isPoly = wordWithoutSigns[i] === wordWithoutSignsRevert[i];
    }

    return isPoly;
  }



===========================
// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ 2 –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–æ–π

  console.log(anagram('finder', 'Friend')); // true
  console.log(anagram('hello', 'bye')); // false

  function anagram(strA, strB) {}

–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:

  console.log(anagram('finder', 'Friend')); // true
  console.log(anagram('hello', 'bye')); // false

  function anagram(strA, strB) {
    const aLower = strA.toLowerCase();
    const bLower = strB.toLowerCase();

    const aStorage = aLower.split('');
    const bStorage = bLower.split('');

    bStorage.forEach((bLetter) => {
      const bIndex = aStorage.findIndex((l) => l === bLetter);

      if (bIndex > -1) {
        aStorage.splice(bIndex, 1);
      }
    });

    return !aStorage.length;
  }


–≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±:

  const buildCharObject = str => {
    const charObj = {}
    for(let char of str.replace(/[^\w]/g).toLowerCase()) {
      if (charObj[char]) {
        charObj[char] = charObj[char] + 1
      } else {
        charObj[char] = 1
      }
    }
    return charObj
  }


  const anagram = (strA, strB) => {
    const aCharObject = buildCharObject(strA)
    const bCharObject = buildCharObject(strB)
    
    console.log(aCharObject)
    console.log(bCharObject)

    if(Object.keys(aCharObject).length !== Object.keys(bCharObject).length) {
      return false
    }

    for(let char in aCharObject) {
      if(aCharObject[char] !== bCharObject[char]) {
        return false
      }
    }

    return true
  }

  console.log(anagram('finder', 'Friend'))
  console.log(anagram('hello', 'bye'))


===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================