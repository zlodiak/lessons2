// посчитать сумму элементов массива [5, 4, 3, 2, 1]

// способ 1
// const array = [5, 4, 3, 2, 1];
// const sum = array.reduce((sum, val) => (sum = sum + val), 0);
// console.log(sum);

// способ 2
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// array.forEach((v) => (sum += v));
// console.log(sum);

// способ 3
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// for (let i = 0; i < array.length; i++) {
//   sum += array[i];
// }
// console.log(sum);

// способ 4
// const array = [5, 4, 3, 2, 1];
// let sum = 0;
// for (el of array) {
//   sum += el;
// }
// console.log(sum);

===========================
// написать функцию, которая будет принимать на вход строку и возвращать перевёрнутую строку.
// const s1 = 'qwe';
// function f(str) {
//   // ????????????????????
// }
// console.log('s1', s1);
// console.log('s2', f(s1));

// способ 1
// const s1 = 'qwe';
// function f(str) {
//   return str.split('').reverse().join('');
// }
// console.log('s1', s1);
// console.log('s2', f(s1));

===========================
// есть два объекта, связанные прототипом. написать функцию, которая выводит свойства только дочернего объекта
// доп. вопрос1: использовать самовызывающуюся функцию.

// способ 1
// const obj1 = {
//   prop1: false,
// };
// const obj2 = {
//   prop2: true,
//   __proto__: obj1,
// };
// function f(obj) {
//   for (let prop in obj) {
//     if (obj2.hasOwnProperty(prop)) {
//       console.log(prop, obj[prop]);
//     }
//   }
// }
// f(obj2);

// доп1
// const obj1 = {
//   prop1: false,
// };

// const obj2 = {
//   prop2: true,
//   __proto__: obj1,
// };

// (function f(obj) {
//   for (let prop in obj) {
//     if (obj2.hasOwnProperty(prop)) {
//       console.log(prop, obj[prop]);
//     }
//   }
// })(obj2);

===========================
// написать функцию, которая на вход получает массив, оставляет в этом массиве только уникальные значения и возвращает его.
// const arr = [1, 2, 3, 2, 4, 4];
// function f(arr1) {
//   ??????????????
// }
// console.log(f(arr));

// способ1
// const arr = [1, 2, 3, 2, 4, 4];
// function f(arr1) {
//   return [...new Set(arr1)];
// }
// console.log(f(arr));

// способ2
// const arr = [1, 2, 3, 2, 4, 4];
// const f = (arr1) => [...new Set(arr1)];
// console.log(f(arr));

===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================