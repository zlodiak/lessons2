суть NX в том, что в одной области живут несколько приложений и набор библиотек, разделяемых между этими приложениями.

приложения находятся в каталоге apps. библиотеки находятся в каталоге libs.

каждая библиотека это полноценное angular-приложение, которое содержит один или несколько компонентов. оно имеет свой index.ts файл, а также projects.json, в котром указывается путь до каталога библиотеки: 

	"sourceRoot": "libs/orders/src",

libs имеет tsconfig.base.json, в котором стандартным способом прописываются пути до index.ts каждой библиотеки:

    "paths": {
      "@angular-monorepo/orders": ["libs/orders/src/index.ts"],
      "@angular-monorepo/products": ["libs/products/src/index.ts"],
      "@angular-monorepo/shared-ui": ["libs/shared/ui/src/index.ts"]
    }

в свою очередь он подключается в tsconfig.json определённого приложения:

	"extends": "../../tsconfig.base.json",

через пути tsconfig.base.json нужная библиотека импортируется в модуль или в автономный компонент:

	import { Component } from '@angular/core';
	import { ProductListComponent } from '@angular-monorepo/products';

	@Component({
	  standalone: true,
	  imports: [ProductListComponent],
	  selector: 'angular-monorepo-root',
	  templateUrl: './app.component.html',
	  styleUrls: ['./app.component.css'],
	})
	export class AppComponent {
	  title = 'inventory';
	}

далее библиотека используется путём встави в шаблон хост-тега библиотеки. данные передаются и получаются, например, при помощи синтаксиса квадратных скобок и всплывающих событий EventEmitter

-----

но так как библиотека это полноценный компонент, то его можно отобразить по определённому роуту. для этого в конфиге роутов использовать те же пути из tsconfig:

  {
    path: 'products',
    loadComponent: () =>
      import('@angular-monorepo/products').then((m) => m.ProductsComponent),
  },

-----

можно графически отобразить все составляющие NX:

	npx nx graph

запуск проекта:
	
	npx nx serve angular-store


===================================
можно запустить юнит-тесты только для изменённого с последнего коммита кода:

	git commit -a -m "some commit message"

	внести изменения

	npx nx affected -t test

можно посмотреть какие части приложения были затронуты после очередного изменения:

	ыnpx nx graph --affected



===================================
можно определить ограничения импорта одних частей в дрегие. для этого нужер каждую часть пометить тегами:

	в libs/orders/project.json:

		{
		  ...
		  "tags": ["type:feature", "scope:orders"],
		}

	затем в корневом .eslintrc.base.json определить ограничения:

		{
	        "sourceTag": "scope:orders",
	        "onlyDependOnLibsWithTags": [
	          "scope:orders",
	          "scope:products",
	          "scope:shared"
	        ]
	     },	

===================================
построение проекта с нуля:

	создать рабочее пространство при помощи: 

		npx create-nx-workspace

		при этом название проекта и прочая информация будет запрошена в форме диалога.

	запустить одно из приложений, которое является корневым:

		npx nx serve monor

		здесь nonor имя приложения в apps/monor


	в корневом package.json дополнить секцию запуска скриптов:

		"scripts": {
			"start": "nx serve",
			"build": "nx build",
			"test": "nx test"
		},	

	сгенерируем новый компонент:

		npx nx g @nx/angular:component apps/monor/src/app/components/nav

		здесь nav это имя компонента. 

		в процессе диалога будет спрошено название компонента, которое будет использоваться в шаблоне. важно, что к нему добавится префикс app-

	возможно, понадобится остановка демона:

		npx nx reset

	сгенерируем библиотеку:

		npx nx g @nx/angular:library libs/weather





===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
