какие книги прочитал в последнее время?

	Эффективный TypeScript: 62 способа улучшить код.
		подробно рассказывается о системе типов. о дженериках. разных вариантах защитников типов.  описывается разница между типами и интерфейсами.

	Reactive Programming with RxJS. sergi mansilla
		рассматриваются основы rxjs. а также паттернов observer и iterator, которые лежат в основе этой библиотеки. приводится пример графической игры-стрелялки.

	рефакторинг. мартин фаулер
		выборочно

	сайт learn.javascript.ru

	rxjs-in-action. paul daniels, luis atencio
		расказывается об основах: синхронных и асинхронных потоках, функциональном подходе в контексте rx. сравниваются промисы и реактивный подход. рассматриваются различные способы отлова исключений.	


	чистая архитектура. роберт мартин
	чистый код. роберт мартин
	совершенный код. стив маконелл
	паттерны ООП. банда четырёх
	рефакторинг. фаулер
		

===============================
что изучил в последнее время?

	синтаксис async/await
	до этого использовал только промисы

	git rebase

	custom providers в angular

	grid css

	автономные компоненты в angular

	научился работать с IDEA

===============================
какие ресурсы регулярно посещаете?

	learn.javascript.ru

	MDN: developer.mozilla.org

	дока


===============================
С какими техническими сложностями вы сталкивались в последнее время и как решили эту задачу?

	построить архитектуру для множества однотипных страниц, которая исключала бы дублирование кода.

	дублирование запросов при использовании asyncPipe без rxJs-share()

	нужно было наложить затемнение на правую часть горизонтального меню, но чтобы при этом все кнопки оставались кликабельными. я при помощи абсолютного позиционирования и наложил градиентный блок и прописал css-правило pointer-events


	добавить bearer для того чтобы сервер смог подтвердить смену пароля 

	использовал паттерн facade для наведения порядка в большом наборе сервисов.

	замена в проекте классических сервисов на стейт-менеджер


===============================
что делать, если увидел плохой кусок кода, который не относится к твоей задаче?

	1. сказать об этом на дейли и поместить в беклог соответствующую задачу
	2. предложить тимлиду отдать эту задачу тебе
	3. если задача совсем мелкая, то исправить самому

===============================
как оценить задачи, если несколькок раз сроки были сорваны?

	1. узнать список трудных для конкретного разработчика тем и далее назначать их другому разработчику.
	2. уволить разработчика
	3. увеличить частоту отчётов для конкретного разработчика

===============================
типы задач, которые приходилось решать?

	работа с API яндекс карт.
	доработка авторизации для входа в интернет-банк.
	вывод статистики при помощи библиотеки D3.
	разработка PWA
	реализация пуш-уведомлений.
	разработка системы управления заявками.
	написание тестов по безопасности js-приложений.

	— заменил template driven формы на reactive driven формы
	— сделал унифицированную систему всплывающих сообщений на основе интерцепторов
	— оптимизировал страницы, которые выводили очень большое количество информации о поездках
	— замена material-компонент на taiga-компоненты.
	— сделал адаптивную вёрстку под различные мобильные устройства


===============================
наиболее интересная задача.

	разработка виджета на основе яндекс карт. виджет отображал различные данные, полученные при помощи алгоритмов машинного обучения.



	
===============================
в основном приходилось решать рутинные задачи, связанные с формами, с круд-операциями, добавлением всяких модальных окон и вообще виджетов из графических библиотек типа primeNg и angular material.

иногда делал несложный рефакторинг типа помещения групп компонентов в отдельные фасады. добавление слоя-адаптера.

переводил части приложения на использование стейт-менеджера NgRx .

===============================
===============================
===============================
===============================
===============================
===============================
===============================
===============================
===============================
===============================
===============================
===============================