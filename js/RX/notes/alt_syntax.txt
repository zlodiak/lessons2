	const s1 = interval(2000);
	const s2 = interval(2000);

	s1.subscribe(console.log);
	s2.subscribe(d => {
	  console.log('---', d);
	});

в результате обе подписки выводят последовательности


=========================================
	throwError('This is an error!').subscribe(
	  d => { console.log(d) },
	  err => { console.log(err) },
	  () => { console.log('complete') }
	);

	throwError('This is an error!').subscribe({
	  next: val => console.log(val),
	  complete: () => console.log('Complete!'),
	  error: val => console.log(`Error: ${val}`)
	});

в результате срабатывает блок ошибки. но второй вариант более многословный. в нём важно правильно написать названия ключей!


=========================================
альтернативный синтаксис записи оператора в блоке pipe. показан пример с map, но это общий случай:

	const updateGame = (obj) => (
	  obj.key1 = 333,   	// action
	  obj.key2 = 444,   	// action
	  obj                 	// return
	);

	const s1 = of({key1: 111, key2: 222}).pipe(
	  map(updateGame)
	);

	s1.subscribe(res => {
	  console.log(res)
	});

	// OUTPUT:
	// {key1: 333, key2: 444}


Замена фигурных скобок круглыми - это вариант отсутствия фигурных скобок, когда тело функции состоит из одного выражения.

Оператор запятая выполняет каждый из его операндов (слева направо) и возвращает значение последнего операнда.

	let x = 1;
	x = (x++, x);
	console.log(x);
	// expected output: 2


=========================================
forkJoin может отправлять результат в subscribe или в виде объекта, 

	const example = forkJoin(
	  {
	    q: of('Hello'),
	    w: of('World').pipe(delay(1000)),
	    e: interval(1000).pipe(take(3)),    
	  }
	);
	const subscribe = example.subscribe(val => console.log(val));
	// OUTPUT: {q: "Hello", w: "World", e: 2}

или в виде массива:

	const example = forkJoin(
	  of('Hello'),
	  of('World').pipe(delay(1000)),
	  interval(1000).pipe(take(3)),
	);
	const subscribe = example.subscribe(val => console.log(val));
	// OUTPUT: ["Hello", "World", 2]


=========================================
три равнозначных способа записать оператор combineLatest:

const Game = combineLatest(StarStream, SpaceShip, Enemies, function(stars, spaceship, enemies) {
  return { stars, spaceship, enemies };
}).pipe(
  sample(interval(SPEED))
)

const Game = combineLatest(StarStream, SpaceShip, Enemies).pipe(
  map(v => {
    return { 
      stars: v[0], 
      spaceship: v[1], 
      enemies: v[2], 
    };
  }),
  sample(interval(SPEED))
)

const Game = combineLatest(StarStream, SpaceShip, Enemies).pipe(
  map(([stars, spaceship, enemies]) => {
    return { 
      stars: stars, 
      spaceship: spaceship, 
      enemies: enemies, 
    };
  }),
  sample(interval(SPEED))
)


=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================