функция скаллинга отображает множество реальных координат на множество видимых координат(ширину/высоту холста)

==============================
чтобы сменить систему координат(начало переместить в нижний левый угол) нужно сделать:

1. передвинуть ось X вниз так: attr('transform', 'translate(0,' + (height - 1) + ')')

2. изменить функцию Yскаллинга так: .range([0, height]); -> .range([height, 0]);

==============================
чтобы добавить отступы по краям графика нужно сделать следующее:

1. определить величины отступов:
const paddings = {
	left: 20,
	top: 10,
	right: 10,
	bottom: 20
};

2. изменить скаллинг по Х: .range([0, width]); -> .range([paddings.left, width - paddings.right]);

3. изменить скаллинг по Y: .range([height, 0]); -> .range([height - paddings.bottom, 0 + paddings.top]);

4. сместить ось X: .attr('transform', 'translate(0,' + (height - 1) + ')') -> .attr('transform', 'translate(0,' + (height - paddings.bottom) + ')')

5. сместить ось Y: .attr('transform', 'translate(' + paddings.left + ',0)')

==============================
чтобы добавить гриды(при условии, что ticks смотрят ВНЕ) нужно:

1. 
svg.selectAll('.x-axis-group .tick')
	  .append('line')
	  .classed('grid-line', true)
	  .attr('x1', 0)
	  .attr('y1', 0)
	  .attr('x2', 0)
	  .attr('y2', -height + paddings.top + paddings.bottom)		// ЭТО ВАЖНО
	  .attr('shape-rendering', 'crispedges')
	  .attr('stroke-width', gridWidth)
	  .attr('stroke-opacity', gridOpacity)
	  .attr('stroke', gridColor);

2.
svg.selectAll('.y-axis-group .tick')
	  .append('line')
	  .classed('grid-line', true)
	  .attr('x1', 0)
	  .attr('y1', 0)
	  .attr('x2', width - paddings.right - paddings.left)		// ЭТО ВАЖНО
	  .attr('y2', 0)
	  .attr('shape-rendering', 'crispedges')
	  .attr('stroke-width', gridWidth)
	  .attr('stroke-opacity', gridOpacity)
	  .attr('stroke', gridColor);	 	  

==============================
чтобы добавить линию нужно создать функцию линии и применить её:
const line = d3.line()
		            .x(d => xScale(d[0]))
		            .y(d => yScale(d[1]));

svg.append('g')
		.classed('path', true)
		.append('path')
		.attr('d', line(points))
		.style('fill', 'none')
		.style('stroke', pointColor)
		.style('stroke-width', lineWidth);	

==============================
чтобы нарисовать вертикальную гисторгамму нужно:

1. отрисовать высоту блоков: 
function renderData() {
	svg.selectAll(null)
			.data(points)
			.enter('')
			.append('circle')
		  .attr('cx', d => xScale(d[0]))
		  .attr('cy', d => yScale(d[1]))
		  .attr('r', radius)
		  .attr('fill', pointColor);
}

->

function renderData() {
	svg.selectAll(null)
			.data(points)
			.enter('')
			.append('rect')
		  .attr('x', d => xScale(d[0]))
		  .attr('y', d => yScale(d[1]))
		  .attr('fill', barColor)
		  .attr('width', width / points.length)
		  .attr('height', d => height - yScale(d[1]) - paddings.bottom)
		  .attr('stroke', pointColor)
		  .attr('stroke-width', lineWidth);	             		
}

2. добавить длины оси X


==============================
существует функция, которая делает выборку и удаляет её результат: 
d3.select(".y-axis-group .domain").remove();


==============================
пример кривой, построенной по точкам(сплайн). для v5.7.0
https://jsfiddle.net/edzk6m4c/

далее локаль установлена RU.

важно сразу установить стили кривой через js или через css:
https://stackoverflow.com/questions/53425931/how-make-linear-interpolation


    d3.json('https://unpkg.com/d3-time-format@2/locale/ru-RU.json').then((locale) => {
      d3.timeFormatDefaultLocale(locale);
      this.xScale = d3.scaleLinear()
      .domain([
        d3.min(this.graphData, d => +d['dateUnix']),
        d3.max(this.graphData, d => +d['dateUnix']) 
      ])
      .range([this.paddingYaxis, this.w - this.padding]);

      this.yScale = d3.scaleLinear()
        .domain([
          0, // d3.min(this.graphData, d => +d['estimatedPpm'] - this.yPeriod),
          d3.max(this.graphData, d => +d['estimatedPpm'] + this.yPeriod)        
        ])
        .range([this.h - this.padding, this.tickSize]);

      this.xAxis = d3.axisBottom(this.xScale)
        .tickValues(this.graphData.map(x => x.dateUnix))
        .tickSize(this.tickSize)
        .tickFormat(d3.timeFormat('%d %B'))
        .tickPadding(this.tickPadding);

      this.yAxis = d3.axisLeft(this.yScale)
        .tickSizeInner(-(this.w - this.paddingYaxis - this.tickSize * 2))
        .tickSizeOuter(0)
        .tickPadding(this.tickPadding)
        .tickFormat(d3.format(' '));

      this.svg.append('g')
        .attr('class', 'x-axis-group')
        .attr('transform', 'translate(0,' + (this.h - this.padding) + ')')
        .call(this.xAxis);

      this.svg.append('g')
        .attr('class', 'y-axis-group')
        .attr('transform', 'translate(' + this.paddingYaxis + ', 0)')
        .call(this.yAxis);

      d3.select(".y-axis-group .domain").remove();

      var line = d3.line()
        .x((d, i) => { return this.xScale(d.dateUnix); })
        .y((d) => { return this.yScale(d.estimatedPpm); })
        .curve(d3.curveMonotoneX);      

      this.svg.append("path")
        .datum(this.graphData)
        .attr('d', line)
        .attr('fill', 'none')
        .attr('stroke', 'blue')
        .attr('stroke-width', '2px');

      this.svg.selectAll('rect')
        .data(this.graphData)
        .enter()
        .append('rect')
        .attr('x', d => this.xScale(d.dateUnix) - this.pointSize / 2)
        .attr('y', d => this.yScale(d.estimatedPpm) - this.pointSize / 2)
        .attr('width', d => this.pointSize)
        .attr('height', d => this.pointSize)
        .attr('fill', this.pointFill);
    });

==============================
изменить локаль:
    // d3.json('https://unpkg.com/d3-time-format@2/locale/ru-RU.json').then((locale) => {
    //   d3.timeFormatDefaultLocale(locale);
    // });

    d3.timeFormatDefaultLocale({
      "dateTime": "%A, %e %B %Y г. %X",
      "date": "%d.%m.%Y",
      "time": "%H:%M:%S",
      "periods": ["AM", "PM"],
      "days": ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
      "shortDays": ["вс", "пн", "вт", "ср", "чт", "пт", "сб"],
      "months": ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"],
      "shortMonths": ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек"]
    });

==============================
==============================
==============================
==============================
==============================
==============================
==============================
==============================
==============================
==============================
==============================
==============================