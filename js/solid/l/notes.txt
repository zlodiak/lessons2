Подтипы должны быть заменяемы их исходными типами.

рассмотрим ошибоочный пример l_wrong.js: существует хранилище пиццы и два потребителя, связанные наследованием. оба имеют метод eat(), но он выполняет разные действия. 

оба этих метода отработают без ошибок, но пользователь этого кода получит неожиданный результат потому что в наследние переопределён функционал. то есть изменился смысл метода, его суть.

то есть несоблюдение этого принципа привело к неочевидному коду. в больших программах это критично.

в примере l_right.js: LSP соблюдён потому что FatCustomer наследует метод eat() без изменений. а добавленный метода sayThanks не нарушает его функциональность.

рассмотрим пример l_right2.js: FatCustomer наследует метод eat() без изменений, но дополняет его логгером. этот пример соответствует SLP потому что оба метода выполняют одно и тоже действие, а логгер этот функционал не нарушает.

Принцип подстановки чаще всего используется в контексте наследования, однако суть принципа связана не с наследованием, а с поведенческой совместимостью объектов. то есть должны быть возможность в клиентском коде класс родителя заменить классом наследника и при этом клиентский код должен выдать тот же результат. это иллюстрирует l_right3.js