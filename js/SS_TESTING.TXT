0 - не знаю
1 - слабо знаю
2 - знаю

ES6:==================================================================================

1. Константы и блочные переменные (2)
	const работает только с примитивами. их невозможно изменить. но возможно изменять свойства объекта.
	появилась область видимости на уровне лока. чтобы её использовать нужно применять let, const

2. Стрелочные функции (2)
	() => { return console.log(1); }
	если опускаются фигурные скобки, то return не обязателен
	не существует собственного this:
		function Person() {
		    this.age = 0;
		    setInterval(() => { this.age++; }, 1000);
		}

3. Значение по умолчанию и rest оператор (1)
	var log = function(a, b, c) { console.log(a, b, c); }
	log(...['Spread', 'Rest', 'Operator']); // spread

	var log = function(a, b, c = 3) { console.log(a, b, c); }
	log(1, 2);

	var log = function(a, b, ...rest) { console.log(a, b, rest); }
	log('Basic', 'rest', 'operator', 'usage'); // Basic rest ['operator', usage]

4. Интерполяции (2)
	var age = 25;
	console.log(`I am ${age} years old`); 

5. Свойства объектов (2)
	let a = 1, b = 2;
	let obj = { a, b };

	const obj = {
	  a() { /* function body */ },
	  b() { /* function body */ }
	};

6. Деструктуризация (1)
	let [firstName, lastName] = ["Илья", "Кантор"];
	let {var1, var2} = {var1: …, var2: …};

7. Модульность (2)
	export const MY_CONSTANT = 123;			// calculator/lib/calc.js
	import { MY_CONSTANT } from 'lib/calc';	// calculator/main.js

	Ключевое слово export можно ставить:
	перед объявлением переменных, функций и классов.
	отдельно, при этом в фигурных скобках указывается, что именно экспортируется.	

8. Классы и наследование (1)
	class Point {
	    constructor(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	    toString() { return '(' + this.x + ', ' + this.y + ')'; }
	}
	class ColorPoint extends Point {
	    constructor(x, y, color) {
	        super(x, y); 
	        this.color = color;
	    }
	    toString() {  return super.toString() + ' in ' + this.color;  }
	}

9. Symbol (0)
	var sym = Symbol("foo");
	var obj = {[sym]: 1};
	obj[sym];		// 1	
	Symbol("foo") === Symbol("foo"); // false
	// не участвуют в итерациях. уникальны. нужны чтобы можно было задать уникальное свойство объекта
	Object.getOwnPropertySymbols(obj);	// получить все символьные свойства объекта

10. Итераторы (2)
	// строки, массивы это итерируемые объекты. у каждого из них есть свойство [Symbol.iterator]
	// оно возвращает {value: string, done: boolean}
	let coll = ['qwerty', 'asdfhg'];
	let iter = coll[Symbol.iterator]();
	console.log(iter.next());
	console.log(iter.next());
	console.log(iter.next());	

	// возможно создать свой итерируемый объект. для этого нужно определить в нём [Symbol.iterator]()
	let gen = {
		[Symbol.iterator]: function() {
			let id = 1;
			return{
				next: function() {
					let value = id > 10 ? undefined : id++;
					let done = !value;
					return {value, done};
				}
			}
		}
	}
	for (let id of gen) {	console.log(id); }	

11. Генераторы (0)

12. Map, WeakMap (2)
	let map = new Map();
	map.set('1', 'str1');   // ключ-строка
	map.set(1, 'num1');     // число
	alert( map.get(1)   ); // 'num1'
	alert( map.get('1') ); // 'str1'

	// WeakMap: если ключ-объект удалён, то значение тоже удаляется сборщиком мусора
	let map = new WeakMap();
	let o1 = {a: 1};
	let o2 = {b: 1};
	map.set(o1, 'str1');   
	map.set(o2, 'num1');     
	map.delete(o1);
	console.log(map.has(o1));	// false
	console.log(map.has(o2));	// true	

13. Set, WeakSet (2)
	// добавляются только уникальные значения
	let set = new Set();	
	let q = 'q';
	let w = 'w';
	let e = 'q';
	set.add(q);
	set.add(w);
	set.add(e);
	console.log(set);	// q w

	// для удалённого ключа-объекта удаляется и значение	
	let set = new WeakSet();	
	let q = {name: "Вася"};
	let w = {name: "иван"};
	let e = {name: "петя"};
	set.add(q);
	set.add(w);
	set.add(e);
	set.delete(e);
	console.log(set);	// {name: "Вася"} {name: "иван"}

14. Типизированные массивы (0)

15. Новые встроенные методы ()

16. Промисы (2)
	let promise = new Promise((resolve, reject) => {
	  setTimeout(() => {  resolve("result"); }, 1000);
	});
	promise.then(
    result => { alert("Fulfilled: " + result); },
    error => { alert("Rejected: " + error); }
  );
  можно чейнить. 
  нет состояния гонки между прикреплением обработчика и его выполнением.
  throw new Error("o_O"); == reject

17. Proxy (0)

18. Reflect (0)

19. Intl локализация (0)

TS:==================================================================================

Типы все базовые типы ()
Интерфейсы создание, композиция, наследование ()
Классы наследование, абстрактные классы, модификаторы доступа в классах ()  
Enums числовые, текстовые ()  
Generics зависимость от типа ()  
Декораторы class, method, property, accessor, parameter ()  
Module Resolution Import, export, import *, import {}, import '' ()   
Итераторы и генераторы ()      
Модули ()    
Namespaces ()

A2+:==================================================================================

Компоненты: 
	Создание компонент (2)
		для создания компонента можно использовать ng g c PATH. или руками создать файл компонента, импортировать его в module и добавить в секцию declarations. 
		если есть роутинг, то прописать роут или в module, или вынести в отдельный файл и импортировать в module
	Metadata ()
	Жизненный цикл ()
	функции жизненного цикла ()  

Привязка данных: Data binding (2)  

Получение и передача данных: Input, Output (2)

Доступ к DOM: ViewChild, ContentChild (1)  

Инкапсуляция стилей компоненты, 
специальные селекторы (host, deep) ()  
   
Работа с событиями    
	Работа с событиями: HostListener, HostBinding (1)  
		HostListener используется в директиве для связывания события DOM и метода директивы.
		HostBinding используется в директиве для связывания свойства элемента со свойством класса. геттер возвращает свойство класса.
	Директивы привязанные к событиям ()  
   
Динамические компоненты    
	Создание динамических компонент,  ComponentFactoryResolver, ()   
   
Директивы     
	Создание директив, отличие от компонент, Metadata ()  
	Директивы из коробки ()  
	Структурные директивы, Атрибутные директивы ()  
   
Сервисы    
	Создание сервисов, Metadata ()  
	Injectable ()  
	Сервисы из коробки (1)  
		существует несколько готовых сервисов, которые можно заинжектить и использовать.

		ElementRef служит для получения ссылки на элементу компонента. одно из применений - менять стили этого элемента: this.elementRef.nativeElement.style.backgroundColor = 'yellow';

		Renderer служит для манипуляция существующих элементов: 
		установка атрибутов: this.renderer.setProperty(inputElement, 'checked', true);
		добавление новых элементов в DOM: this.renderer.appendChild(parent, inputElement);
		добавление текста в элемент: this.renderer.appendChild(buttonElement, text);
		добавление класса: this.renderer.addClass(buttonElement, 'btn-large');
		добавление стилей: renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'yellow');

		пример генерации элементов и добавления на страницу:
    const buttonElement = this.renderer2.createElement('button');
    const text = this.renderer2.createText('Text');
    this.renderer2.appendChild(buttonElement, text);
    this.renderer2.appendChild(this.elementRef.nativeElement, buttonElement);		

    TemplateRef служит для ссылки на кусок разметки, который пока не виден в DOM, но который можно использовать(например добаить в какой-нибудь элемент).
    связь осуществляется так: @ViewChild('tpl1') tpl1: TemplateRef<any>;
	Injector ()  
	   
HTTP запросы ()    
Interceptors ()  
Сервис HttpClient, HttpServer отличие ()  
   
Модули   
	Модули, NgModule ()    
	Создание модуля, Metadata ()  
	imports, providers, declarations, entry component ()  
	Lazy Loading Modules ()  
	   
Роутинг    
	Конфигурация роутинга ()  
	RouterOutlet ()   
	Одноуровневый роутинг, дочерний роутинг ()  
	Componentless Routes ()   
	Guards ()   
	Навигация в коде и html ()  
	Resolver ()   
	События роутинга ()  
   
Работа с формами     
	Reactive Forms ()  
	Template-driven forms ()  
	Валидация ()  
   
Механика    
	ChangeDetection (1)   
		после каждого изменения DOM, изменения значения переменной, аякс-запроса, timers запускается процесс change detection. он идёт сверху вних по компонентам.
		дереву компонентов в точности соответствует дерево view. по сути компонент вторичен, он просто использует то что есть в в view. можно управлять view из компонента при помощи ChangeDetectorRef. нужно импортировать и инжектить в конструкторе.
		view имеет состояние и набор ссылок на дочерние view. состояние можно менять при помощи ChangeDetectorRef.
		ChangeDetectorRef.detach() отменяет обнаружение изменений в компоненте и в его потомках. но при этом один раз срабатывает ngOnInit в потомках первого уровня.
		ChangeDetectorRef.reattach() включает обнаружение изменений.
		change detector при изменении значения в компоеннте сравнивает обновлённое значение со старым. как это в нём реализовано не особо важно, главное понимать, что происходит сравнение нового и старого значения.
	Module Bootstrapping ()  
	Angular dependency injection ()  
   
Pipe     
	Создание pipe (2)  
		кастомный pipe реализует интерфейс PipeTransform. то есть этот метод должен быть реализован. он первым параметром принимает значение из шаблона, остальные параметры опциональны(это параметри самого pipe), в шаблоне они разделяются знаком двоеточия
	стандартные pipe (2)   
		в ангуларе из коробки есть несколько стандартный pipes: date, currency, decimal, slice, lowercase и т.д. некторый могут принимать аргументы(slice:6:11)
	Chaining pipes (2)   
		в шаблоне к одному значению можно применить несколько pipe. выполняться они будут слева направо
	Async pipes (2)  
		работает с observables или с promises. подписываться не надо, async сам получает результат и отписывается когда поток закрывается.
	pure pipes (2)
		отслеживают изменения только примитивных типов или ссылок на объекты. изменения внутри объектов из соображений производительности не отслеживаются
	not pure pipes (2)  
		при помощи параметра pure: false можно заставить pipe отслеживать изменения внутри объекта.

   
Анимация    
	trigers, state, transition, animate ()  
