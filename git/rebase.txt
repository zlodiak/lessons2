нужно ветку feature заребейсить в ветку master. 

для этого переключаемся на ветку feature и вливаем в ветку feature актуальную ветку master:

	git rebase master

получаем конфликт.

	# resolve conflict
	git add .
	git rebase --continue
	# возможно, придётся повторить эти операции для каждого коммита

переключаемся на ветку master и ребейсим в неё ветку feature:

	git rebase feature

теперь удаляем ставшую ненужной ветку feature:

	git br -d feature

в результате имеем одну цепочку коммитов, каждый бывший коммит ветки feature переписан, то есть включает в себя код из комммитов ветки master.

========================================
интерактивный rebase

	это изменение коммитов в ветке. например сжатие или удаление. нужно аргументом указать коммит, предшествующий тому, с которого мы начинаем изменения. 

	наприер в ветке 5 коммитов, мы хотим изменить только 3. для этого в аргументе указывает хэш четвёртого коммита. или HEAD~3

	далее откроется файл, в котором наиболее свежие коммиты будут внизу. вносим изменения, сохраняем файл.

	после этого хэши коммитов станут другими.

========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================