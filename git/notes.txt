индекс это файлы, добавленные командой git add
так смотреть какие файлы в индексе: $ git ls-files -s

commit -m '' фотографирование состояния

HEAD - снимок последнего коммита

=========================================
рабочий каталог + индекс + закоммиченные файлы

=========================================
однострочный формат лога: git log --pretty=oneline
git log --all --pretty=format:"%h %cd %s (%an)"
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short --all

=========================================
откат изменений:

1. если файлы изменены только в рабочем каталоге и стуктура каталога НЕ менялась, то
--изменяем файл--
git checkout .
git status
или
git reset --hard

2. если файлы изменены только в рабочем каталоге и стуктура каталога менялась
git clean -d -x -f

3. если файлы изменены и внесены в индекс при помощи git add , то
git reset HEAD .

4. если файлы уже добавлены в индекс и коммичены
git add .
git commit -m "Oops"
git revert HEAD


=========================================
Мои файлы с некоторых пор находятся в таком состоянии:
kalinin@lenovo /var/www/html/misc/tag $ git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
* 65db748 2018-02-08 | 1 (HEAD) [zlodiak]
* 5737dc6 2018-02-08 | sec (master) [zlodiak]
* 56359d3 2018-02-08 | f [zlodiak]

Как видите, head и master не совпадают. А я хотел бы чтобы совпадали и находились на коммите 65db748. Посоветуйте пожалуйста что делать?

git checkout master && git reset 65db748

=========================================
если нужно ввести пароль только один раз, вместо каждого раза, то:
git config --global http."https://gitlab.qqq.ru/".sslVerify false
глобал делать не обязательно и даже нежелательно
после этого можно клонировать репозиторий

=========================================
=========================================
откатить изменения на шаг назад:
git revert <hash last commit>

----------

слияне ветки:
находиться в главной ветке(в которую вливается другая) и выполнить:
git merge <name second branch>

----------

перетаскивание единичного коммита из другой ветки:
находиться в главной ветке и выполнить:
git cherry-pick <hash targer commit>
при это другая ветка остаётся без изменений(в отличие от merge)

----------

В большинстве случаев, после слияния можно безопасно удалить отработанную ветку
git branch -d имяВетки
В случае если git посчитает что ветка не была полностью слита(то есть остались незакомиченные изменения), он покажет предупреждение и откажется удалять ветвь. Если вы уверены что нужно удалить ветвь (используя git branch -D имяВетки) 

----------
To delete a remote branch, we do not use the "git branch" command - but instead "git push" with the "--delete" flag:
$ git push origin --delete feature/login

----------
Допустим, есть удаленная ветка feature, которой у вас ещё нет локально. нужно её стянуть на локальную машину

$ git branch --all
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature
  remotes/origin/master
Достаточно этого:

$ git checkout feature
Branch feature set up to track remote branch feature from origin.
Switched to a new branch 'feature'
Проверяем:

$ git branch --all
* feature
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature
  remotes/origin/master

----------
если нужно залить ветку на сервер, а её там пока не существует, то можно использовать один из двух способов:
git branch --set-upstream-to=origin/feature/delo-2742 feature/delo-2742
git push -u origin feature/delo-2742

и наоборот если требуется слить ветку с сервера на локальную машину, но на локальной машине её пока не существует, то:
git checkout --track origin/feature/DELO-2742
при этом создаётся ветка, кторая будет отслеживать удалённую  

----------
откатиться по истории ветки назад, при этом сохранив состояние рабочего каталога. после этого можно делать новую историю, которая начинается с того коммита, к котрому откатились:
git reset qwerty

----------
откатиться по истории ветки назад, при этом НЕ сохранив состояние рабочего каталога. после этого можно делать новую историю, которая начинается с того коммита, к котрому откатились:
git reset --hard qwerty

----------
Список Локальных и удаленных веток: 
git branch -a

Список удаленных веток: 
git branch -r

Список удаленных веток с инфо об отслеживаемых: 
git branch -vv


----------
----------
----------
----------
----------
----------
----------
----------

=========================================
сразу после клонирования выполнить
git submodule foreach "git checkout master && git pull"
эта команда в каждом модуле сделает переключение на последний коммит ветки мастер

=========================================
перетащить ветку master:

* 1c218b5 2018-03-18 | 2.1 (HEAD) [zlodiak]
| * bc5d457 2018-03-18 | 4 (master) [zlodiak]
| * 9f56892 2018-03-18 | 3 [zlodiak]
|/  
* 822f62f 2018-03-18 | 2 [zlodiak]
* fe454d3 2018-03-18 | 1 [zlodiak]

git branch feature bc5d457
git checkout -B master

в результате master будет там же где head

https://www.linux.org.ru/forum/general/14089033?lastmod=1521378553778#comment-14089154

=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================