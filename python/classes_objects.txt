#!/usr/bin/env python3

class A(object): 
  def foo1(self,x): 
    print("executing foo1(%s,%s)" % (self,x) )
    self.foo2()

  def foo2(self): 
    print('method foo2 ' + str(self.__class__))    

  @classmethod 
  def class_foo(cls,x): 
    print("executing class_foo(%s,%s)" % (cls,x) )
    cls.class_foo2()

  @classmethod 
  def class_foo2(cls):
    print('method class_foo2')

  @staticmethod 
  def static_foo(x): 
    print("executing static_foo(%s)" % x)

a = A() 

# при вызове метода экземпляра класс первым аргументом всегда неявно передаётся ссылка на экземпляр класса. 
# её можно использовать для вызова других методов этого экземпляра(foo2)
# при этом из экземпляра класса можно добраться до самого класса self.__class__
a.foo1(1)
a.foo2()

# при вызове метода класса первым аргументом неявно передаётся ссылка на класс
# её можно использовать для запуска других методов класса(class_foo2)
a.class_foo(2)
A.class_foo2()

# это просто метод класса никак не связанный с классом. ему не нужно передавать self/cls
A.static_foo(100)


# можно вызвать метод через класс. для этого первым аргументом нужно передать объект, который вызывается
A.foo1(a, 1)


==================================
два способа выполнить метод экземпляра:
class A(): 
  def __init__(self, x): 
    self.x = x

  def out(self):
    print(self.x)

a = A(2)
a.out()   # 10
A.out(a)  # 10

==================================
если переменная или метод не находится в экземпляре, то он ищется в классе:
class A(object): 
  x = 10

  @classmethod 
  def out(cls):
    cls.more()

  @classmethod 
  def more(cls):
    print('more' + str(cls.x))    

A.more()    # more10
A.out()     # more10

a = A()
a.out()     # more10
print(a.x)  # 10


==================================
переменная сначала ищется в экземпляре, затем в классе, затем в вышестоящих классах:
class B:
  y = 100

class A(B): 
  # y = 10

  # def __init__(self):
  #   self.y = 20

  def str(self):
    pass

a = A()
print(a.y)  # 100


то же самое касается методов
class B:
  y = 100

  @classmethod
  def pr(self):
    print('pr')

class A(B): 
  # y = 10

  # def __init__(self):
  #   self.y = 20

  def str(self):
    pass

a = A()
a.pr()  # pr



==================================
==================================
==================================
==================================
#!/usr/bin/env python3

class Person(object):
  type = 'man'

  def __init__(self, first_name, last_name):
    self.first_name = first_name
    self.last_name = last_name

  def who(self):
    return self.type

  def change(self):
    self.type = 'woman'

  def who2(self):
    return self.type    

  def delete(self):
    del self.type 

  def who3(self):
    return self.type       
  

p = Person('qqq', 'www')
print(p.who())
p.change()
print(p.who2())
p.delete()
print(p.who3())

# type из класса наследуется экземплярами. но экземпляр может переопределить type.
# однако экземпляр не может изменить переменную класса. поэтому после удаления переменной из экземплляра, опять берётся переменная класса

==================================

при вызове класс выполняет __new__, __init__ и возвращает экземпляр.
при вызове экземпляр выполняет __call__, если она определена

==================================
объект можно представить как строку при помощи: __str__, __repr__. если определены обе функции, то преимущество у __str__
разница между ними только в назначении. первый формат нужен для пользователя, второй для отладки.
кроме того в print выводится __str__

==================================
от object наследуются все остальные объекты. в том числе наследуются стандартные методы типа __eq__. их множно переопределять.

==================================
class Manager(Person):        # Наследование

def giveRaise(self, ...):     # Адаптация(тоже можно адаптировать конструктор). по сути вызывается метод родителя, но пеердаются другие аргументы

class Person:
  def giveRaise(self, percent):
    print(percent)
class Manager(Person):
  def giveRaise(self, percent):
    Person.giveRaise(self, percent + 10)  
p = Person()
p.giveRaise(1)  # 1
m = Manager()
m.giveRaise(1)  # 11

def someThingElse(self, ...): # Расширение. это просто добавление в наследника метода, которого нет в родителе

----------------------
следует различать перегрузку и переопределение методов.

пример переопределения.

class A:
    def go(self):
        print('A!')

class B(A):
    def go(self):
        print('B!')

в классе B go() должна была выводить A!, но благодаря переопределению выводит B!
важно то, что изменять свойства родителя из наследника нельзя, можно только переорпеделять

при переопределении можно изменять количество аргументов:
class A():
    def publ(self, a):
        print('publ', a)

class B(A):
    def publ(self, a, b):
        print('publb', a, b)

a = A()
print(a.publ(123)) # 123
b = B()
print(b.publ(123, 456)) # 123 456


пример переорпеделения переменной. важно то, что невозможно переопределить перееменную родителя:
class A():
    def __init__(self, q):
        self.q = q

class B(A):
    def __init__(self, q, w):
        super().__init__(q)
        self.w = w
        self.q = 444

a = A(111)
print(a.q) # 111
b = B(222, 333)
print(b.q, b.w) # 444 333
print(a.q) # 111


вот пример перегрузки(наследование не обязательно):
class A():
    def meth(self, q, w=None):
        if w is not None:
            print(q, w)
        else:
            print(q)

a = A()
print(a.meth(222))  # 222
print(a.meth(222, 333))  # 222 333


----------------------
Инкапсуляция — ограничение доступа к составляющим объект компонентам.
инкапсуляция действует только на уровне соглашений. знак подчёркивания перед переменной говорит, что она псевдоприватная. то есть может изменяться только методами этого класса.

----------------------
наследование связывает классы. при этом потомок содержит все методы и свойства родителя.
самый верхний объект для классов это object. из него наследуются методы типа __init__()

----------------------
полиморфизм это когда в различных классах методы с одинаковыми названиями выполняют различноые действия. эти классы не обязательно должны быть связаны наследованием.
перегрузка операторов это частный случай полиморфизма. при перегрузке может меняться количество аргументов. тип не имеет значения потому что в питоне динамическая типизация
например по умолчанию метод __str__() выводит содержимое объекта в специфическом формате. потому что этого метод определён в object. но если перегрузить этот метода так:
class qwert:
  def __str__(self):
    return 'hello'

, то print(qwert())   выведет hello. мы перегрузили __str__()

вот классический случай полиморфизма:

class Product:
    def __init__(self, title, logger):
        self.title = title
        self.logger = logger

    def setPrice(self, price):
        try:
            if price <= 0: raise Exception('wrong price!')
            self.price = price
        except Exception as e:
            self.logger.makeLog(e)

class LoggerFill:
    def __init__(self):
        self.log = []

    def makeLog(self, message):
        self.log.append(message)       

class LoggerPrint:
    def makeLog(self, message):
        print('error: ', message)



product = Product('phone', LoggerFill())
product.setPrice(-10)

product = Product('phone', LoggerPrint())
product.setPrice(-10)


==================================
композиция это когда один объект становится частью другого.
class A:
    def meth(self):
        print('go')

class B():
    def __init__(self):
        self.a = A()

b = B()
b.a.meth()

==================================
множественное наследование:
поиск идентификаторов производится вначале в производном классе, затем в базовом классе, расположенном первым в списке, далее просматриваются все базовые классы базового класса. Только после этого просматривается базовый класс, расположенный в списке правее, и все его базовые классы.

==================================
модификаторы доступа реализованы только на сонове соглашений об именовании:

class A():
    qqq = 4

    def __init__(self, name, age, gender): 
        self.name = name
        self._gender = gender        
        self.__age = age
        self.field =33

    def publ(self):
        return 'publ'

    def _protect(self):
        return '_protect'        

    def __privat(self):
        return '__privat'


a = A('tom', 20, 'male')

print(a.publ())
print(a._protect())
print(a.__privat())     # AttributeError: 'A' object has no attribute '__privat'

print(a.name)
print(a._gender)
print(a.__age)      # AttributeError: 'A' object has no attribute '__age'

print(a._A__age)


==================================
можно метод сделать свойством:
class A():
    def __init__(self, a):
        self.a = a

    @property
    def pro(self):
        return self.a

    def meth(self):
        return self.a

a = A(123)
print(a.pro) # 123
print(a.meth()) # 123

==================================
мелкая копия объекта(копируются только ссылки на объекты):

a = [[1, 2], [3, 4], [[22, 33], [44, 55]]]
s = a

a[2][1][0] = 9
print(a)
print(s)

# [[1, 2], [3, 4], [[22, 33], [9, 55]]]
# [[1, 2], [3, 4], [[22, 33], [9, 55]]]

---------

глубокая копия объекта(копируются объкты):

import copy

a = [[1, 2], [3, 4], [[22, 33], [44, 55]]]
s = copy.deepcopy(a)

a[2][1][0] = 9
print(a)
print(s)

# [[1, 2], [3, 4], [[22, 33], [9, 55]]]
# [[1, 2], [3, 4], [[22, 33], [44, 55]]]

суть в том, что в s лежит совсем другой объект

==================================
==================================
==================================
==================================
==================================
==================================
==================================
==================================
==================================
==================================