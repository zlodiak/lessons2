#!/usr/bin/env python3

class A(object): 
  def foo1(self,x): 
    print("executing foo1(%s,%s)" % (self,x) )
    self.foo2()

  def foo2(self): 
    print('method foo2 ' + str(self.__class__))    

  @classmethod 
  def class_foo(cls,x): 
    print("executing class_foo(%s,%s)" % (cls,x) )
    cls.class_foo2()

  @classmethod 
  def class_foo2(cls):
    print('method class_foo2')

  @staticmethod 
  def static_foo(x): 
    print("executing static_foo(%s)" % x)

a = A() 

# при вызове метода экземпляра класс первым аргументом всегда неявно передаётся ссылка на экземпляр класса. 
# её можно использовать для вызова других методов этого экземпляра(foo2)
# при этом из экземпляра класса можно добраться до самого класса self.__class__
a.foo1(1)
a.foo2()

# при вызове метода класса первым аргументом неявно передаётся ссылка на класс
# её можно использовать для запуска других методов класса(class_foo2)
a.class_foo(2)
A.class_foo2()

# это просто метод класса никак не связанный с классом. ему не нужно передавать self/cls
A.static_foo(100)


# можно вызвать метод через класс. для этого первым аргументом нужно передать объект, который вызывается
A.foo1(a, 1)


==================================
два способа выполнить метод экземпляра:
class A(): 
  def __init__(self, x): 
    self.x = x

  def out(self):
    print(self.x)

a = A(2)
a.out()   # 10
A.out(a)  # 10

==================================
если переменная или метод не находится к экземпляре, то он ищется в классе:
class A(object): 
  x = 10

  @classmethod 
  def out(cls):
    cls.more()

  @classmethod 
  def more(cls):
    print('more' + str(cls.x))    

A.more()    # more10
A.out()     # more10

a = A()
a.out()     # more10
print(a.x)  # 10


==================================
переменная сначала ищется в экземпляре, затем в классе, затем в вышестоящих классах:
class B:
  y = 100

class A(B): 
  # y = 10

  # def __init__(self):
  #   self.y = 20

  def str(self):
    pass

a = A()
print(a.y)  # 100


то же самое касается методов
class B:
  y = 100

  @classmethod
  def pr(self):
    print('pr')

class A(B): 
  # y = 10

  # def __init__(self):
  #   self.y = 20

  def str(self):
    pass

a = A()
a.pr()  # pr



==================================
==================================
==================================
==================================
#!/usr/bin/env python3

class Person(object):
  type = 'man'

  def __init__(self, first_name, last_name):
    self.first_name = first_name
    self.last_name = last_name

  def who(self):
    return self.type

  def change(self):
    self.type = 'woman'

  def who2(self):
    return self.type    

  def delete(self):
    del self.type 

  def who3(self):
    return self.type       
  

p = Person('qqq', 'www')
print(p.who())
p.change()
print(p.who2())
p.delete()
print(p.who3())

# type из класса наследуется экземплярами. но экземпляр может переопределить type.
# однако экземпляр не может изменить переменную класса. поэтому поле удаления переменной из экземплляра, опять берётся переменная класса

==================================

при вызове класс выполняет __new__, __init__ и возвращает экземпляр.
при вызове экземпляр выполняет __call__, если она определена

==================================
объект можно представить как строку при помощи: __str__, __repr__. если определены обе функции, то преимущество у __str__
разница между ними только в назначении. первый формат нужен для пользователя, второй для отладки.
кроме того в print выводится __str__

==================================
от object наследуются все остальные объекты. в том числе наследуются стандартные методы типа __eq__. их множно переопределять.

==================================
class Manager(Person):        # Наследование
def giveRaise(self, ...):     # Адаптация(тоже можно адаптировать конструктор)
def someThingElse(self, ...): # Расширение

----------------------
перегрузка методов.

class A:
    def go(self):
        print('A!')

class B(A):
    def go(self):
        print('B!')

в классе B go() должна была выводить A!, но благодяре перегрузке выводит B!

----------------------
инкапсуляция действует только на уровне соглашений. знач подчёркивания перед переменной говорит, что она псевдоприватная. то есть может изменяться только методами этого класса.

----------------------
наследование связывает классы. при этом потомок содержит все методы и свойства родителя.
самый верхний объект для классов это object. из него наследуются методы типа __init__()

----------------------
полиморфизм это когда в различных классах методы с одинаковыми названиями выполняют различноые действия. эти классы не обязательно должны быть связаны наследованием.
перегрузка операторов это частный случай полиморфизма.
например по умолчанию метод __str__() выводит содержимое объекта в специфическом формате. потому что этого метод определён в object. но если перегрузить этот метода так:
class qwert:
  def __str__(self):
    return 'hello'

, то print(qwert())   выведет hello. мы перегрузили __str__()

==================================
множественное наследование:
поиск идентификаторов производится вначале в производном классе, затем в базовом классе, расположенном первым в списке, далее просматриваются все базовые классы базового класса. Только после этого просматривается базовый класс, расположенный в списке правее, и все его базовые классы.

==================================
==================================