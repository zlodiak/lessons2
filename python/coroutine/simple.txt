#!/usr/bin/env python3

def subgen():
  print('first iteration')
  message = yield
  print('second iteration')
  print('recieved', message)

# 1
g = subgen()

# 2
g.send(None)
# next(g)

# 3
g.send('ok')

print(g)

# при первой итерации выполняется то, что до yield
# при втрой итерации в yield передаётся "ок" и выполняется всё что после yield



корутин нужно сначала:
1. создать
2. проинициализировать
3. отправить значение

он будет работать так же ка кгенератор. то есть отдавать значения пошагово


======
чтобы избавиться от исключения по завершению корутины можно зациклить:
def subgen():
    while True:
        print('first iteration')
        message = yield
        print('second iteration')
        print('recieved', message)

# 1
g = subgen()

# 2
g.send(None)

# 3
g.send('ok')

print(g)


===========
отличие от генератора в том, что корутине мы при каждом вызове отправляем значение. а генератору только один раз - при инициализации.
===========

https://ru.stackoverflow.com/questions/950279/%D0%9D%D1%83%D0%B6%D0%BD%D0%BE-%D0%BB%D0%B8-%D0%B2-%D0%BA%D0%BE%D1%80%D1%83%D1%82%D0%B8%D0%BD%D0%B5-%D0%BF%D0%B8%D1%81%D0%B0%D1%82%D1%8C-yield-%D0%B4%D0%B2%D0%B0-%D1%80%D0%B0%D0%B7%D0%B0/950451#950451
