composite применяется для формирования древовидной структуры. например, она может понадобиться для построения дерева-меню.

class Component():
    @property
    def parent(self):
        return self._parent

    @parent.setter
    def parent(self, parent):
        self._parent = parent


class Leaf(Component):
    def is_composite(self):
        return False

    def operation(self):
        return "Leaf"


class Composite(Component):
    def __init__(self):
        self._children = []

    def add(self, component):
        self._children.append(component)
        component.parent = self

    def remove(self, component):
        self._children.remove(component)
        component.parent = None

    def is_composite(self):
        return True

    def operation(self) -> str:
        results = []
        for child in self._children:
            results.append(child.operation())
        return "  Branch: " + '+'.join(results)


simple = Leaf()
print("RESULT:", simple.operation(), end="\n")

tree = Composite()
branch1 = Composite()
branch1.add(Leaf())
branch1.add(Leaf())
branch2 = Composite()
branch2.add(Leaf())
tree.add(branch1)
tree.add(branch2)
print("RESULT:", tree.operation(), end="\n")