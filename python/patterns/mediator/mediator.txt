паттерн мидиатор организует централизованную коммуникацию между объектами. таким образом если объект хочет изменить другой оъект, то он сначала извещает об этом медиатор, а тот уже передаёт сигнал. 

в примере ниже объекты создаются без указания медиатора. а вот при инициализации медиатора объектами происходит запись указателя на медиатор в свойство объекта. соответственно каждый объект имеет геттер и сеттер для свойства mediator.

class M:
    def __init__(self, c1, c2):
        self.c1 = c1
        self.c2 = c2
        self.c1.mediator = self
        self.c2.mediator = self

    def notify(self, type):
        if type == 'c1_a':
            self.c2.result()
        else:
            self.c1.result()

class C1:
    def action(self):
        print('c1_a')
        self.mediator.notify('c1_a')

    def result(self):
        print('result_c1')        

class C2:
    def action(self):
        print('c2_a')
        self.mediator.notify('c2_a') 

    def result(self):
        print('result_c2')


c1 = C1()
c2 = C2()
m = M(c1, c2)

c1.action()
c2.action()