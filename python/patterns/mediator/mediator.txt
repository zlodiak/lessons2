паттерн мидиатор организует централизованную коммуникацию между объектами. таким образом если объект хочет изменить другой оъект, то он сначала извещает об этом медиатор, а тот уже передаёт сигнал. 

в примере нижу объекты создаются без указания медиатора. а вот при инициализации медиатора объектами происходит запись указателя на медиатор в свойство объекта. соответственно каждый объект имеет геттер и сеттер для свойства mediator.

class ConcreteMediator:
    def __init__(self, component1, component2):
        self._component1 = component1
        self._component1.mediator = self
        self._component2 = component2
        self._component2.mediator = self
 
    def notify(self, sender, event):
        if event == "A":
            print("Mediator reacts on A and triggers following operations:")
            self._component2.do_c()
        elif event == "D":
            print("Mediator reacts on D and triggers following operations:")
            self._component1.do_b()
            self._component2.do_c()
 
class BaseComponent:
    def __init__(self, mediator = None):
        self._mediator = mediator
 
    @property
    def mediator(self):
        return self._mediator
 
    @mediator.setter
    def mediator(self, mediator):
        self._mediator = mediator
 
class Component1(BaseComponent):
    def do_a(self):
        print("Component 1 does A.")
        self.mediator.notify(self, "A")
 
    def do_b(self):
        print("Component 1 does B.")
        self.mediator.notify(self, "B")
 
class Component2(BaseComponent):
    def do_c(self):
        print("Component 2 does C.")
        self.mediator.notify(self, "C")
 
    def do_d(self):
        print("Component 2 does D.")
        self.mediator.notify(self, "D")
 
c1 = Component1()
c2 = Component2()
mediator = ConcreteMediator(c1, c2)
 
print("Client triggers operation A.")
c1.do_a()
 
print("\n", end="")
 
print("Client triggers operation D.")
c2.do_d()