class Obj():
  def __init__(self, word):
    self.word = word

  def __iter__(self):
    for l in self.word:
      yield l

obj = Obj('sergey')
it = iter(obj)

for l in obj:
  print(l)

# альтернативный способ перебора
# print(next(it))
# print(next(it))
# print(next(it))
# print(next(it))

в итерируемом объекте итератор можно заменить генератором. генератор тоже реализует интефейс итератора.

генератор это функция, которая приостанавливает действие после очередного возврата(yield).

генератор отличается от итератора там, что производит отдаваемые величины(например по какой-нибудь формуле/выражению). итератор же отдаёт готовые значения, которые в нём хранятся.

======================
def gen(word):
  for n in word:
    try:
      i += 1
    except:
      i = 0
    yield word[i]

for letter in gen('sergey'):
  print(letter)

======================
def gen(word):
  for n in word:
    try:
      i += 1
    except:
      i = 0
    yield word[i]

g = gen('sergey')
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))

======================
======================
======================