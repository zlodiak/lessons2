создаём такую структуру каталогов:

app
----__init__.py
----models.py
----routes.py
----forms.py
----templates
--------base.html
--------index.html
venv
index.py
.gitignore
.git
config.py

не забываем вирт контейнер и СКВ:

git init
python3 -m pip unstall flask

содежримое .gitignore:
*.pyc
/venv
/__pycache__
/app/__pycache__
/app/templates/__pycache__


содержимое init.py:
from flask import Flask
from config import Config
app = Flask(__name__)
app.config.from_object(Config)
from app import routes, models


содержимое index.py:
from app import app


содержимое routes.py:
from app import app
from flask import render_template
@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html', title='Home')


содержимое config.py:
import os
basedir = os.path.abspath(os.path.dirname(__file__))
class Config(object):
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'skldnfkui3489ywsefkfhnkrl45'


содержимое index.html:
{% extends "base.html" %}
{% block content %}
    <h1>Hi</h1>
{% endblock %}


содержимое base.html:
<html>
    <head>
        {% if title %}
            <title>{{ title }}</title>
        {% endif %}
    </head>

    <body>
        <h1>Hello!</h1>
        {% block content %}{% endblock %}
    </body>
</html>


вкл. режим отладки в консоли:
export DEBUG=1

запуск приложения:
flask run

импорт зависимостей для развёртывания на другой машине:
pip freeze > requirements.txt

=============================
подключим postgres и используем её:

pip install flask-sqlalchemy
pip install Flask-Migrate

в конфиг добавить:
    SQLALCHEMY_DATABASE_URI='postgresql://cr_user:qwerty@localhost:5432/crazy_run'
    SQLALCHEMY_TRACK_MODIFICATIONS = True

в инит добавить:
    from flask_sqlalchemy import SQLAlchemy
    from flask_migrate import Migrate
    db = SQLAlchemy(app)
    migrate = Migrate(app, db)

установим библиотеку для взаимодействия с postgres:
sudo apt-get install python3-setuptools
pip install psycopg2-binary


вот пример models.py. по нему создастря таблица
from app import db
import datetime
class User(db.Model):
    __tablename__ = 'users'

    id =            db.Column(db.Integer, primary_key=True)
    username =      db.Column(db.String(40), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    reg_date_unix = db.Column(db.DateTime, nullable=False, default=datetime.datetime.utcnow)
    upd_date_unix = db.Column(db.DateTime, nullable=False, default=datetime.datetime.utcnow)
    email =         db.Column(db.String(40))
    desc =          db.Column(db.Text)

    def __repr__(self):
        return '<User {}>'.format(self.username)

flask db init
flask db migrate
flask db upgrade



если миграции уже существуют, то восстановить по ним БД можно так:
flask shell
>>> from app import db
>>> db
<SQLAlchemy engine=postgresql://cr_user:***@localhost:5432/crazy_run>
>>> db.create_all()


=============================
импортируем в flask shell некоторые объекты:

(venv) kalinin@md ~/python/crazy_run $ export FLASK_APP=index.py

в файле index.py:
    from app import app, db
    from app.models import User

    @app.shell_context_processor
    def make_shell_context():
        return {'db': db, 'User': User}

в результате можем в шелле использовать объекты приложения. в частности это нужно чтобы сгенерировать данные для заполнения таблиц в Бд.

=============================
заполнение БД тестовыми данными. для этого нужно установить пакет nimesis и добавить статический метод в модель:

class User(db.Model):
    __tablename__ = 'users'

    id =            db.Column(db.Integer, primary_key=True)
    username =      db.Column(db.String(40), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    reg_date_unix = db.Column(db.DateTime, nullable=False, default=datetime.datetime.utcnow)
    upd_date_unix = db.Column(db.DateTime, nullable=False, default=datetime.datetime.utcnow)
    email =         db.Column(db.String(40))
    desc =          db.Column(db.Text)

    def __repr__(self):
        return '<User {}>'.format(self.username)

    @staticmethod
    def _bootstrap(count=10, locale='ru'):
        from mimesis import Generic

        generic = Generic(locale)

        for _ in range(count):
            user = User(
                username=generic.full_name(gender='female'),
                password_hash=generic.text(quantity=100),
                reg_date_unix=generic.datetime.timestamp(posix=False),
                upd_date_unix=generic.datetime.timestamp(posix=False),
                email=generic.email(),
                desc=generic.numbers.gender()
            )

            db.session.add(user)
            try:
                db.session.commit()
            except Exception:
                db.session.rollback()

=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================