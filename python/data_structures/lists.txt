список изменяемый объект, значит не меет хэша. списки медленнее чем кортежи потому что они могут менять длину. списко может хранить любые типы данных.

в стандпртной библитеке есть список типа очередь. в памяти занимает нефрагментированный участок. возможен доступ к элементу по индексу и срезы. 

=============================
list можно использовать как очередь. вот основные операции:

q = [1,2,3,4,5,6]

q.insert(0, 0)     # добавить в начало. O(N)
print(q)

del q[0]       # удалить из начала. O(N)
print(q)

q.append(7)     # добавить в конец. O(1)
print(q)

q.pop()         # удалить с конца. O(1)
print(q)

=============================
можно использовать очередь из стандартной библиотеки. (её можно не ограничивать по длине). но если ограничить, то все что выходит за пределы будет обрезаться и двигаться

from collections import deque

q = deque(range(5), 5)
print(q)

q.popleft()     # удалить с начала
print(q)

q.pop()        # удалить с конца
print(q)

q.append(7)     # добавить в конец
print(q)

q.appendleft(9)         # добавить в начало
print(q)
q.appendleft(99)         # добавить в начало
print(q)
q.appendleft(999)         # добавить в начало
print(q)

=============================
в стандертной библиотеке есть модуль array.array. это типизированный массив. они более быстрые.

=============================
срез списка:
a = ['q', 'w', 4, [1, 2]]
print(a[0: 2])	# ['q', 'w']
print(a[:3])		# ['q', 'w', 4]
print(a[:])			# получим копию(передача по значению)

добавление:
a = ['q', 'w', 4, [1, 2]]
a.append(5)				# ['q', 'w', 4, [1, 2], 5]
a.extend([3, 4])	# ['q', 'w', 4, [1, 2], 5, 3, 4]
print(a + [5, 6])	# ['q', 'w', 4, [1, 2], 5, 3, 4, 5, 6]
a.insert(1, 9)		# ['q', 7, 9, 'w', 4, [1, 2], 5, 3, 4] происходит вставка 9 сдвиг после позиции 1

удаление:
a = ['q', 'w', 4, [1, 2], 'w', 2, 'w']
del a[1]			# ['q', 4, [1, 2], 'w', 2, 'w']
a.remove(1)		# ['q', 4, [1, 2], 2, 'w']  удаляет первое вхождение
b = a.pop()		# ['q', 4, [1, 2], 2]    вернёт удалённое значение
b = a.pop(2)	# [1, 2]


поиск:
a = ['q', 'w', 4, [1, 2], 'w']
a.count('w')			# 2 (первая позиция)
'w' in a 					# True
a.index('2')			# 1		если не найдёт, то выбрасывается исключение

[] - False
[....] True

сортировка:
a = [1, 50, 10, 15]
a.sort()
print(a)
# [1, 10, 15, 50]

Метод join() собирает список строк в одну строку с разделителем, который указан перед join:
vlans = ['10', '20', '30']
b = ','.join(vlans)
print(b)
# '10,20,30'

=============================
сортировки:

pyList = ['e', 'a', 'u', 'o', 'i']
print(sorted(pyList))

pySet = {'e', 'a', 'u', 'o', 'i'}
print(sorted(pySet, reverse=True))

random = [(2, 2), (3, 4), (4, 1), (1, 3)]
z = sortedList = sorted(random, key=lambda s: s[1])
print(z)

=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================
=============================