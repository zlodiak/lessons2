import collections.namedtuple
это именованные кортежи. то есть в обычных кортежах обращение к элементу происходит по числу, а в именованных по имени.

from collections import namedtuple
 
Parts = namedtuple('Parts', 'id_num desc cost amount')
auto_parts = Parts(
    id_num='1234',
    desc='Ford Engine',
    cost=1200.00,
    amount=10
)
 
print(auto_parts.id_num)

в первой строке создаётся класс Parts с несколькими свойствами.
во второй строке создаётся экземпляр класса и заполняется.
в последней строке выводится значение свойства.

===========================================
получение абсолютного пути в системе и добавление к нему составного пути, включающего имя файла:

import os
curr_abs_dirname = os.path.dirname(os.path.abspath(__file__))
error_log_path = os.path.join(curr_abs_dirname, 'logs', config.error_log_file_name)

===========================================
collections.deque
Класс deque реализует двухконечную очередь, которая поддерживает добавление и удаление элементов с обоих концов в течение О(1) времени. операция вставки имеет сложнрость O(n)

===========================================
hashlib уже есть в стандартной библиотеке. его можно использовать не только для кхеширования байтовых строк, но и для хеширования обычных строк:

import hashlib
h = hashlib.sha1("password".encode('utf-8'))
print(h.hexdigest())

http://pythonlearn.ru/%D0%B1%D0%B5%D0%B7-%D1%80%D1%83%D0%B1%D1%80%D0%B8%D0%BA%D0%B8/shifrovanie-strok-s-pomoshhyu-modulya-hashlib-python/


>>> import hashlib
>>> h = hashlib.md5(b"password")
>>> p = h.hexdigest()
>>> p    # Пароль, сохраненный в базе
'5f4dcc3b5aa765d61d8327deb882cf99'
>>> h2 = hashlib.md5(b"password")   # Пароль, введенный пользователем
>>> if p == h2.hexdigest(): print("Пароль правильный")

====================================
psycopg2:
python3 -m pip install psycopg2-binary

===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================
===========================================