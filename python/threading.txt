threading  это модуль, который создаёт потоки. в первую очередь они полезны дял операция IO, в том числе сетевых.

======================================
import threading
 
def doubler(number):
    print(threading.currentThread().getName())
    print(number * 2, end='\n')
 
if __name__ == '__main__':
    for i in range(5):
        my_thread = threading.Thread(target=doubler, args=(i,))
        my_thread.start()
        # my_thread.join() # если есть эта строка, то все потоки замораживаются и программа ждёт завершения этого потока(на котором вызван .join())

======================================
то же самое можно записать чрез класс:

import threading
 
class MyThread(threading.Thread):
    def __init__(self, number):
        threading.Thread.__init__(self)
        self.number = number

    def run(self):
        print(threading.currentThread().getName())
        print(self.number * 2, end='\n')
 
if __name__ == '__main__':
    for i in range(5):
        my_thread = MyThread(i)
        my_thread.start()

======================================
если потоки работают с общим ресурсом, то хорошо использовать замки:
lock.acquire() приостанавливает все потоки, lock.release() снова запускает их. 

import threading
 
total = 0
lock = threading.Lock()
 
def update_total(amount):
    global total
    lock.acquire()
 
    try:
        total += amount
    finally:
        lock.release()
 
    print (total)
 
 
if __name__ == '__main__':
    for i in range(10):
        my_thread = threading.Thread(target=update_total, args=(5,))
        my_thread.start()


но использование замка можно упростить так:
    with lock:
        total += amount

======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================