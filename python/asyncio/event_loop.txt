в питоне есть возможность асинхронного выполнения. для этого нужно импортировать эвент луп в виде asyncio.

с версии питона 3.5 введены async await. 
async превращает функцию в корутину. внутри неё можно использовать await, который будет ожидать получения результата(например запрос http). на время ожидания выполнение программы возвращается в эвент луп и из него, возможно, запустится другая корутина.

набор корутин в эвент лупе реализует кооперативную много задачность.

существует два вида многозадачности: вытесняющая и кооперативная.

Потоки и процессы используют вытесняющую многозадачность. Это значит, что система производит квантование времени и постоянно переключается между разными потоками, сохраняя и восстанавливая их контекст выполнения.

При использовании кооперативной многозадачности ветви кода, которые исполняются параллельно, сами отдают управление в определённые моменты времени

===========================
пример получения json по http:

import aiohttp
import asyncio

async def main():
    async with aiohttp.ClientSession() as session:
        response = await session.get('https://api.github.com/users/iliakan')
        print(await response.json())

asyncio.run(main())

===========================
то же самое, но на javascript:

async function showUser() {
	let githubResponse = await fetch(`https://api.github.com/users/iliakan`);
	console.log(githubResponse)
	let githubUser = await githubResponse.json();
	console.log(githubUser)
}
showUser();

===========================
футура это объект, который содержит будущий объект, получаемый асинхронно. футура это аналог промиса из javascript.

футура может находиться в одном из нескольких статусов:
ожидание (pending)
выполнение (running)
выполнено (done)
отменено (cancelled)

Есть цикл обработки событий. И у нас есть функции, которые выполняют асинхронные операции ввода-вывода. Мы передаем свои функции циклу событий и просим его запустить их для нас. Цикл событий возвращает нам объект Future, словно обещание, что в будущем мы что-то получим

===========================
awaitable объект это объект, который имеет магический метод __await__()

===========================


===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================
===========================