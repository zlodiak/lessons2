этот модуль запускает подпрограммы в отдельных процессах. в результате эти потоки выполняются полностью независимо потому что GIL не действует. если процессов больше чем ядер, то ядра делят между собой все процессы

import os
from multiprocessing import Process
 
def doubler(number):
    result = number * 2
    proc = os.getpid()
    print('{0} doubled to {1} by process id: {2}'.format(
        number, result, proc))
 
if __name__ == '__main__':
    numbers = [5, 10, 15, 20, 25]
    procs = []
    
    for number in numbers:
        proc = Process(target=doubler, args=(number,))
        procs.append(proc)
        proc.start()
    
    for proc in procs:
        proc.join()

последний цикл не пускает программу дальше пока все процессы не отработают полностью

=========================================
замки поддерживаются:

from multiprocessing import Process, Lock
 
 
def printer(item, lock):
    """
    Выводим то что передали
    """
    lock.acquire()
    try:
        print(item)
    finally:
        lock.release()
 
 
if __name__ == '__main__':
    lock = Lock()
    items = ['tango', 'foxtrot', 10]
    
    for item in items:
        p = Proces

=========================================
пример измерения времени выполнения всх процессов:

from multiprocessing import Pool
import time
 
def doubler(number):
    return number * 2
 
if __name__ == '__main__':
    start = time.time()

    numbers = [1,2,3,4,5,6,7,8,9]
    pool = Pool(processes=9)
    print(pool.map(doubler, numbers))

    end = time.time()
    print(end - start)

=========================================
получить количество ядер процессора:

import multiprocessing
print("Number of cpu : ", multiprocessing.cpu_count())

=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================