типы данных:


bytearray то же самое, но изменяется
b = bytearray(b'hello world!')
b[0] = 45
print(b)
bytearray(b'-ello world!')


---------------------------
+None:
пустое значение.
None == None 		# True
остальное False
В логическом контексте None всегда является ложью, а not None — истиной.


==============================================
приведение типов:
bool(x) - преобразование к типу bool,
int(a)   - приведение к целому числу.
float([X]) - преобразование к числу с плавающей точкой.
str([object], [кодировка], [ошибки]) - строковое представление объекта. Использует метод __str__.

tuple(obj) - преобразование к кортежу.
set([object]) - создает множество.
list([object]) - создает список.
dict([object]) - преобразование к словарю.
bytes([источник [, кодировка [ошибки]]]) - возвращает объект типа bytes.
bytearray([источник [, кодировка [ошибки]]]) - преобразование к bytearray.

isdigit() - состоит ли строка только из цифр?
isalpha() позволяет проверить, состоит ли строка из одних букв
isalnum() позволяет проверить, состоит ли строка из букв и цифр
type(object) - Возвращает тип объекта.
id(object) - Возвращает "адрес" объекта. 

==============================================
управляющие конструкции:

for item in range(4):
	print(item)
# 1 2 3 4 	

---------------------------
r1 = {1: 'q', 2: 'w'}
for key, value in r1.items():
  print(key + ' => ' + value)

---------------------------
for num in range(5):
  print(num)
else:
  print("Числа закончились")

если сработал break, то else не выполняется

---------------------------
a = 5
while a > 0:
	print(a)
	a -= 1
# 5 4 3 2 1

---------------------------
break, continue действуют для for и while

---------------------------
if a == 3:
	pass
else:
	pass

if a == 3:
	pass
elif a == 2:
	pass
else:
	pass	

---------------------------


==============================================


==============================================
==============================================
передавать имя файла как аргумент скрипта и затем использовать уже указанный файл.
В модуле sys есть очень простой и удобный способ для работы с аргументами - argv.

==============================================
работа с файлами:

file = open('file_name.txt', 'r')

r - открыть файл только для чтения (значение по умолчанию)
r+ - открыть файл для чтения и записи
w - открыть файл для записи
если файл существует, то его содержимое удаляется
если файл не существует, то создается новый
w+ - открыть файл для чтения и записи
если файл существует, то его содержимое удаляется
если файл не существует, то создается новый
a - открыть файл для дополнения записи. Данные добавляются в конец файла
a+ - открыть файл для чтения и записи. Данные добавляются в конец файла

-------------------------------
читать весь файл как одну строку:
f = open('pizza.py', 'r')
text = f.read()
print(text)

или читать каждуй строку файла:
f = open('pizza.py', 'r')
for line in f:
	print(line)

readlines(). Он считывает строки файла в список:
f = open('pizza.py', 'r')
text = f.readlines()
print(text)

-------------------------------
дописать в файл:
f = open('pizza.py', 'a')
f.write('gdfgdgdfgdg')
f.close()

Метод writelines() ожидает список строк, как аргумент.
f = open('pizza.py', 'a')
v = [
	'1212\n',
	'23232\n',
	'sdaasdf\n',
	'cxzcvxcv\n',
]
f.writelines(v)
f.close()

для закрытия файла удобнее использовать with:
with open('pizza.py', 'a') as f:
	v = [
		'1212\n',
		'23232\n',
		'sdaasdf\n',
		'cxzcvxcv\n',
	]
	f.writelines(v)

==============================================
генератор и итератор

генераторное выражение:
genexpr = (x*2 for x in range(10))
next(genexpr)	# 0
next(genexpr)	# 1

----------------------------------
genexpr = [x*2 for x in range(10)]
print(genexpr)
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

----------------------------------
итератор это объект, который инициализируется перебираемым объектом, ставит указатель на первый элемент и при помощи метода next() возвращает этот элемент, увеличивая позицию указателя
lista = [1, 2, 3]
i = iter(lista)
next(i) # 1
next(i) # 2

==============================================


==============================================


==============================================

----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------

==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
условие if __name__ == '__main__' проверяет, был ли файл запущен напрямую.

==============================================
print(*objects, sep=' ', end='n', file=sys.stdout, flush=False)

можно вывести объекты в файл, указав параметр file:

sourceFile = open('python.txt', 'w')
print("Круто же, правда?', file = sourceFile)
sourceFile.close()


аналоги input, print:

>>> import sys
>>> contents = sys.stdin.read()
a
b
EOF
>>> contents
'a\nb\nEOF\n'
>>> sys.stdout.write(contents)
a
b
EOF

не забыть нажать ctrl+D

==============================================
a = [1, 2]
b = a
print(id(a), id(b))
print(a == b) # true
print(a is b) # true
print(a is not b) # false


q = [1, 2]
w = [1, 2]
print(q == w) # true
print(q is w) # false


----

a = [1, 2]
b = a

print(a == b) # true
print(a is b) # true

c = list([1, 2])
print(a == c)
print(a is c)


==============================================
==============================================
pip используется для python2. для python3 нужно устанавливать pip3:
sudo apt-get install python3-pip

==============================================
установка адаптера дл postgres psycopg2:
для питона3 его нужно устанавливать при помощи pip3.
или из исходников: https://github.com/psycopg/psycopg2

==============================================
способ установки под конкретную версию python
python<версия> -m pip install Jinja2

==============================================
старт cgi:
python3 -m http.server --cgi

==============================================
убить процесс локального сервера:
sudo lsof -t -i tcp:8000 | xargs kill -9

==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================
==============================================