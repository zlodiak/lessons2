возможно генерировать стили средствами JS. 

	import { makeStyles } from "@material-ui/styles";

	const useStyles = makeStyles(() => ({
	  typographyStyles: {
	    flex: 1
	  }
	}));

	const Header = () => {
	  const classes = useStyles();
	  return <Typography className={classes.typographyStyles}>Anthony sistilli</Typography>;
	};


можно генерировать стили в зависимости от условия. например из внешнего компонента передадим атрибут так:
	
	<Header bgc={true} />

теперь в целевом компоненте можно пробросить props и использовать тернарный оператор:

	import { makeStyles } from "@material-ui/styles";

	const useStyles = makeStyles(() => ({
	  typographyStyles: {
	    flex: 1,
	    backgroundColor: props => (props.bgc ? 'red' : 'lime')
	  }
	}));

	const Header = (props) => {
	  const classes = useStyles(props);
	  return <Typography className={classes.typographyStyles}>Anthony sistilli</Typography>;
	};

========================================
также возможно использовать значения дефолтной темы. для этого нужно передать тему аргументом в makeStyles и использовать вычисляемое своство:

	const useStyles = makeStyles(theme => ({
	  typographyStyles: {
	    flex: 1,
	    backgroundColor: 'red',
	    [theme.breakpoints.up('sm')]: [
	    	backgroundColor: 'green',
	    ]
	  }
	}));

========================================
можно установить библиотеку classNames для того чтобы можно было присваивать несколько стилей компоненту одновременно.

import classNames from 'classNames';


если эту бибилиотеку не использовать и присвоить несколько стилей, то ошибки не будет, но прменятся тоько последние стили.


========================================
аналогично withRouter можно использовать withStyles. 

для этого нужно в родительском компоненте определить объект styles, каждое свойство которого будет содержать стили. а затем в стиле HOC передать объект стилей в целевой компонент:

	export default withStyles(styles)(HOC)

========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================