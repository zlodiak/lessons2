JSS используется для написания css при помощи js.

	import { createUseStyles, ThemeProvider, useTheme } from "react-jss";

стили верхнего уровня описываются так:

	const useStyles = createUseStyles({
	  wrapper: {
	    padding: 40,
	    background: ({ theme }) => theme.background,
	    textAlign: "left",
	  },
	  title: {
	    font: {
	      size: 40,
	      weight: 900
	    },
	    color: ({ theme }) => theme.color,
	    "&:hover": {
	      opacity: 0.5
	    }	    
	  }
	});

затем в компоненте нужно использовать соответствующие хуки. для темы и для классов:

  const theme = useTheme();
  const classes = useStyles({ theme });

 в JSX применять так:

     <div className={classes.wrapper}>
     	<h1 className={classes.title}>Hello React-JSS!</h1>

=========================================
тема это контейнер с набором переменных:

	const theme = {
	  background: "#f00",
	  color: "#24292e"
	};

контекст темы устанавливается так:

	const App = () => (
	  <ThemeProvider theme={theme}>
	    <Comp />
	  </ThemeProvider>
	);

теперь переменные объекта темы доступны в классах компонента Comp. использовать их так(см. выше):

	color: ({ theme }) => theme.color,

туда они приходят из-за инициализации:

	const classes = useStyles({ theme });

в других файлах можно получить объект темы через хук:

	const theme = useTheme();
	const classes = useStyles(theme);

и после этого использовать так:

	background: theme => theme.background,

=========================================
для сокращения кода можно использовать обёртку типа connect:

	import injectSheet, { ThemeProvider } from 'react-jss'

	...

	const styles = (theme) => ({
	  wrapper: {
	    background: theme.background,
	  },
	  title: {
	    font: {
	      size: 40,
	      weight: 900,
	    },
	    color: props => props.color
	  }
	})

	...

	const Comp = ({ classes }) => (
	  <div className={classes.wrapper}>
	    <h1 className={classes.title}>Hello React-JSS!</h1>
	  </div>
	)

	const StyledComp = injectSheet(styles)(Comp)

	const theme = {
	  background: '#aaa',
	  color: '#24292e'
	}

	const App = () => (
	  <ThemeProvider theme={theme}>
	    <StyledComp color="red"/>
	  </ThemeProvider>	
	)

=========================================
вложенность классов реализуется так:

	const styles = () => ({
	  wrapper: {
	    background: "red",
	    color: "blue",
	    "& h1": {
	      color: "green",
	      "& a": {
	        color: "magenta"
	      }
	    }
	  }
	});

	...

	<div className={classes.wrapper}>
		wrapper
		<h1>
			Hello
			<a href="#">world</a>
		</h1>
	</div>	

=========================================
чтобы прописать несколько классов через один атрибут className, нужно установить https://github.com/JedWatson/classnames

=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================
=========================================