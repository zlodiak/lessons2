иногда требуется диспатчить в стор несколько последовательных действий, часть из которых может быть асинхронная. для этого используется middleware + thunk.

npm i redux-thunk

store.js:

	import { createStore, combineReducers, applyMiddleware } from 'redux';
	import todosReducer from './todosReducer';
	import thunkMiddleware from 'redux-thunk';

	const store = createStore(combineReducers({
	    todosReducer,
	}), applyMiddleware(thunkMiddleware));

	export default store;


Component.jsx:

	import React, { useState } from 'react';
	import { connect } from 'react-redux';

	import { addTodoThunk } from '../../redux/todosReducer';

	const Header = ({ addTodoThunk }) => {
	  const [title, setTitle] = useState('');

	  const addTodo = e => {
	    if (e.key === 'Enter') {
	      addTodoThunk({
	        title: title,
	        isCompleted: false,
	        color: 0,
	      });
	    }
	  };

	  return (
	    <input
	      type="text"
	      value={ title }
	      onChange={ (e) => setTitle(e.target.value) }
	      onKeyUp={ addTodo }
	    />
	  );
	};

	const mapStateToProps = state => {
	  return {
	    todos: state.todosReducer.todos
	  }
	}

	export default connect(mapStateToProps, { addTodoThunk })(Header);

здесь критически важно прокинуть addTodoThunk через mapDispatchToProps.


reducer.js:

	export const addTodoCreator = todo => {
	    return { type: 'ADD_TODO', payload: todo }
	}

	export const addTodoThunk = (todo) => {
	    return async dispatch => {
	        await fetch(`${API_URL}/todos`, {
	            method: 'POST',
	            headers: {
	              'Content-Type': 'application/json;charset=utf-8'
	            },
	            body: JSON.stringify(todo)
	        });
	        dispatch(addTodoCreator(todo));
	    }
	}

видно, что диспатч в стор происходит только после успешной записи в БД

=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================
=============================================