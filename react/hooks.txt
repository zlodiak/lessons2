пример использования useState для манипуляции списком фильмов:

	function FavoriteMovies() {
	  const [movies, setMovies] = useState([{ name: 'Heat' }]);
	  const add = movie => setMovies([...movies, movie]);
	  const remove = index => {
	    setMovies([
	      ...movies.slice(0, index),
	      ...movies.slice(index + 1)
	    ]);
	  }
	}

===================================
разные операции со стейтом:

	// Toggle a boolean
	const [toggled, setToggled] = useState(false);
	setToggled(toggled => !toggled);

	// Increase a counter
	const [count, setCount] = useState(0);
	setCount(count => count + 1);

	// Add an item to array
	const [items, setItems] = useState([]);
	setItems(items => [...items, 'New Item']);

===================================
при перерендере компонента стейт каждый раз устанавливается. следующий код оптимизирует это, заставляя инициализацию происходить только один раз:

	function MyComponent({ bigJsonData }) {
	  const [value, setValue] = useState(function getInitialState() {
	    const object = JSON.parse(bigJsonData); // expensive operation
	    return object.initialValue;
	  });

	  // ...
	}

===================================
в классовом компоненте setState используется так:

	class Page2 extends React.Component {
	    constructor(props) {
	        super(props);
	        this.state = {
	            todos: []
	        };
	        this.setState({ todos: [1, 2, 3] });
	    }
	}


===================================
useEffect вы полняется после первичного рендера компонента.
если второй аргумент не указан, то хук выполняется при каждом обновлении props. это нежелательный вариант из-за потерь  в производительности.
если второй аргумент представляет из себя пустой массив, то хук отрабатыват только один раз.
если в массиве второого аргумента перечислены переменные, то хук отрабатывает при изменинии этих переменных.
инструкция ретурн возвращает коллбек, который отрабатывает при повторном запуске хука.

===================================
useEffect в классовом компоненте работает на основе: 
componentDidMount,
componentDidUpdate,
componentWillUnmount


===================================
можно создавать кастомные хуки, они сокращают код:

	// useUnique.js
	export function useUnique(initial) {
	  const [items, setItems] = useState(initial);
	  const add = newItem => {
	    const uniqueItems = [...new Set([...items, newItem])];
	    setItems(uniqueItems);
	  };
	  return [items, add];
	};
	Having the custom state management extracted into a hook, the ProductsList component becomes much lighter:
	

	import { useUnique } from './useUnique';

	function ProductsList() {
	  const [names, add] = useUnique([]);
	  const [newName, setNewName] = useState('');

	  const map = name => <div>{name}</div>;

	  const handleChange = event => setNewName(e.target.value);
	  const handleAdd = () => add(newName);

	  return (
	    <div className="products">
	      {names.map(map)}
	      <input type="text" onChange={handleChange} />
	      <button onClick={handleAdd}>Add</button>
	    </div>
	  );
	}

===================================
useDispatch используется для отправки в стор напрямую(без использования пропсов):

	import { useDispatch } from "react-redux";
	const dispatch = useDispatch();
	dispatch(ACTION);

===================================
useSelector используется для получения части стора:

	import { useSelector } from 'react-redux'
	const msgs = useSelector((state: any) => state.msgReducer.msgs)
	            {msgs.length && msgs.map((v: any) => {
	                return (
	                    <>
	                        name: <strong>{ v.name }</strong>
	                        <br/>
	                        email: <strong>{ v.email }</strong>
	                        <br/>
	                        msg: <strong>{ v.msg }</strong>
	                        <hr/>
	                    </>
	                );
	            })}

===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================