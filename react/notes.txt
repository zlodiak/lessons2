если реакт не запускается после установки:
npm install autoprefixer@9.8.0


Error: ENOSPC: System limit for number of file watchers reached,
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

==========================================
вывод стейта в любой момент в консоли: window.state = store.getState
нужно выполнить state() 
важно, что в window.state находится функция, а не результат

==========================================
В управляемом компоненте значение поля ввода всегда определяется состоянием React:


  class EssayForm extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        value: 'Будьте любезны, напишите сочинение о вашем любимом DOM-элементе.'
      };

      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
      this.setState({value: event.target.value});
    }

    handleSubmit(event) {
      alert('Сочинение отправлено: ' + this.state.value);
      event.preventDefault();
    }

    render() {
      return (
        <form onSubmit={this.handleSubmit}>
          <textarea value={this.state.value} onChange={this.handleChange} />
          <input type="submit" value="Отправить" />
        </form>
      );
    }



неуправляемые компоненты хранят данные формы прямо в DOM:

  class NameForm extends React.Component {
    constructor(props) {
      super(props);
      this.handleSubmit = this.handleSubmit.bind(this);
      this.input = React.createRef();
    }

    handleSubmit(event) {
      alert('Отправленное имя: ' + this.input.current.value);
      event.preventDefault();
    }

    render() {
      return (
        <form onSubmit={this.handleSubmit}>
          <label>
            Имя:
            <input type="text" ref={this.input} />
          </label>
          <input type="submit" value="Отправить" />
        </form>
      );
    }
  }


==========================================
npm install -g json-server
json-server --watch db.json --port 3001
http://localhost:3001/employees
не забыть создать db.json около .gitignore


==========================================
если во вложенный компонент не приходят новые пропсы, то можно отменить его перерисовывание, которое запускается при изменениях в родителе.

  import React, { memo } from 'react';
  function Page1(props) {
      return (
          <>
              page1
          </>
      );
  }
  export default memo(Page1);


==========================================
вот пример кода, в котором асинхронная функция вызывается внутри другой асинхронной функции:

  export const setGenderThunk = (gender, login) => {
      return async dispatch => {
          const users = await getUsers || [];
          users.forEach(user => {
              if(user.login === login) {
                  const user_ = { ...user, gender: gender };
                  ;(async () => {
                      const result = await setUserF(user_, user.id);
                      debugger
                      if(result.ok) {
                          dispatch(setGenderAC(user_.gender));
                      }
                  })();
                  
              }
          });
      }
  }

  async function setUserF(user, id) {
      return await setUser(user, id);
  }



этот код можно записать в сокращённой форме так:

  export const setGenderThunk = (gender, login) => {
    return async dispatch => {
      const users = await getUsers || [];     // там внутри fetch
      for(let user of users) {
        if(user.login === login) {
          const user_ = { ...user, gender: gender };
          await setUser(user_, user.id);      // там тоже внутри fetch
          debugger
          if(result.ok) {
            dispatch(setGenderAC(user_.gender));
          }

        }
      };
    }
  }


Обычный цикл внутри асинхронной функции умеет работать асинхронно.
forEach же - это просто метод, который синхронно и последовательно вызывает для каждого элемента массива переданную аргументом функцию. Асинхронна ли переданная функция или нет - не имеет значения, потому что сам forEach - синхронная функция


ещё один вариант:

  await Promise.all(users.map(async (user) => { ... })

==========================================


==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================
==========================================